
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model MintReceipt
 * 
 */
export type MintReceipt = $Result.DefaultSelection<Prisma.$MintReceiptPayload>
/**
 * Model RedeemReceipt
 * 
 */
export type RedeemReceipt = $Result.DefaultSelection<Prisma.$RedeemReceiptPayload>
/**
 * Model ReserveSnapshot
 * 
 */
export type ReserveSnapshot = $Result.DefaultSelection<Prisma.$ReserveSnapshotPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model DaoMembership
 * 
 */
export type DaoMembership = $Result.DefaultSelection<Prisma.$DaoMembershipPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model AdminRole
 * 
 */
export type AdminRole = $Result.DefaultSelection<Prisma.$AdminRolePayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Referral
 * 
 */
export type Referral = $Result.DefaultSelection<Prisma.$ReferralPayload>
/**
 * Model ManualPayment
 * 
 */
export type ManualPayment = $Result.DefaultSelection<Prisma.$ManualPaymentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Chain: {
  BSC: 'BSC',
  POLYGON: 'POLYGON'
};

export type Chain = (typeof Chain)[keyof typeof Chain]


export const MintStatus: {
  PENDING: 'PENDING',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  SIGNATURE_PENDING: 'SIGNATURE_PENDING',
  MINTING: 'MINTING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

export type MintStatus = (typeof MintStatus)[keyof typeof MintStatus]


export const RedeemStatus: {
  PENDING: 'PENDING',
  BURN_PENDING: 'BURN_PENDING',
  BURNED: 'BURNED',
  PAYOUT_PENDING: 'PAYOUT_PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

export type RedeemStatus = (typeof RedeemStatus)[keyof typeof RedeemStatus]


export const PaymentMethod: {
  STRIPE: 'STRIPE',
  CASHAPP: 'CASHAPP',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const AuditAction: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  MINT: 'MINT',
  REDEEM: 'REDEEM',
  RESERVE_UPDATE: 'RESERVE_UPDATE',
  CONFIG_CHANGE: 'CONFIG_CHANGE',
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPGRADE: 'MEMBERSHIP_UPGRADE',
  ADMIN_ACTION: 'ADMIN_ACTION'
};

export type AuditAction = (typeof AuditAction)[keyof typeof AuditAction]


export const KycStatus: {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type KycStatus = (typeof KycStatus)[keyof typeof KycStatus]


export const MembershipTier: {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM',
  DIAMOND: 'DIAMOND',
  FOUNDER: 'FOUNDER'
};

export type MembershipTier = (typeof MembershipTier)[keyof typeof MembershipTier]


export const BadgeCategory: {
  TRANSACTION: 'TRANSACTION',
  LOYALTY: 'LOYALTY',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SPECIAL: 'SPECIAL',
  LIMITED_EDITION: 'LIMITED_EDITION',
  FOUNDER: 'FOUNDER'
};

export type BadgeCategory = (typeof BadgeCategory)[keyof typeof BadgeCategory]


export const BadgeRarity: {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

export type BadgeRarity = (typeof BadgeRarity)[keyof typeof BadgeRarity]


export const AdminRoleType: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  FINANCE_ADMIN: 'FINANCE_ADMIN',
  DAO_ADMIN: 'DAO_ADMIN',
  SUPPORT_ADMIN: 'SUPPORT_ADMIN',
  MODERATOR: 'MODERATOR',
  AUDITOR: 'AUDITOR'
};

export type AdminRoleType = (typeof AdminRoleType)[keyof typeof AdminRoleType]


export const AuthMethod: {
  METAMASK: 'METAMASK',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  APPLE: 'APPLE',
  EMAIL: 'EMAIL',
  PASSKEY: 'PASSKEY'
};

export type AuthMethod = (typeof AuthMethod)[keyof typeof AuthMethod]


export const NotificationType: {
  TRANSACTION: 'TRANSACTION',
  SYSTEM: 'SYSTEM',
  PROMOTIONAL: 'PROMOTIONAL',
  SECURITY: 'SECURITY',
  DAO_GOVERNANCE: 'DAO_GOVERNANCE',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPDATE: 'MEMBERSHIP_UPDATE'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type NotificationPriority = (typeof NotificationPriority)[keyof typeof NotificationPriority]


export const ManualPaymentTokenType: {
  C12USD: 'C12USD',
  C12DAO: 'C12DAO'
};

export type ManualPaymentTokenType = (typeof ManualPaymentTokenType)[keyof typeof ManualPaymentTokenType]


export const ManualPaymentMethod: {
  CASH_APP: 'CASH_APP',
  STABLECOIN: 'STABLECOIN'
};

export type ManualPaymentMethod = (typeof ManualPaymentMethod)[keyof typeof ManualPaymentMethod]


export const StablecoinType: {
  BUSD: 'BUSD',
  USDT: 'USDT',
  USDC: 'USDC'
};

export type StablecoinType = (typeof StablecoinType)[keyof typeof StablecoinType]


export const ManualPaymentStatus: {
  PENDING_SUBMISSION: 'PENDING_SUBMISSION',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  VERIFYING: 'VERIFYING',
  APPROVED: 'APPROVED',
  DISTRIBUTING: 'DISTRIBUTING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  REFUNDED: 'REFUNDED'
};

export type ManualPaymentStatus = (typeof ManualPaymentStatus)[keyof typeof ManualPaymentStatus]

}

export type Chain = $Enums.Chain

export const Chain: typeof $Enums.Chain

export type MintStatus = $Enums.MintStatus

export const MintStatus: typeof $Enums.MintStatus

export type RedeemStatus = $Enums.RedeemStatus

export const RedeemStatus: typeof $Enums.RedeemStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type AuditAction = $Enums.AuditAction

export const AuditAction: typeof $Enums.AuditAction

export type KycStatus = $Enums.KycStatus

export const KycStatus: typeof $Enums.KycStatus

export type MembershipTier = $Enums.MembershipTier

export const MembershipTier: typeof $Enums.MembershipTier

export type BadgeCategory = $Enums.BadgeCategory

export const BadgeCategory: typeof $Enums.BadgeCategory

export type BadgeRarity = $Enums.BadgeRarity

export const BadgeRarity: typeof $Enums.BadgeRarity

export type AdminRoleType = $Enums.AdminRoleType

export const AdminRoleType: typeof $Enums.AdminRoleType

export type AuthMethod = $Enums.AuthMethod

export const AuthMethod: typeof $Enums.AuthMethod

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationPriority = $Enums.NotificationPriority

export const NotificationPriority: typeof $Enums.NotificationPriority

export type ManualPaymentTokenType = $Enums.ManualPaymentTokenType

export const ManualPaymentTokenType: typeof $Enums.ManualPaymentTokenType

export type ManualPaymentMethod = $Enums.ManualPaymentMethod

export const ManualPaymentMethod: typeof $Enums.ManualPaymentMethod

export type StablecoinType = $Enums.StablecoinType

export const StablecoinType: typeof $Enums.StablecoinType

export type ManualPaymentStatus = $Enums.ManualPaymentStatus

export const ManualPaymentStatus: typeof $Enums.ManualPaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mintReceipt`: Exposes CRUD operations for the **MintReceipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MintReceipts
    * const mintReceipts = await prisma.mintReceipt.findMany()
    * ```
    */
  get mintReceipt(): Prisma.MintReceiptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.redeemReceipt`: Exposes CRUD operations for the **RedeemReceipt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RedeemReceipts
    * const redeemReceipts = await prisma.redeemReceipt.findMany()
    * ```
    */
  get redeemReceipt(): Prisma.RedeemReceiptDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reserveSnapshot`: Exposes CRUD operations for the **ReserveSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReserveSnapshots
    * const reserveSnapshots = await prisma.reserveSnapshot.findMany()
    * ```
    */
  get reserveSnapshot(): Prisma.ReserveSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.daoMembership`: Exposes CRUD operations for the **DaoMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DaoMemberships
    * const daoMemberships = await prisma.daoMembership.findMany()
    * ```
    */
  get daoMembership(): Prisma.DaoMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminRole`: Exposes CRUD operations for the **AdminRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminRoles
    * const adminRoles = await prisma.adminRole.findMany()
    * ```
    */
  get adminRole(): Prisma.AdminRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referral`: Exposes CRUD operations for the **Referral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referrals
    * const referrals = await prisma.referral.findMany()
    * ```
    */
  get referral(): Prisma.ReferralDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.manualPayment`: Exposes CRUD operations for the **ManualPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ManualPayments
    * const manualPayments = await prisma.manualPayment.findMany()
    * ```
    */
  get manualPayment(): Prisma.ManualPaymentDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    MintReceipt: 'MintReceipt',
    RedeemReceipt: 'RedeemReceipt',
    ReserveSnapshot: 'ReserveSnapshot',
    AuditLog: 'AuditLog',
    SystemConfig: 'SystemConfig',
    DaoMembership: 'DaoMembership',
    Badge: 'Badge',
    UserBadge: 'UserBadge',
    AdminRole: 'AdminRole',
    UserSession: 'UserSession',
    Notification: 'Notification',
    Referral: 'Referral',
    ManualPayment: 'ManualPayment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "mintReceipt" | "redeemReceipt" | "reserveSnapshot" | "auditLog" | "systemConfig" | "daoMembership" | "badge" | "userBadge" | "adminRole" | "userSession" | "notification" | "referral" | "manualPayment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      MintReceipt: {
        payload: Prisma.$MintReceiptPayload<ExtArgs>
        fields: Prisma.MintReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MintReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MintReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          findFirst: {
            args: Prisma.MintReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MintReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          findMany: {
            args: Prisma.MintReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>[]
          }
          create: {
            args: Prisma.MintReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          createMany: {
            args: Prisma.MintReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MintReceiptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>[]
          }
          delete: {
            args: Prisma.MintReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          update: {
            args: Prisma.MintReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          deleteMany: {
            args: Prisma.MintReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MintReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MintReceiptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>[]
          }
          upsert: {
            args: Prisma.MintReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MintReceiptPayload>
          }
          aggregate: {
            args: Prisma.MintReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMintReceipt>
          }
          groupBy: {
            args: Prisma.MintReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<MintReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.MintReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<MintReceiptCountAggregateOutputType> | number
          }
        }
      }
      RedeemReceipt: {
        payload: Prisma.$RedeemReceiptPayload<ExtArgs>
        fields: Prisma.RedeemReceiptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RedeemReceiptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RedeemReceiptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          findFirst: {
            args: Prisma.RedeemReceiptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RedeemReceiptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          findMany: {
            args: Prisma.RedeemReceiptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>[]
          }
          create: {
            args: Prisma.RedeemReceiptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          createMany: {
            args: Prisma.RedeemReceiptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RedeemReceiptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>[]
          }
          delete: {
            args: Prisma.RedeemReceiptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          update: {
            args: Prisma.RedeemReceiptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          deleteMany: {
            args: Prisma.RedeemReceiptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RedeemReceiptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RedeemReceiptUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>[]
          }
          upsert: {
            args: Prisma.RedeemReceiptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedeemReceiptPayload>
          }
          aggregate: {
            args: Prisma.RedeemReceiptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRedeemReceipt>
          }
          groupBy: {
            args: Prisma.RedeemReceiptGroupByArgs<ExtArgs>
            result: $Utils.Optional<RedeemReceiptGroupByOutputType>[]
          }
          count: {
            args: Prisma.RedeemReceiptCountArgs<ExtArgs>
            result: $Utils.Optional<RedeemReceiptCountAggregateOutputType> | number
          }
        }
      }
      ReserveSnapshot: {
        payload: Prisma.$ReserveSnapshotPayload<ExtArgs>
        fields: Prisma.ReserveSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReserveSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReserveSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          findFirst: {
            args: Prisma.ReserveSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReserveSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          findMany: {
            args: Prisma.ReserveSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>[]
          }
          create: {
            args: Prisma.ReserveSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          createMany: {
            args: Prisma.ReserveSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReserveSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>[]
          }
          delete: {
            args: Prisma.ReserveSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          update: {
            args: Prisma.ReserveSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.ReserveSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReserveSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReserveSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.ReserveSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReserveSnapshotPayload>
          }
          aggregate: {
            args: Prisma.ReserveSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReserveSnapshot>
          }
          groupBy: {
            args: Prisma.ReserveSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReserveSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReserveSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<ReserveSnapshotCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      DaoMembership: {
        payload: Prisma.$DaoMembershipPayload<ExtArgs>
        fields: Prisma.DaoMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DaoMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DaoMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          findFirst: {
            args: Prisma.DaoMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DaoMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          findMany: {
            args: Prisma.DaoMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>[]
          }
          create: {
            args: Prisma.DaoMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          createMany: {
            args: Prisma.DaoMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DaoMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>[]
          }
          delete: {
            args: Prisma.DaoMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          update: {
            args: Prisma.DaoMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          deleteMany: {
            args: Prisma.DaoMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DaoMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DaoMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>[]
          }
          upsert: {
            args: Prisma.DaoMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DaoMembershipPayload>
          }
          aggregate: {
            args: Prisma.DaoMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDaoMembership>
          }
          groupBy: {
            args: Prisma.DaoMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<DaoMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.DaoMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<DaoMembershipCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserBadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      AdminRole: {
        payload: Prisma.$AdminRolePayload<ExtArgs>
        fields: Prisma.AdminRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          findFirst: {
            args: Prisma.AdminRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          findMany: {
            args: Prisma.AdminRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>[]
          }
          create: {
            args: Prisma.AdminRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          createMany: {
            args: Prisma.AdminRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>[]
          }
          delete: {
            args: Prisma.AdminRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          update: {
            args: Prisma.AdminRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          deleteMany: {
            args: Prisma.AdminRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>[]
          }
          upsert: {
            args: Prisma.AdminRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminRolePayload>
          }
          aggregate: {
            args: Prisma.AdminRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminRole>
          }
          groupBy: {
            args: Prisma.AdminRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminRoleCountArgs<ExtArgs>
            result: $Utils.Optional<AdminRoleCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Referral: {
        payload: Prisma.$ReferralPayload<ExtArgs>
        fields: Prisma.ReferralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findFirst: {
            args: Prisma.ReferralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findMany: {
            args: Prisma.ReferralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          create: {
            args: Prisma.ReferralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          createMany: {
            args: Prisma.ReferralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          delete: {
            args: Prisma.ReferralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          update: {
            args: Prisma.ReferralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          deleteMany: {
            args: Prisma.ReferralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          upsert: {
            args: Prisma.ReferralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          aggregate: {
            args: Prisma.ReferralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferral>
          }
          groupBy: {
            args: Prisma.ReferralGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCountAggregateOutputType> | number
          }
        }
      }
      ManualPayment: {
        payload: Prisma.$ManualPaymentPayload<ExtArgs>
        fields: Prisma.ManualPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManualPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManualPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          findFirst: {
            args: Prisma.ManualPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManualPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          findMany: {
            args: Prisma.ManualPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>[]
          }
          create: {
            args: Prisma.ManualPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          createMany: {
            args: Prisma.ManualPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ManualPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>[]
          }
          delete: {
            args: Prisma.ManualPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          update: {
            args: Prisma.ManualPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          deleteMany: {
            args: Prisma.ManualPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManualPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ManualPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>[]
          }
          upsert: {
            args: Prisma.ManualPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManualPaymentPayload>
          }
          aggregate: {
            args: Prisma.ManualPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManualPayment>
          }
          groupBy: {
            args: Prisma.ManualPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManualPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManualPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<ManualPaymentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    mintReceipt?: MintReceiptOmit
    redeemReceipt?: RedeemReceiptOmit
    reserveSnapshot?: ReserveSnapshotOmit
    auditLog?: AuditLogOmit
    systemConfig?: SystemConfigOmit
    daoMembership?: DaoMembershipOmit
    badge?: BadgeOmit
    userBadge?: UserBadgeOmit
    adminRole?: AdminRoleOmit
    userSession?: UserSessionOmit
    notification?: NotificationOmit
    referral?: ReferralOmit
    manualPayment?: ManualPaymentOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    mintReceipts: number
    redeemReceipts: number
    userBadges: number
    adminRoles: number
    sessions: number
    manualPayments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mintReceipts?: boolean | UserCountOutputTypeCountMintReceiptsArgs
    redeemReceipts?: boolean | UserCountOutputTypeCountRedeemReceiptsArgs
    userBadges?: boolean | UserCountOutputTypeCountUserBadgesArgs
    adminRoles?: boolean | UserCountOutputTypeCountAdminRolesArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    manualPayments?: boolean | UserCountOutputTypeCountManualPaymentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMintReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MintReceiptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRedeemReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedeemReceiptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManualPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManualPaymentWhereInput
  }


  /**
   * Count Type BadgeCountOutputType
   */

  export type BadgeCountOutputType = {
    userBadges: number
  }

  export type BadgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | BadgeCountOutputTypeCountUserBadgesArgs
  }

  // Custom InputTypes
  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeCountOutputType
     */
    select?: BadgeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeCountUserBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    address: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayName: string | null
    avatar: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitter: string | null
    discord: string | null
    googleId: string | null
    facebookId: string | null
    appleId: string | null
    preferredChain: $Enums.Chain | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    darkMode: boolean | null
    language: string | null
    kycStatus: $Enums.KycStatus | null
    kycSubmittedAt: Date | null
    kycVerifiedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    address: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayName: string | null
    avatar: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitter: string | null
    discord: string | null
    googleId: string | null
    facebookId: string | null
    appleId: string | null
    preferredChain: $Enums.Chain | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    darkMode: boolean | null
    language: string | null
    kycStatus: $Enums.KycStatus | null
    kycSubmittedAt: Date | null
    kycVerifiedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    address: number
    email: number
    createdAt: number
    updatedAt: number
    displayName: number
    avatar: number
    bio: number
    location: number
    website: number
    twitter: number
    discord: number
    googleId: number
    facebookId: number
    appleId: number
    preferredChain: number
    emailNotifications: number
    pushNotifications: number
    darkMode: number
    language: number
    kycStatus: number
    kycSubmittedAt: number
    kycVerifiedAt: number
    kycDocuments: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    address?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    displayName?: true
    avatar?: true
    bio?: true
    location?: true
    website?: true
    twitter?: true
    discord?: true
    googleId?: true
    facebookId?: true
    appleId?: true
    preferredChain?: true
    emailNotifications?: true
    pushNotifications?: true
    darkMode?: true
    language?: true
    kycStatus?: true
    kycSubmittedAt?: true
    kycVerifiedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    address?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    displayName?: true
    avatar?: true
    bio?: true
    location?: true
    website?: true
    twitter?: true
    discord?: true
    googleId?: true
    facebookId?: true
    appleId?: true
    preferredChain?: true
    emailNotifications?: true
    pushNotifications?: true
    darkMode?: true
    language?: true
    kycStatus?: true
    kycSubmittedAt?: true
    kycVerifiedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    address?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    displayName?: true
    avatar?: true
    bio?: true
    location?: true
    website?: true
    twitter?: true
    discord?: true
    googleId?: true
    facebookId?: true
    appleId?: true
    preferredChain?: true
    emailNotifications?: true
    pushNotifications?: true
    darkMode?: true
    language?: true
    kycStatus?: true
    kycSubmittedAt?: true
    kycVerifiedAt?: true
    kycDocuments?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    address: string
    email: string | null
    createdAt: Date
    updatedAt: Date
    displayName: string | null
    avatar: string | null
    bio: string | null
    location: string | null
    website: string | null
    twitter: string | null
    discord: string | null
    googleId: string | null
    facebookId: string | null
    appleId: string | null
    preferredChain: $Enums.Chain | null
    emailNotifications: boolean
    pushNotifications: boolean
    darkMode: boolean
    language: string
    kycStatus: $Enums.KycStatus
    kycSubmittedAt: Date | null
    kycVerifiedAt: Date | null
    kycDocuments: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayName?: boolean
    avatar?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitter?: boolean
    discord?: boolean
    googleId?: boolean
    facebookId?: boolean
    appleId?: boolean
    preferredChain?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    kycStatus?: boolean
    kycSubmittedAt?: boolean
    kycVerifiedAt?: boolean
    kycDocuments?: boolean
    mintReceipts?: boolean | User$mintReceiptsArgs<ExtArgs>
    redeemReceipts?: boolean | User$redeemReceiptsArgs<ExtArgs>
    daoMembership?: boolean | User$daoMembershipArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    adminRoles?: boolean | User$adminRolesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    manualPayments?: boolean | User$manualPaymentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayName?: boolean
    avatar?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitter?: boolean
    discord?: boolean
    googleId?: boolean
    facebookId?: boolean
    appleId?: boolean
    preferredChain?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    kycStatus?: boolean
    kycSubmittedAt?: boolean
    kycVerifiedAt?: boolean
    kycDocuments?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayName?: boolean
    avatar?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitter?: boolean
    discord?: boolean
    googleId?: boolean
    facebookId?: boolean
    appleId?: boolean
    preferredChain?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    kycStatus?: boolean
    kycSubmittedAt?: boolean
    kycVerifiedAt?: boolean
    kycDocuments?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    address?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayName?: boolean
    avatar?: boolean
    bio?: boolean
    location?: boolean
    website?: boolean
    twitter?: boolean
    discord?: boolean
    googleId?: boolean
    facebookId?: boolean
    appleId?: boolean
    preferredChain?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: boolean
    kycStatus?: boolean
    kycSubmittedAt?: boolean
    kycVerifiedAt?: boolean
    kycDocuments?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "email" | "createdAt" | "updatedAt" | "displayName" | "avatar" | "bio" | "location" | "website" | "twitter" | "discord" | "googleId" | "facebookId" | "appleId" | "preferredChain" | "emailNotifications" | "pushNotifications" | "darkMode" | "language" | "kycStatus" | "kycSubmittedAt" | "kycVerifiedAt" | "kycDocuments", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mintReceipts?: boolean | User$mintReceiptsArgs<ExtArgs>
    redeemReceipts?: boolean | User$redeemReceiptsArgs<ExtArgs>
    daoMembership?: boolean | User$daoMembershipArgs<ExtArgs>
    userBadges?: boolean | User$userBadgesArgs<ExtArgs>
    adminRoles?: boolean | User$adminRolesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    manualPayments?: boolean | User$manualPaymentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      mintReceipts: Prisma.$MintReceiptPayload<ExtArgs>[]
      redeemReceipts: Prisma.$RedeemReceiptPayload<ExtArgs>[]
      daoMembership: Prisma.$DaoMembershipPayload<ExtArgs> | null
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
      adminRoles: Prisma.$AdminRolePayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      manualPayments: Prisma.$ManualPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      email: string | null
      createdAt: Date
      updatedAt: Date
      displayName: string | null
      avatar: string | null
      bio: string | null
      location: string | null
      website: string | null
      twitter: string | null
      discord: string | null
      googleId: string | null
      facebookId: string | null
      appleId: string | null
      preferredChain: $Enums.Chain | null
      emailNotifications: boolean
      pushNotifications: boolean
      darkMode: boolean
      language: string
      kycStatus: $Enums.KycStatus
      kycSubmittedAt: Date | null
      kycVerifiedAt: Date | null
      kycDocuments: Prisma.JsonValue | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mintReceipts<T extends User$mintReceiptsArgs<ExtArgs> = {}>(args?: Subset<T, User$mintReceiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    redeemReceipts<T extends User$redeemReceiptsArgs<ExtArgs> = {}>(args?: Subset<T, User$redeemReceiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    daoMembership<T extends User$daoMembershipArgs<ExtArgs> = {}>(args?: Subset<T, User$daoMembershipArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userBadges<T extends User$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, User$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminRoles<T extends User$adminRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$adminRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    manualPayments<T extends User$manualPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$manualPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly website: FieldRef<"User", 'String'>
    readonly twitter: FieldRef<"User", 'String'>
    readonly discord: FieldRef<"User", 'String'>
    readonly googleId: FieldRef<"User", 'String'>
    readonly facebookId: FieldRef<"User", 'String'>
    readonly appleId: FieldRef<"User", 'String'>
    readonly preferredChain: FieldRef<"User", 'Chain'>
    readonly emailNotifications: FieldRef<"User", 'Boolean'>
    readonly pushNotifications: FieldRef<"User", 'Boolean'>
    readonly darkMode: FieldRef<"User", 'Boolean'>
    readonly language: FieldRef<"User", 'String'>
    readonly kycStatus: FieldRef<"User", 'KycStatus'>
    readonly kycSubmittedAt: FieldRef<"User", 'DateTime'>
    readonly kycVerifiedAt: FieldRef<"User", 'DateTime'>
    readonly kycDocuments: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.mintReceipts
   */
  export type User$mintReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    where?: MintReceiptWhereInput
    orderBy?: MintReceiptOrderByWithRelationInput | MintReceiptOrderByWithRelationInput[]
    cursor?: MintReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MintReceiptScalarFieldEnum | MintReceiptScalarFieldEnum[]
  }

  /**
   * User.redeemReceipts
   */
  export type User$redeemReceiptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    where?: RedeemReceiptWhereInput
    orderBy?: RedeemReceiptOrderByWithRelationInput | RedeemReceiptOrderByWithRelationInput[]
    cursor?: RedeemReceiptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RedeemReceiptScalarFieldEnum | RedeemReceiptScalarFieldEnum[]
  }

  /**
   * User.daoMembership
   */
  export type User$daoMembershipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    where?: DaoMembershipWhereInput
  }

  /**
   * User.userBadges
   */
  export type User$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.adminRoles
   */
  export type User$adminRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    where?: AdminRoleWhereInput
    orderBy?: AdminRoleOrderByWithRelationInput | AdminRoleOrderByWithRelationInput[]
    cursor?: AdminRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminRoleScalarFieldEnum | AdminRoleScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.manualPayments
   */
  export type User$manualPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    where?: ManualPaymentWhereInput
    orderBy?: ManualPaymentOrderByWithRelationInput | ManualPaymentOrderByWithRelationInput[]
    cursor?: ManualPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManualPaymentScalarFieldEnum | ManualPaymentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model MintReceipt
   */

  export type AggregateMintReceipt = {
    _count: MintReceiptCountAggregateOutputType | null
    _avg: MintReceiptAvgAggregateOutputType | null
    _sum: MintReceiptSumAggregateOutputType | null
    _min: MintReceiptMinAggregateOutputType | null
    _max: MintReceiptMaxAggregateOutputType | null
  }

  export type MintReceiptAvgAggregateOutputType = {
    amount: Decimal | null
    tokenAmount: Decimal | null
    blockNumber: number | null
    gasUsed: number | null
  }

  export type MintReceiptSumAggregateOutputType = {
    amount: Decimal | null
    tokenAmount: Decimal | null
    blockNumber: number | null
    gasUsed: number | null
  }

  export type MintReceiptMinAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    tokenAmount: Decimal | null
    chain: $Enums.Chain | null
    status: $Enums.MintStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentId: string | null
    paymentHash: string | null
    txHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    receipt: string | null
    signature: string | null
    nonce: string | null
    createdAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
  }

  export type MintReceiptMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    tokenAmount: Decimal | null
    chain: $Enums.Chain | null
    status: $Enums.MintStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentId: string | null
    paymentHash: string | null
    txHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    receipt: string | null
    signature: string | null
    nonce: string | null
    createdAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
  }

  export type MintReceiptCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    tokenAmount: number
    chain: number
    status: number
    paymentMethod: number
    paymentId: number
    paymentHash: number
    txHash: number
    blockNumber: number
    gasUsed: number
    receipt: number
    signature: number
    nonce: number
    createdAt: number
    completedAt: number
    expiresAt: number
    _all: number
  }


  export type MintReceiptAvgAggregateInputType = {
    amount?: true
    tokenAmount?: true
    blockNumber?: true
    gasUsed?: true
  }

  export type MintReceiptSumAggregateInputType = {
    amount?: true
    tokenAmount?: true
    blockNumber?: true
    gasUsed?: true
  }

  export type MintReceiptMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    tokenAmount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    paymentHash?: true
    txHash?: true
    blockNumber?: true
    gasUsed?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
  }

  export type MintReceiptMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    tokenAmount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    paymentHash?: true
    txHash?: true
    blockNumber?: true
    gasUsed?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
  }

  export type MintReceiptCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    tokenAmount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    paymentHash?: true
    txHash?: true
    blockNumber?: true
    gasUsed?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type MintReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MintReceipt to aggregate.
     */
    where?: MintReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MintReceipts to fetch.
     */
    orderBy?: MintReceiptOrderByWithRelationInput | MintReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MintReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MintReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MintReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MintReceipts
    **/
    _count?: true | MintReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MintReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MintReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MintReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MintReceiptMaxAggregateInputType
  }

  export type GetMintReceiptAggregateType<T extends MintReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateMintReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMintReceipt[P]>
      : GetScalarType<T[P], AggregateMintReceipt[P]>
  }




  export type MintReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MintReceiptWhereInput
    orderBy?: MintReceiptOrderByWithAggregationInput | MintReceiptOrderByWithAggregationInput[]
    by: MintReceiptScalarFieldEnum[] | MintReceiptScalarFieldEnum
    having?: MintReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MintReceiptCountAggregateInputType | true
    _avg?: MintReceiptAvgAggregateInputType
    _sum?: MintReceiptSumAggregateInputType
    _min?: MintReceiptMinAggregateInputType
    _max?: MintReceiptMaxAggregateInputType
  }

  export type MintReceiptGroupByOutputType = {
    id: string
    userId: string
    amount: Decimal
    tokenAmount: Decimal
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash: string | null
    txHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt: Date
    completedAt: Date | null
    expiresAt: Date
    _count: MintReceiptCountAggregateOutputType | null
    _avg: MintReceiptAvgAggregateOutputType | null
    _sum: MintReceiptSumAggregateOutputType | null
    _min: MintReceiptMinAggregateOutputType | null
    _max: MintReceiptMaxAggregateOutputType | null
  }

  type GetMintReceiptGroupByPayload<T extends MintReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MintReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MintReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MintReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], MintReceiptGroupByOutputType[P]>
        }
      >
    >


  export type MintReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    tokenAmount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    paymentHash?: boolean
    txHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mintReceipt"]>

  export type MintReceiptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    tokenAmount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    paymentHash?: boolean
    txHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mintReceipt"]>

  export type MintReceiptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    tokenAmount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    paymentHash?: boolean
    txHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mintReceipt"]>

  export type MintReceiptSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    tokenAmount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    paymentHash?: boolean
    txHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
  }

  export type MintReceiptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "tokenAmount" | "chain" | "status" | "paymentMethod" | "paymentId" | "paymentHash" | "txHash" | "blockNumber" | "gasUsed" | "receipt" | "signature" | "nonce" | "createdAt" | "completedAt" | "expiresAt", ExtArgs["result"]["mintReceipt"]>
  export type MintReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MintReceiptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MintReceiptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MintReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MintReceipt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      amount: Prisma.Decimal
      tokenAmount: Prisma.Decimal
      chain: $Enums.Chain
      status: $Enums.MintStatus
      paymentMethod: $Enums.PaymentMethod
      paymentId: string
      paymentHash: string | null
      txHash: string | null
      blockNumber: number | null
      gasUsed: number | null
      receipt: string
      signature: string
      nonce: string
      createdAt: Date
      completedAt: Date | null
      expiresAt: Date
    }, ExtArgs["result"]["mintReceipt"]>
    composites: {}
  }

  type MintReceiptGetPayload<S extends boolean | null | undefined | MintReceiptDefaultArgs> = $Result.GetResult<Prisma.$MintReceiptPayload, S>

  type MintReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MintReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MintReceiptCountAggregateInputType | true
    }

  export interface MintReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MintReceipt'], meta: { name: 'MintReceipt' } }
    /**
     * Find zero or one MintReceipt that matches the filter.
     * @param {MintReceiptFindUniqueArgs} args - Arguments to find a MintReceipt
     * @example
     * // Get one MintReceipt
     * const mintReceipt = await prisma.mintReceipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MintReceiptFindUniqueArgs>(args: SelectSubset<T, MintReceiptFindUniqueArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MintReceipt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MintReceiptFindUniqueOrThrowArgs} args - Arguments to find a MintReceipt
     * @example
     * // Get one MintReceipt
     * const mintReceipt = await prisma.mintReceipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MintReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, MintReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MintReceipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptFindFirstArgs} args - Arguments to find a MintReceipt
     * @example
     * // Get one MintReceipt
     * const mintReceipt = await prisma.mintReceipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MintReceiptFindFirstArgs>(args?: SelectSubset<T, MintReceiptFindFirstArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MintReceipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptFindFirstOrThrowArgs} args - Arguments to find a MintReceipt
     * @example
     * // Get one MintReceipt
     * const mintReceipt = await prisma.mintReceipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MintReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, MintReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MintReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MintReceipts
     * const mintReceipts = await prisma.mintReceipt.findMany()
     * 
     * // Get first 10 MintReceipts
     * const mintReceipts = await prisma.mintReceipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mintReceiptWithIdOnly = await prisma.mintReceipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MintReceiptFindManyArgs>(args?: SelectSubset<T, MintReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MintReceipt.
     * @param {MintReceiptCreateArgs} args - Arguments to create a MintReceipt.
     * @example
     * // Create one MintReceipt
     * const MintReceipt = await prisma.mintReceipt.create({
     *   data: {
     *     // ... data to create a MintReceipt
     *   }
     * })
     * 
     */
    create<T extends MintReceiptCreateArgs>(args: SelectSubset<T, MintReceiptCreateArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MintReceipts.
     * @param {MintReceiptCreateManyArgs} args - Arguments to create many MintReceipts.
     * @example
     * // Create many MintReceipts
     * const mintReceipt = await prisma.mintReceipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MintReceiptCreateManyArgs>(args?: SelectSubset<T, MintReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MintReceipts and returns the data saved in the database.
     * @param {MintReceiptCreateManyAndReturnArgs} args - Arguments to create many MintReceipts.
     * @example
     * // Create many MintReceipts
     * const mintReceipt = await prisma.mintReceipt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MintReceipts and only return the `id`
     * const mintReceiptWithIdOnly = await prisma.mintReceipt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MintReceiptCreateManyAndReturnArgs>(args?: SelectSubset<T, MintReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MintReceipt.
     * @param {MintReceiptDeleteArgs} args - Arguments to delete one MintReceipt.
     * @example
     * // Delete one MintReceipt
     * const MintReceipt = await prisma.mintReceipt.delete({
     *   where: {
     *     // ... filter to delete one MintReceipt
     *   }
     * })
     * 
     */
    delete<T extends MintReceiptDeleteArgs>(args: SelectSubset<T, MintReceiptDeleteArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MintReceipt.
     * @param {MintReceiptUpdateArgs} args - Arguments to update one MintReceipt.
     * @example
     * // Update one MintReceipt
     * const mintReceipt = await prisma.mintReceipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MintReceiptUpdateArgs>(args: SelectSubset<T, MintReceiptUpdateArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MintReceipts.
     * @param {MintReceiptDeleteManyArgs} args - Arguments to filter MintReceipts to delete.
     * @example
     * // Delete a few MintReceipts
     * const { count } = await prisma.mintReceipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MintReceiptDeleteManyArgs>(args?: SelectSubset<T, MintReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MintReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MintReceipts
     * const mintReceipt = await prisma.mintReceipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MintReceiptUpdateManyArgs>(args: SelectSubset<T, MintReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MintReceipts and returns the data updated in the database.
     * @param {MintReceiptUpdateManyAndReturnArgs} args - Arguments to update many MintReceipts.
     * @example
     * // Update many MintReceipts
     * const mintReceipt = await prisma.mintReceipt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MintReceipts and only return the `id`
     * const mintReceiptWithIdOnly = await prisma.mintReceipt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MintReceiptUpdateManyAndReturnArgs>(args: SelectSubset<T, MintReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MintReceipt.
     * @param {MintReceiptUpsertArgs} args - Arguments to update or create a MintReceipt.
     * @example
     * // Update or create a MintReceipt
     * const mintReceipt = await prisma.mintReceipt.upsert({
     *   create: {
     *     // ... data to create a MintReceipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MintReceipt we want to update
     *   }
     * })
     */
    upsert<T extends MintReceiptUpsertArgs>(args: SelectSubset<T, MintReceiptUpsertArgs<ExtArgs>>): Prisma__MintReceiptClient<$Result.GetResult<Prisma.$MintReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MintReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptCountArgs} args - Arguments to filter MintReceipts to count.
     * @example
     * // Count the number of MintReceipts
     * const count = await prisma.mintReceipt.count({
     *   where: {
     *     // ... the filter for the MintReceipts we want to count
     *   }
     * })
    **/
    count<T extends MintReceiptCountArgs>(
      args?: Subset<T, MintReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MintReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MintReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MintReceiptAggregateArgs>(args: Subset<T, MintReceiptAggregateArgs>): Prisma.PrismaPromise<GetMintReceiptAggregateType<T>>

    /**
     * Group by MintReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MintReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MintReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MintReceiptGroupByArgs['orderBy'] }
        : { orderBy?: MintReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MintReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMintReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MintReceipt model
   */
  readonly fields: MintReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MintReceipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MintReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MintReceipt model
   */
  interface MintReceiptFieldRefs {
    readonly id: FieldRef<"MintReceipt", 'String'>
    readonly userId: FieldRef<"MintReceipt", 'String'>
    readonly amount: FieldRef<"MintReceipt", 'Decimal'>
    readonly tokenAmount: FieldRef<"MintReceipt", 'Decimal'>
    readonly chain: FieldRef<"MintReceipt", 'Chain'>
    readonly status: FieldRef<"MintReceipt", 'MintStatus'>
    readonly paymentMethod: FieldRef<"MintReceipt", 'PaymentMethod'>
    readonly paymentId: FieldRef<"MintReceipt", 'String'>
    readonly paymentHash: FieldRef<"MintReceipt", 'String'>
    readonly txHash: FieldRef<"MintReceipt", 'String'>
    readonly blockNumber: FieldRef<"MintReceipt", 'Int'>
    readonly gasUsed: FieldRef<"MintReceipt", 'Int'>
    readonly receipt: FieldRef<"MintReceipt", 'String'>
    readonly signature: FieldRef<"MintReceipt", 'String'>
    readonly nonce: FieldRef<"MintReceipt", 'String'>
    readonly createdAt: FieldRef<"MintReceipt", 'DateTime'>
    readonly completedAt: FieldRef<"MintReceipt", 'DateTime'>
    readonly expiresAt: FieldRef<"MintReceipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MintReceipt findUnique
   */
  export type MintReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter, which MintReceipt to fetch.
     */
    where: MintReceiptWhereUniqueInput
  }

  /**
   * MintReceipt findUniqueOrThrow
   */
  export type MintReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter, which MintReceipt to fetch.
     */
    where: MintReceiptWhereUniqueInput
  }

  /**
   * MintReceipt findFirst
   */
  export type MintReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter, which MintReceipt to fetch.
     */
    where?: MintReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MintReceipts to fetch.
     */
    orderBy?: MintReceiptOrderByWithRelationInput | MintReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MintReceipts.
     */
    cursor?: MintReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MintReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MintReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MintReceipts.
     */
    distinct?: MintReceiptScalarFieldEnum | MintReceiptScalarFieldEnum[]
  }

  /**
   * MintReceipt findFirstOrThrow
   */
  export type MintReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter, which MintReceipt to fetch.
     */
    where?: MintReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MintReceipts to fetch.
     */
    orderBy?: MintReceiptOrderByWithRelationInput | MintReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MintReceipts.
     */
    cursor?: MintReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MintReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MintReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MintReceipts.
     */
    distinct?: MintReceiptScalarFieldEnum | MintReceiptScalarFieldEnum[]
  }

  /**
   * MintReceipt findMany
   */
  export type MintReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter, which MintReceipts to fetch.
     */
    where?: MintReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MintReceipts to fetch.
     */
    orderBy?: MintReceiptOrderByWithRelationInput | MintReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MintReceipts.
     */
    cursor?: MintReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MintReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MintReceipts.
     */
    skip?: number
    distinct?: MintReceiptScalarFieldEnum | MintReceiptScalarFieldEnum[]
  }

  /**
   * MintReceipt create
   */
  export type MintReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a MintReceipt.
     */
    data: XOR<MintReceiptCreateInput, MintReceiptUncheckedCreateInput>
  }

  /**
   * MintReceipt createMany
   */
  export type MintReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MintReceipts.
     */
    data: MintReceiptCreateManyInput | MintReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MintReceipt createManyAndReturn
   */
  export type MintReceiptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * The data used to create many MintReceipts.
     */
    data: MintReceiptCreateManyInput | MintReceiptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MintReceipt update
   */
  export type MintReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a MintReceipt.
     */
    data: XOR<MintReceiptUpdateInput, MintReceiptUncheckedUpdateInput>
    /**
     * Choose, which MintReceipt to update.
     */
    where: MintReceiptWhereUniqueInput
  }

  /**
   * MintReceipt updateMany
   */
  export type MintReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MintReceipts.
     */
    data: XOR<MintReceiptUpdateManyMutationInput, MintReceiptUncheckedUpdateManyInput>
    /**
     * Filter which MintReceipts to update
     */
    where?: MintReceiptWhereInput
    /**
     * Limit how many MintReceipts to update.
     */
    limit?: number
  }

  /**
   * MintReceipt updateManyAndReturn
   */
  export type MintReceiptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * The data used to update MintReceipts.
     */
    data: XOR<MintReceiptUpdateManyMutationInput, MintReceiptUncheckedUpdateManyInput>
    /**
     * Filter which MintReceipts to update
     */
    where?: MintReceiptWhereInput
    /**
     * Limit how many MintReceipts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MintReceipt upsert
   */
  export type MintReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the MintReceipt to update in case it exists.
     */
    where: MintReceiptWhereUniqueInput
    /**
     * In case the MintReceipt found by the `where` argument doesn't exist, create a new MintReceipt with this data.
     */
    create: XOR<MintReceiptCreateInput, MintReceiptUncheckedCreateInput>
    /**
     * In case the MintReceipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MintReceiptUpdateInput, MintReceiptUncheckedUpdateInput>
  }

  /**
   * MintReceipt delete
   */
  export type MintReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
    /**
     * Filter which MintReceipt to delete.
     */
    where: MintReceiptWhereUniqueInput
  }

  /**
   * MintReceipt deleteMany
   */
  export type MintReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MintReceipts to delete
     */
    where?: MintReceiptWhereInput
    /**
     * Limit how many MintReceipts to delete.
     */
    limit?: number
  }

  /**
   * MintReceipt without action
   */
  export type MintReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MintReceipt
     */
    select?: MintReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MintReceipt
     */
    omit?: MintReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MintReceiptInclude<ExtArgs> | null
  }


  /**
   * Model RedeemReceipt
   */

  export type AggregateRedeemReceipt = {
    _count: RedeemReceiptCountAggregateOutputType | null
    _avg: RedeemReceiptAvgAggregateOutputType | null
    _sum: RedeemReceiptSumAggregateOutputType | null
    _min: RedeemReceiptMinAggregateOutputType | null
    _max: RedeemReceiptMaxAggregateOutputType | null
  }

  export type RedeemReceiptAvgAggregateOutputType = {
    tokenAmount: Decimal | null
    amount: Decimal | null
    blockNumber: number | null
    gasUsed: number | null
  }

  export type RedeemReceiptSumAggregateOutputType = {
    tokenAmount: Decimal | null
    amount: Decimal | null
    blockNumber: number | null
    gasUsed: number | null
  }

  export type RedeemReceiptMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenAmount: Decimal | null
    amount: Decimal | null
    chain: $Enums.Chain | null
    status: $Enums.RedeemStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentAddress: string | null
    burnTxHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    payoutId: string | null
    payoutHash: string | null
    receipt: string | null
    signature: string | null
    nonce: string | null
    createdAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
  }

  export type RedeemReceiptMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tokenAmount: Decimal | null
    amount: Decimal | null
    chain: $Enums.Chain | null
    status: $Enums.RedeemStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentAddress: string | null
    burnTxHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    payoutId: string | null
    payoutHash: string | null
    receipt: string | null
    signature: string | null
    nonce: string | null
    createdAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
  }

  export type RedeemReceiptCountAggregateOutputType = {
    id: number
    userId: number
    tokenAmount: number
    amount: number
    chain: number
    status: number
    paymentMethod: number
    paymentAddress: number
    burnTxHash: number
    blockNumber: number
    gasUsed: number
    payoutId: number
    payoutHash: number
    receipt: number
    signature: number
    nonce: number
    createdAt: number
    completedAt: number
    expiresAt: number
    _all: number
  }


  export type RedeemReceiptAvgAggregateInputType = {
    tokenAmount?: true
    amount?: true
    blockNumber?: true
    gasUsed?: true
  }

  export type RedeemReceiptSumAggregateInputType = {
    tokenAmount?: true
    amount?: true
    blockNumber?: true
    gasUsed?: true
  }

  export type RedeemReceiptMinAggregateInputType = {
    id?: true
    userId?: true
    tokenAmount?: true
    amount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentAddress?: true
    burnTxHash?: true
    blockNumber?: true
    gasUsed?: true
    payoutId?: true
    payoutHash?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
  }

  export type RedeemReceiptMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenAmount?: true
    amount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentAddress?: true
    burnTxHash?: true
    blockNumber?: true
    gasUsed?: true
    payoutId?: true
    payoutHash?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
  }

  export type RedeemReceiptCountAggregateInputType = {
    id?: true
    userId?: true
    tokenAmount?: true
    amount?: true
    chain?: true
    status?: true
    paymentMethod?: true
    paymentAddress?: true
    burnTxHash?: true
    blockNumber?: true
    gasUsed?: true
    payoutId?: true
    payoutHash?: true
    receipt?: true
    signature?: true
    nonce?: true
    createdAt?: true
    completedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type RedeemReceiptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RedeemReceipt to aggregate.
     */
    where?: RedeemReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedeemReceipts to fetch.
     */
    orderBy?: RedeemReceiptOrderByWithRelationInput | RedeemReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RedeemReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedeemReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedeemReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RedeemReceipts
    **/
    _count?: true | RedeemReceiptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RedeemReceiptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RedeemReceiptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RedeemReceiptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RedeemReceiptMaxAggregateInputType
  }

  export type GetRedeemReceiptAggregateType<T extends RedeemReceiptAggregateArgs> = {
        [P in keyof T & keyof AggregateRedeemReceipt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRedeemReceipt[P]>
      : GetScalarType<T[P], AggregateRedeemReceipt[P]>
  }




  export type RedeemReceiptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedeemReceiptWhereInput
    orderBy?: RedeemReceiptOrderByWithAggregationInput | RedeemReceiptOrderByWithAggregationInput[]
    by: RedeemReceiptScalarFieldEnum[] | RedeemReceiptScalarFieldEnum
    having?: RedeemReceiptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RedeemReceiptCountAggregateInputType | true
    _avg?: RedeemReceiptAvgAggregateInputType
    _sum?: RedeemReceiptSumAggregateInputType
    _min?: RedeemReceiptMinAggregateInputType
    _max?: RedeemReceiptMaxAggregateInputType
  }

  export type RedeemReceiptGroupByOutputType = {
    id: string
    userId: string
    tokenAmount: Decimal
    amount: Decimal
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash: string | null
    blockNumber: number | null
    gasUsed: number | null
    payoutId: string | null
    payoutHash: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt: Date
    completedAt: Date | null
    expiresAt: Date
    _count: RedeemReceiptCountAggregateOutputType | null
    _avg: RedeemReceiptAvgAggregateOutputType | null
    _sum: RedeemReceiptSumAggregateOutputType | null
    _min: RedeemReceiptMinAggregateOutputType | null
    _max: RedeemReceiptMaxAggregateOutputType | null
  }

  type GetRedeemReceiptGroupByPayload<T extends RedeemReceiptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RedeemReceiptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RedeemReceiptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RedeemReceiptGroupByOutputType[P]>
            : GetScalarType<T[P], RedeemReceiptGroupByOutputType[P]>
        }
      >
    >


  export type RedeemReceiptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenAmount?: boolean
    amount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentAddress?: boolean
    burnTxHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    payoutId?: boolean
    payoutHash?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redeemReceipt"]>

  export type RedeemReceiptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenAmount?: boolean
    amount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentAddress?: boolean
    burnTxHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    payoutId?: boolean
    payoutHash?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redeemReceipt"]>

  export type RedeemReceiptSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenAmount?: boolean
    amount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentAddress?: boolean
    burnTxHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    payoutId?: boolean
    payoutHash?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redeemReceipt"]>

  export type RedeemReceiptSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenAmount?: boolean
    amount?: boolean
    chain?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentAddress?: boolean
    burnTxHash?: boolean
    blockNumber?: boolean
    gasUsed?: boolean
    payoutId?: boolean
    payoutHash?: boolean
    receipt?: boolean
    signature?: boolean
    nonce?: boolean
    createdAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
  }

  export type RedeemReceiptOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tokenAmount" | "amount" | "chain" | "status" | "paymentMethod" | "paymentAddress" | "burnTxHash" | "blockNumber" | "gasUsed" | "payoutId" | "payoutHash" | "receipt" | "signature" | "nonce" | "createdAt" | "completedAt" | "expiresAt", ExtArgs["result"]["redeemReceipt"]>
  export type RedeemReceiptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RedeemReceiptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RedeemReceiptIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RedeemReceiptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RedeemReceipt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tokenAmount: Prisma.Decimal
      amount: Prisma.Decimal
      chain: $Enums.Chain
      status: $Enums.RedeemStatus
      paymentMethod: $Enums.PaymentMethod
      paymentAddress: string
      burnTxHash: string | null
      blockNumber: number | null
      gasUsed: number | null
      payoutId: string | null
      payoutHash: string | null
      receipt: string
      signature: string
      nonce: string
      createdAt: Date
      completedAt: Date | null
      expiresAt: Date
    }, ExtArgs["result"]["redeemReceipt"]>
    composites: {}
  }

  type RedeemReceiptGetPayload<S extends boolean | null | undefined | RedeemReceiptDefaultArgs> = $Result.GetResult<Prisma.$RedeemReceiptPayload, S>

  type RedeemReceiptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RedeemReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RedeemReceiptCountAggregateInputType | true
    }

  export interface RedeemReceiptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RedeemReceipt'], meta: { name: 'RedeemReceipt' } }
    /**
     * Find zero or one RedeemReceipt that matches the filter.
     * @param {RedeemReceiptFindUniqueArgs} args - Arguments to find a RedeemReceipt
     * @example
     * // Get one RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RedeemReceiptFindUniqueArgs>(args: SelectSubset<T, RedeemReceiptFindUniqueArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RedeemReceipt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RedeemReceiptFindUniqueOrThrowArgs} args - Arguments to find a RedeemReceipt
     * @example
     * // Get one RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RedeemReceiptFindUniqueOrThrowArgs>(args: SelectSubset<T, RedeemReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RedeemReceipt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptFindFirstArgs} args - Arguments to find a RedeemReceipt
     * @example
     * // Get one RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RedeemReceiptFindFirstArgs>(args?: SelectSubset<T, RedeemReceiptFindFirstArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RedeemReceipt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptFindFirstOrThrowArgs} args - Arguments to find a RedeemReceipt
     * @example
     * // Get one RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RedeemReceiptFindFirstOrThrowArgs>(args?: SelectSubset<T, RedeemReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RedeemReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RedeemReceipts
     * const redeemReceipts = await prisma.redeemReceipt.findMany()
     * 
     * // Get first 10 RedeemReceipts
     * const redeemReceipts = await prisma.redeemReceipt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const redeemReceiptWithIdOnly = await prisma.redeemReceipt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RedeemReceiptFindManyArgs>(args?: SelectSubset<T, RedeemReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RedeemReceipt.
     * @param {RedeemReceiptCreateArgs} args - Arguments to create a RedeemReceipt.
     * @example
     * // Create one RedeemReceipt
     * const RedeemReceipt = await prisma.redeemReceipt.create({
     *   data: {
     *     // ... data to create a RedeemReceipt
     *   }
     * })
     * 
     */
    create<T extends RedeemReceiptCreateArgs>(args: SelectSubset<T, RedeemReceiptCreateArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RedeemReceipts.
     * @param {RedeemReceiptCreateManyArgs} args - Arguments to create many RedeemReceipts.
     * @example
     * // Create many RedeemReceipts
     * const redeemReceipt = await prisma.redeemReceipt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RedeemReceiptCreateManyArgs>(args?: SelectSubset<T, RedeemReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RedeemReceipts and returns the data saved in the database.
     * @param {RedeemReceiptCreateManyAndReturnArgs} args - Arguments to create many RedeemReceipts.
     * @example
     * // Create many RedeemReceipts
     * const redeemReceipt = await prisma.redeemReceipt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RedeemReceipts and only return the `id`
     * const redeemReceiptWithIdOnly = await prisma.redeemReceipt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RedeemReceiptCreateManyAndReturnArgs>(args?: SelectSubset<T, RedeemReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RedeemReceipt.
     * @param {RedeemReceiptDeleteArgs} args - Arguments to delete one RedeemReceipt.
     * @example
     * // Delete one RedeemReceipt
     * const RedeemReceipt = await prisma.redeemReceipt.delete({
     *   where: {
     *     // ... filter to delete one RedeemReceipt
     *   }
     * })
     * 
     */
    delete<T extends RedeemReceiptDeleteArgs>(args: SelectSubset<T, RedeemReceiptDeleteArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RedeemReceipt.
     * @param {RedeemReceiptUpdateArgs} args - Arguments to update one RedeemReceipt.
     * @example
     * // Update one RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RedeemReceiptUpdateArgs>(args: SelectSubset<T, RedeemReceiptUpdateArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RedeemReceipts.
     * @param {RedeemReceiptDeleteManyArgs} args - Arguments to filter RedeemReceipts to delete.
     * @example
     * // Delete a few RedeemReceipts
     * const { count } = await prisma.redeemReceipt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RedeemReceiptDeleteManyArgs>(args?: SelectSubset<T, RedeemReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RedeemReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RedeemReceipts
     * const redeemReceipt = await prisma.redeemReceipt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RedeemReceiptUpdateManyArgs>(args: SelectSubset<T, RedeemReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RedeemReceipts and returns the data updated in the database.
     * @param {RedeemReceiptUpdateManyAndReturnArgs} args - Arguments to update many RedeemReceipts.
     * @example
     * // Update many RedeemReceipts
     * const redeemReceipt = await prisma.redeemReceipt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RedeemReceipts and only return the `id`
     * const redeemReceiptWithIdOnly = await prisma.redeemReceipt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RedeemReceiptUpdateManyAndReturnArgs>(args: SelectSubset<T, RedeemReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RedeemReceipt.
     * @param {RedeemReceiptUpsertArgs} args - Arguments to update or create a RedeemReceipt.
     * @example
     * // Update or create a RedeemReceipt
     * const redeemReceipt = await prisma.redeemReceipt.upsert({
     *   create: {
     *     // ... data to create a RedeemReceipt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RedeemReceipt we want to update
     *   }
     * })
     */
    upsert<T extends RedeemReceiptUpsertArgs>(args: SelectSubset<T, RedeemReceiptUpsertArgs<ExtArgs>>): Prisma__RedeemReceiptClient<$Result.GetResult<Prisma.$RedeemReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RedeemReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptCountArgs} args - Arguments to filter RedeemReceipts to count.
     * @example
     * // Count the number of RedeemReceipts
     * const count = await prisma.redeemReceipt.count({
     *   where: {
     *     // ... the filter for the RedeemReceipts we want to count
     *   }
     * })
    **/
    count<T extends RedeemReceiptCountArgs>(
      args?: Subset<T, RedeemReceiptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RedeemReceiptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RedeemReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RedeemReceiptAggregateArgs>(args: Subset<T, RedeemReceiptAggregateArgs>): Prisma.PrismaPromise<GetRedeemReceiptAggregateType<T>>

    /**
     * Group by RedeemReceipt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedeemReceiptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RedeemReceiptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RedeemReceiptGroupByArgs['orderBy'] }
        : { orderBy?: RedeemReceiptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RedeemReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRedeemReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RedeemReceipt model
   */
  readonly fields: RedeemReceiptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RedeemReceipt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RedeemReceiptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RedeemReceipt model
   */
  interface RedeemReceiptFieldRefs {
    readonly id: FieldRef<"RedeemReceipt", 'String'>
    readonly userId: FieldRef<"RedeemReceipt", 'String'>
    readonly tokenAmount: FieldRef<"RedeemReceipt", 'Decimal'>
    readonly amount: FieldRef<"RedeemReceipt", 'Decimal'>
    readonly chain: FieldRef<"RedeemReceipt", 'Chain'>
    readonly status: FieldRef<"RedeemReceipt", 'RedeemStatus'>
    readonly paymentMethod: FieldRef<"RedeemReceipt", 'PaymentMethod'>
    readonly paymentAddress: FieldRef<"RedeemReceipt", 'String'>
    readonly burnTxHash: FieldRef<"RedeemReceipt", 'String'>
    readonly blockNumber: FieldRef<"RedeemReceipt", 'Int'>
    readonly gasUsed: FieldRef<"RedeemReceipt", 'Int'>
    readonly payoutId: FieldRef<"RedeemReceipt", 'String'>
    readonly payoutHash: FieldRef<"RedeemReceipt", 'String'>
    readonly receipt: FieldRef<"RedeemReceipt", 'String'>
    readonly signature: FieldRef<"RedeemReceipt", 'String'>
    readonly nonce: FieldRef<"RedeemReceipt", 'String'>
    readonly createdAt: FieldRef<"RedeemReceipt", 'DateTime'>
    readonly completedAt: FieldRef<"RedeemReceipt", 'DateTime'>
    readonly expiresAt: FieldRef<"RedeemReceipt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RedeemReceipt findUnique
   */
  export type RedeemReceiptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter, which RedeemReceipt to fetch.
     */
    where: RedeemReceiptWhereUniqueInput
  }

  /**
   * RedeemReceipt findUniqueOrThrow
   */
  export type RedeemReceiptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter, which RedeemReceipt to fetch.
     */
    where: RedeemReceiptWhereUniqueInput
  }

  /**
   * RedeemReceipt findFirst
   */
  export type RedeemReceiptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter, which RedeemReceipt to fetch.
     */
    where?: RedeemReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedeemReceipts to fetch.
     */
    orderBy?: RedeemReceiptOrderByWithRelationInput | RedeemReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RedeemReceipts.
     */
    cursor?: RedeemReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedeemReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedeemReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RedeemReceipts.
     */
    distinct?: RedeemReceiptScalarFieldEnum | RedeemReceiptScalarFieldEnum[]
  }

  /**
   * RedeemReceipt findFirstOrThrow
   */
  export type RedeemReceiptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter, which RedeemReceipt to fetch.
     */
    where?: RedeemReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedeemReceipts to fetch.
     */
    orderBy?: RedeemReceiptOrderByWithRelationInput | RedeemReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RedeemReceipts.
     */
    cursor?: RedeemReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedeemReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedeemReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RedeemReceipts.
     */
    distinct?: RedeemReceiptScalarFieldEnum | RedeemReceiptScalarFieldEnum[]
  }

  /**
   * RedeemReceipt findMany
   */
  export type RedeemReceiptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter, which RedeemReceipts to fetch.
     */
    where?: RedeemReceiptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedeemReceipts to fetch.
     */
    orderBy?: RedeemReceiptOrderByWithRelationInput | RedeemReceiptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RedeemReceipts.
     */
    cursor?: RedeemReceiptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedeemReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedeemReceipts.
     */
    skip?: number
    distinct?: RedeemReceiptScalarFieldEnum | RedeemReceiptScalarFieldEnum[]
  }

  /**
   * RedeemReceipt create
   */
  export type RedeemReceiptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * The data needed to create a RedeemReceipt.
     */
    data: XOR<RedeemReceiptCreateInput, RedeemReceiptUncheckedCreateInput>
  }

  /**
   * RedeemReceipt createMany
   */
  export type RedeemReceiptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RedeemReceipts.
     */
    data: RedeemReceiptCreateManyInput | RedeemReceiptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RedeemReceipt createManyAndReturn
   */
  export type RedeemReceiptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * The data used to create many RedeemReceipts.
     */
    data: RedeemReceiptCreateManyInput | RedeemReceiptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RedeemReceipt update
   */
  export type RedeemReceiptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * The data needed to update a RedeemReceipt.
     */
    data: XOR<RedeemReceiptUpdateInput, RedeemReceiptUncheckedUpdateInput>
    /**
     * Choose, which RedeemReceipt to update.
     */
    where: RedeemReceiptWhereUniqueInput
  }

  /**
   * RedeemReceipt updateMany
   */
  export type RedeemReceiptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RedeemReceipts.
     */
    data: XOR<RedeemReceiptUpdateManyMutationInput, RedeemReceiptUncheckedUpdateManyInput>
    /**
     * Filter which RedeemReceipts to update
     */
    where?: RedeemReceiptWhereInput
    /**
     * Limit how many RedeemReceipts to update.
     */
    limit?: number
  }

  /**
   * RedeemReceipt updateManyAndReturn
   */
  export type RedeemReceiptUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * The data used to update RedeemReceipts.
     */
    data: XOR<RedeemReceiptUpdateManyMutationInput, RedeemReceiptUncheckedUpdateManyInput>
    /**
     * Filter which RedeemReceipts to update
     */
    where?: RedeemReceiptWhereInput
    /**
     * Limit how many RedeemReceipts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RedeemReceipt upsert
   */
  export type RedeemReceiptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * The filter to search for the RedeemReceipt to update in case it exists.
     */
    where: RedeemReceiptWhereUniqueInput
    /**
     * In case the RedeemReceipt found by the `where` argument doesn't exist, create a new RedeemReceipt with this data.
     */
    create: XOR<RedeemReceiptCreateInput, RedeemReceiptUncheckedCreateInput>
    /**
     * In case the RedeemReceipt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RedeemReceiptUpdateInput, RedeemReceiptUncheckedUpdateInput>
  }

  /**
   * RedeemReceipt delete
   */
  export type RedeemReceiptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
    /**
     * Filter which RedeemReceipt to delete.
     */
    where: RedeemReceiptWhereUniqueInput
  }

  /**
   * RedeemReceipt deleteMany
   */
  export type RedeemReceiptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RedeemReceipts to delete
     */
    where?: RedeemReceiptWhereInput
    /**
     * Limit how many RedeemReceipts to delete.
     */
    limit?: number
  }

  /**
   * RedeemReceipt without action
   */
  export type RedeemReceiptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedeemReceipt
     */
    select?: RedeemReceiptSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RedeemReceipt
     */
    omit?: RedeemReceiptOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedeemReceiptInclude<ExtArgs> | null
  }


  /**
   * Model ReserveSnapshot
   */

  export type AggregateReserveSnapshot = {
    _count: ReserveSnapshotCountAggregateOutputType | null
    _avg: ReserveSnapshotAvgAggregateOutputType | null
    _sum: ReserveSnapshotSumAggregateOutputType | null
    _min: ReserveSnapshotMinAggregateOutputType | null
    _max: ReserveSnapshotMaxAggregateOutputType | null
  }

  export type ReserveSnapshotAvgAggregateOutputType = {
    totalUsdReserve: Decimal | null
    totalSupply: Decimal | null
    bscSupply: Decimal | null
    polygonSupply: Decimal | null
    stripeBalance: Decimal | null
    cashAppBalance: Decimal | null
    bankBalance: Decimal | null
    collateralRatio: Decimal | null
    blockNumber: number | null
  }

  export type ReserveSnapshotSumAggregateOutputType = {
    totalUsdReserve: Decimal | null
    totalSupply: Decimal | null
    bscSupply: Decimal | null
    polygonSupply: Decimal | null
    stripeBalance: Decimal | null
    cashAppBalance: Decimal | null
    bankBalance: Decimal | null
    collateralRatio: Decimal | null
    blockNumber: number | null
  }

  export type ReserveSnapshotMinAggregateOutputType = {
    id: string | null
    totalUsdReserve: Decimal | null
    totalSupply: Decimal | null
    bscSupply: Decimal | null
    polygonSupply: Decimal | null
    stripeBalance: Decimal | null
    cashAppBalance: Decimal | null
    bankBalance: Decimal | null
    collateralRatio: Decimal | null
    isHealthy: boolean | null
    blockNumber: number | null
    timestamp: Date | null
  }

  export type ReserveSnapshotMaxAggregateOutputType = {
    id: string | null
    totalUsdReserve: Decimal | null
    totalSupply: Decimal | null
    bscSupply: Decimal | null
    polygonSupply: Decimal | null
    stripeBalance: Decimal | null
    cashAppBalance: Decimal | null
    bankBalance: Decimal | null
    collateralRatio: Decimal | null
    isHealthy: boolean | null
    blockNumber: number | null
    timestamp: Date | null
  }

  export type ReserveSnapshotCountAggregateOutputType = {
    id: number
    totalUsdReserve: number
    totalSupply: number
    bscSupply: number
    polygonSupply: number
    stripeBalance: number
    cashAppBalance: number
    bankBalance: number
    collateralRatio: number
    isHealthy: number
    blockNumber: number
    timestamp: number
    _all: number
  }


  export type ReserveSnapshotAvgAggregateInputType = {
    totalUsdReserve?: true
    totalSupply?: true
    bscSupply?: true
    polygonSupply?: true
    stripeBalance?: true
    cashAppBalance?: true
    bankBalance?: true
    collateralRatio?: true
    blockNumber?: true
  }

  export type ReserveSnapshotSumAggregateInputType = {
    totalUsdReserve?: true
    totalSupply?: true
    bscSupply?: true
    polygonSupply?: true
    stripeBalance?: true
    cashAppBalance?: true
    bankBalance?: true
    collateralRatio?: true
    blockNumber?: true
  }

  export type ReserveSnapshotMinAggregateInputType = {
    id?: true
    totalUsdReserve?: true
    totalSupply?: true
    bscSupply?: true
    polygonSupply?: true
    stripeBalance?: true
    cashAppBalance?: true
    bankBalance?: true
    collateralRatio?: true
    isHealthy?: true
    blockNumber?: true
    timestamp?: true
  }

  export type ReserveSnapshotMaxAggregateInputType = {
    id?: true
    totalUsdReserve?: true
    totalSupply?: true
    bscSupply?: true
    polygonSupply?: true
    stripeBalance?: true
    cashAppBalance?: true
    bankBalance?: true
    collateralRatio?: true
    isHealthy?: true
    blockNumber?: true
    timestamp?: true
  }

  export type ReserveSnapshotCountAggregateInputType = {
    id?: true
    totalUsdReserve?: true
    totalSupply?: true
    bscSupply?: true
    polygonSupply?: true
    stripeBalance?: true
    cashAppBalance?: true
    bankBalance?: true
    collateralRatio?: true
    isHealthy?: true
    blockNumber?: true
    timestamp?: true
    _all?: true
  }

  export type ReserveSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReserveSnapshot to aggregate.
     */
    where?: ReserveSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReserveSnapshots to fetch.
     */
    orderBy?: ReserveSnapshotOrderByWithRelationInput | ReserveSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReserveSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReserveSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReserveSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReserveSnapshots
    **/
    _count?: true | ReserveSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReserveSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReserveSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReserveSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReserveSnapshotMaxAggregateInputType
  }

  export type GetReserveSnapshotAggregateType<T extends ReserveSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateReserveSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReserveSnapshot[P]>
      : GetScalarType<T[P], AggregateReserveSnapshot[P]>
  }




  export type ReserveSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReserveSnapshotWhereInput
    orderBy?: ReserveSnapshotOrderByWithAggregationInput | ReserveSnapshotOrderByWithAggregationInput[]
    by: ReserveSnapshotScalarFieldEnum[] | ReserveSnapshotScalarFieldEnum
    having?: ReserveSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReserveSnapshotCountAggregateInputType | true
    _avg?: ReserveSnapshotAvgAggregateInputType
    _sum?: ReserveSnapshotSumAggregateInputType
    _min?: ReserveSnapshotMinAggregateInputType
    _max?: ReserveSnapshotMaxAggregateInputType
  }

  export type ReserveSnapshotGroupByOutputType = {
    id: string
    totalUsdReserve: Decimal
    totalSupply: Decimal
    bscSupply: Decimal
    polygonSupply: Decimal
    stripeBalance: Decimal
    cashAppBalance: Decimal
    bankBalance: Decimal
    collateralRatio: Decimal
    isHealthy: boolean
    blockNumber: number
    timestamp: Date
    _count: ReserveSnapshotCountAggregateOutputType | null
    _avg: ReserveSnapshotAvgAggregateOutputType | null
    _sum: ReserveSnapshotSumAggregateOutputType | null
    _min: ReserveSnapshotMinAggregateOutputType | null
    _max: ReserveSnapshotMaxAggregateOutputType | null
  }

  type GetReserveSnapshotGroupByPayload<T extends ReserveSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReserveSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReserveSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReserveSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], ReserveSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type ReserveSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUsdReserve?: boolean
    totalSupply?: boolean
    bscSupply?: boolean
    polygonSupply?: boolean
    stripeBalance?: boolean
    cashAppBalance?: boolean
    bankBalance?: boolean
    collateralRatio?: boolean
    isHealthy?: boolean
    blockNumber?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["reserveSnapshot"]>

  export type ReserveSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUsdReserve?: boolean
    totalSupply?: boolean
    bscSupply?: boolean
    polygonSupply?: boolean
    stripeBalance?: boolean
    cashAppBalance?: boolean
    bankBalance?: boolean
    collateralRatio?: boolean
    isHealthy?: boolean
    blockNumber?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["reserveSnapshot"]>

  export type ReserveSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalUsdReserve?: boolean
    totalSupply?: boolean
    bscSupply?: boolean
    polygonSupply?: boolean
    stripeBalance?: boolean
    cashAppBalance?: boolean
    bankBalance?: boolean
    collateralRatio?: boolean
    isHealthy?: boolean
    blockNumber?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["reserveSnapshot"]>

  export type ReserveSnapshotSelectScalar = {
    id?: boolean
    totalUsdReserve?: boolean
    totalSupply?: boolean
    bscSupply?: boolean
    polygonSupply?: boolean
    stripeBalance?: boolean
    cashAppBalance?: boolean
    bankBalance?: boolean
    collateralRatio?: boolean
    isHealthy?: boolean
    blockNumber?: boolean
    timestamp?: boolean
  }

  export type ReserveSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "totalUsdReserve" | "totalSupply" | "bscSupply" | "polygonSupply" | "stripeBalance" | "cashAppBalance" | "bankBalance" | "collateralRatio" | "isHealthy" | "blockNumber" | "timestamp", ExtArgs["result"]["reserveSnapshot"]>

  export type $ReserveSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReserveSnapshot"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      totalUsdReserve: Prisma.Decimal
      totalSupply: Prisma.Decimal
      bscSupply: Prisma.Decimal
      polygonSupply: Prisma.Decimal
      stripeBalance: Prisma.Decimal
      cashAppBalance: Prisma.Decimal
      bankBalance: Prisma.Decimal
      collateralRatio: Prisma.Decimal
      isHealthy: boolean
      blockNumber: number
      timestamp: Date
    }, ExtArgs["result"]["reserveSnapshot"]>
    composites: {}
  }

  type ReserveSnapshotGetPayload<S extends boolean | null | undefined | ReserveSnapshotDefaultArgs> = $Result.GetResult<Prisma.$ReserveSnapshotPayload, S>

  type ReserveSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReserveSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReserveSnapshotCountAggregateInputType | true
    }

  export interface ReserveSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReserveSnapshot'], meta: { name: 'ReserveSnapshot' } }
    /**
     * Find zero or one ReserveSnapshot that matches the filter.
     * @param {ReserveSnapshotFindUniqueArgs} args - Arguments to find a ReserveSnapshot
     * @example
     * // Get one ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReserveSnapshotFindUniqueArgs>(args: SelectSubset<T, ReserveSnapshotFindUniqueArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReserveSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReserveSnapshotFindUniqueOrThrowArgs} args - Arguments to find a ReserveSnapshot
     * @example
     * // Get one ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReserveSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, ReserveSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReserveSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotFindFirstArgs} args - Arguments to find a ReserveSnapshot
     * @example
     * // Get one ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReserveSnapshotFindFirstArgs>(args?: SelectSubset<T, ReserveSnapshotFindFirstArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReserveSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotFindFirstOrThrowArgs} args - Arguments to find a ReserveSnapshot
     * @example
     * // Get one ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReserveSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, ReserveSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReserveSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReserveSnapshots
     * const reserveSnapshots = await prisma.reserveSnapshot.findMany()
     * 
     * // Get first 10 ReserveSnapshots
     * const reserveSnapshots = await prisma.reserveSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reserveSnapshotWithIdOnly = await prisma.reserveSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReserveSnapshotFindManyArgs>(args?: SelectSubset<T, ReserveSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReserveSnapshot.
     * @param {ReserveSnapshotCreateArgs} args - Arguments to create a ReserveSnapshot.
     * @example
     * // Create one ReserveSnapshot
     * const ReserveSnapshot = await prisma.reserveSnapshot.create({
     *   data: {
     *     // ... data to create a ReserveSnapshot
     *   }
     * })
     * 
     */
    create<T extends ReserveSnapshotCreateArgs>(args: SelectSubset<T, ReserveSnapshotCreateArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReserveSnapshots.
     * @param {ReserveSnapshotCreateManyArgs} args - Arguments to create many ReserveSnapshots.
     * @example
     * // Create many ReserveSnapshots
     * const reserveSnapshot = await prisma.reserveSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReserveSnapshotCreateManyArgs>(args?: SelectSubset<T, ReserveSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReserveSnapshots and returns the data saved in the database.
     * @param {ReserveSnapshotCreateManyAndReturnArgs} args - Arguments to create many ReserveSnapshots.
     * @example
     * // Create many ReserveSnapshots
     * const reserveSnapshot = await prisma.reserveSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReserveSnapshots and only return the `id`
     * const reserveSnapshotWithIdOnly = await prisma.reserveSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReserveSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, ReserveSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReserveSnapshot.
     * @param {ReserveSnapshotDeleteArgs} args - Arguments to delete one ReserveSnapshot.
     * @example
     * // Delete one ReserveSnapshot
     * const ReserveSnapshot = await prisma.reserveSnapshot.delete({
     *   where: {
     *     // ... filter to delete one ReserveSnapshot
     *   }
     * })
     * 
     */
    delete<T extends ReserveSnapshotDeleteArgs>(args: SelectSubset<T, ReserveSnapshotDeleteArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReserveSnapshot.
     * @param {ReserveSnapshotUpdateArgs} args - Arguments to update one ReserveSnapshot.
     * @example
     * // Update one ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReserveSnapshotUpdateArgs>(args: SelectSubset<T, ReserveSnapshotUpdateArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReserveSnapshots.
     * @param {ReserveSnapshotDeleteManyArgs} args - Arguments to filter ReserveSnapshots to delete.
     * @example
     * // Delete a few ReserveSnapshots
     * const { count } = await prisma.reserveSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReserveSnapshotDeleteManyArgs>(args?: SelectSubset<T, ReserveSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReserveSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReserveSnapshots
     * const reserveSnapshot = await prisma.reserveSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReserveSnapshotUpdateManyArgs>(args: SelectSubset<T, ReserveSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReserveSnapshots and returns the data updated in the database.
     * @param {ReserveSnapshotUpdateManyAndReturnArgs} args - Arguments to update many ReserveSnapshots.
     * @example
     * // Update many ReserveSnapshots
     * const reserveSnapshot = await prisma.reserveSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReserveSnapshots and only return the `id`
     * const reserveSnapshotWithIdOnly = await prisma.reserveSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReserveSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, ReserveSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReserveSnapshot.
     * @param {ReserveSnapshotUpsertArgs} args - Arguments to update or create a ReserveSnapshot.
     * @example
     * // Update or create a ReserveSnapshot
     * const reserveSnapshot = await prisma.reserveSnapshot.upsert({
     *   create: {
     *     // ... data to create a ReserveSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReserveSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends ReserveSnapshotUpsertArgs>(args: SelectSubset<T, ReserveSnapshotUpsertArgs<ExtArgs>>): Prisma__ReserveSnapshotClient<$Result.GetResult<Prisma.$ReserveSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReserveSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotCountArgs} args - Arguments to filter ReserveSnapshots to count.
     * @example
     * // Count the number of ReserveSnapshots
     * const count = await prisma.reserveSnapshot.count({
     *   where: {
     *     // ... the filter for the ReserveSnapshots we want to count
     *   }
     * })
    **/
    count<T extends ReserveSnapshotCountArgs>(
      args?: Subset<T, ReserveSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReserveSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReserveSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReserveSnapshotAggregateArgs>(args: Subset<T, ReserveSnapshotAggregateArgs>): Prisma.PrismaPromise<GetReserveSnapshotAggregateType<T>>

    /**
     * Group by ReserveSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReserveSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReserveSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReserveSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: ReserveSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReserveSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReserveSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReserveSnapshot model
   */
  readonly fields: ReserveSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReserveSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReserveSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReserveSnapshot model
   */
  interface ReserveSnapshotFieldRefs {
    readonly id: FieldRef<"ReserveSnapshot", 'String'>
    readonly totalUsdReserve: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly totalSupply: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly bscSupply: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly polygonSupply: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly stripeBalance: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly cashAppBalance: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly bankBalance: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly collateralRatio: FieldRef<"ReserveSnapshot", 'Decimal'>
    readonly isHealthy: FieldRef<"ReserveSnapshot", 'Boolean'>
    readonly blockNumber: FieldRef<"ReserveSnapshot", 'Int'>
    readonly timestamp: FieldRef<"ReserveSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReserveSnapshot findUnique
   */
  export type ReserveSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter, which ReserveSnapshot to fetch.
     */
    where: ReserveSnapshotWhereUniqueInput
  }

  /**
   * ReserveSnapshot findUniqueOrThrow
   */
  export type ReserveSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter, which ReserveSnapshot to fetch.
     */
    where: ReserveSnapshotWhereUniqueInput
  }

  /**
   * ReserveSnapshot findFirst
   */
  export type ReserveSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter, which ReserveSnapshot to fetch.
     */
    where?: ReserveSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReserveSnapshots to fetch.
     */
    orderBy?: ReserveSnapshotOrderByWithRelationInput | ReserveSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReserveSnapshots.
     */
    cursor?: ReserveSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReserveSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReserveSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReserveSnapshots.
     */
    distinct?: ReserveSnapshotScalarFieldEnum | ReserveSnapshotScalarFieldEnum[]
  }

  /**
   * ReserveSnapshot findFirstOrThrow
   */
  export type ReserveSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter, which ReserveSnapshot to fetch.
     */
    where?: ReserveSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReserveSnapshots to fetch.
     */
    orderBy?: ReserveSnapshotOrderByWithRelationInput | ReserveSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReserveSnapshots.
     */
    cursor?: ReserveSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReserveSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReserveSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReserveSnapshots.
     */
    distinct?: ReserveSnapshotScalarFieldEnum | ReserveSnapshotScalarFieldEnum[]
  }

  /**
   * ReserveSnapshot findMany
   */
  export type ReserveSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter, which ReserveSnapshots to fetch.
     */
    where?: ReserveSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReserveSnapshots to fetch.
     */
    orderBy?: ReserveSnapshotOrderByWithRelationInput | ReserveSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReserveSnapshots.
     */
    cursor?: ReserveSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReserveSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReserveSnapshots.
     */
    skip?: number
    distinct?: ReserveSnapshotScalarFieldEnum | ReserveSnapshotScalarFieldEnum[]
  }

  /**
   * ReserveSnapshot create
   */
  export type ReserveSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * The data needed to create a ReserveSnapshot.
     */
    data: XOR<ReserveSnapshotCreateInput, ReserveSnapshotUncheckedCreateInput>
  }

  /**
   * ReserveSnapshot createMany
   */
  export type ReserveSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReserveSnapshots.
     */
    data: ReserveSnapshotCreateManyInput | ReserveSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReserveSnapshot createManyAndReturn
   */
  export type ReserveSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many ReserveSnapshots.
     */
    data: ReserveSnapshotCreateManyInput | ReserveSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReserveSnapshot update
   */
  export type ReserveSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * The data needed to update a ReserveSnapshot.
     */
    data: XOR<ReserveSnapshotUpdateInput, ReserveSnapshotUncheckedUpdateInput>
    /**
     * Choose, which ReserveSnapshot to update.
     */
    where: ReserveSnapshotWhereUniqueInput
  }

  /**
   * ReserveSnapshot updateMany
   */
  export type ReserveSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReserveSnapshots.
     */
    data: XOR<ReserveSnapshotUpdateManyMutationInput, ReserveSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which ReserveSnapshots to update
     */
    where?: ReserveSnapshotWhereInput
    /**
     * Limit how many ReserveSnapshots to update.
     */
    limit?: number
  }

  /**
   * ReserveSnapshot updateManyAndReturn
   */
  export type ReserveSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update ReserveSnapshots.
     */
    data: XOR<ReserveSnapshotUpdateManyMutationInput, ReserveSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which ReserveSnapshots to update
     */
    where?: ReserveSnapshotWhereInput
    /**
     * Limit how many ReserveSnapshots to update.
     */
    limit?: number
  }

  /**
   * ReserveSnapshot upsert
   */
  export type ReserveSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * The filter to search for the ReserveSnapshot to update in case it exists.
     */
    where: ReserveSnapshotWhereUniqueInput
    /**
     * In case the ReserveSnapshot found by the `where` argument doesn't exist, create a new ReserveSnapshot with this data.
     */
    create: XOR<ReserveSnapshotCreateInput, ReserveSnapshotUncheckedCreateInput>
    /**
     * In case the ReserveSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReserveSnapshotUpdateInput, ReserveSnapshotUncheckedUpdateInput>
  }

  /**
   * ReserveSnapshot delete
   */
  export type ReserveSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
    /**
     * Filter which ReserveSnapshot to delete.
     */
    where: ReserveSnapshotWhereUniqueInput
  }

  /**
   * ReserveSnapshot deleteMany
   */
  export type ReserveSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReserveSnapshots to delete
     */
    where?: ReserveSnapshotWhereInput
    /**
     * Limit how many ReserveSnapshots to delete.
     */
    limit?: number
  }

  /**
   * ReserveSnapshot without action
   */
  export type ReserveSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReserveSnapshot
     */
    select?: ReserveSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReserveSnapshot
     */
    omit?: ReserveSnapshotOmit<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: $Enums.AuditAction | null
    entityType: string | null
    entityId: string | null
    userAddress: string | null
    adminAddress: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: $Enums.AuditAction | null
    entityType: string | null
    entityId: string | null
    userAddress: string | null
    adminAddress: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    userAddress: number
    adminAddress: number
    ipAddress: number
    userAgent: number
    oldData: number
    newData: number
    metadata: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userAddress?: true
    adminAddress?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userAddress?: true
    adminAddress?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userAddress?: true
    adminAddress?: true
    ipAddress?: true
    userAgent?: true
    oldData?: true
    newData?: true
    metadata?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: $Enums.AuditAction
    entityType: string
    entityId: string
    userAddress: string | null
    adminAddress: string | null
    ipAddress: string | null
    userAgent: string | null
    oldData: JsonValue | null
    newData: JsonValue | null
    metadata: JsonValue | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userAddress?: boolean
    adminAddress?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userAddress?: boolean
    adminAddress?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userAddress?: boolean
    adminAddress?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userAddress?: boolean
    adminAddress?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    timestamp?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entityType" | "entityId" | "userAddress" | "adminAddress" | "ipAddress" | "userAgent" | "oldData" | "newData" | "metadata" | "timestamp", ExtArgs["result"]["auditLog"]>

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: $Enums.AuditAction
      entityType: string
      entityId: string
      userAddress: string | null
      adminAddress: string | null
      ipAddress: string | null
      userAgent: string | null
      oldData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'AuditAction'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly userAddress: FieldRef<"AuditLog", 'String'>
    readonly adminAddress: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'Json'>
    readonly newData: FieldRef<"AuditLog", 'Json'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    updatedBy: string | null
    updatedAt: Date | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    updatedBy: string | null
    updatedAt: Date | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    updatedBy: number
    updatedAt: number
    _all: number
  }


  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    updatedBy?: true
    updatedAt?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    updatedBy?: true
    updatedAt?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    updatedBy?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: string
    key: string
    value: string
    description: string | null
    updatedBy: string
    updatedAt: Date
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedBy?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedBy?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedBy?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    updatedBy?: boolean
    updatedAt?: boolean
  }

  export type SystemConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "description" | "updatedBy" | "updatedAt", ExtArgs["result"]["systemConfig"]>

  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      description: string | null
      updatedBy: string
      updatedAt: Date
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs and returns the data updated in the database.
     * @param {SystemConfigUpdateManyAndReturnArgs} args - Arguments to update many SystemConfigs.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'String'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
    readonly description: FieldRef<"SystemConfig", 'String'>
    readonly updatedBy: FieldRef<"SystemConfig", 'String'>
    readonly updatedAt: FieldRef<"SystemConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig updateManyAndReturn
   */
  export type SystemConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to update.
     */
    limit?: number
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
    /**
     * Limit how many SystemConfigs to delete.
     */
    limit?: number
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemConfig
     */
    omit?: SystemConfigOmit<ExtArgs> | null
  }


  /**
   * Model DaoMembership
   */

  export type AggregateDaoMembership = {
    _count: DaoMembershipCountAggregateOutputType | null
    _avg: DaoMembershipAvgAggregateOutputType | null
    _sum: DaoMembershipSumAggregateOutputType | null
    _min: DaoMembershipMinAggregateOutputType | null
    _max: DaoMembershipMaxAggregateOutputType | null
  }

  export type DaoMembershipAvgAggregateOutputType = {
    totalStaked: Decimal | null
    totalTransactions: number | null
    totalVolume: Decimal | null
    referralCount: number | null
  }

  export type DaoMembershipSumAggregateOutputType = {
    totalStaked: Decimal | null
    totalTransactions: number | null
    totalVolume: Decimal | null
    referralCount: number | null
  }

  export type DaoMembershipMinAggregateOutputType = {
    id: string | null
    userId: string | null
    membershipTier: $Enums.MembershipTier | null
    joinedAt: Date | null
    lastActiveAt: Date | null
    totalStaked: Decimal | null
    totalTransactions: number | null
    totalVolume: Decimal | null
    referralCount: number | null
    isActive: boolean | null
    isPremium: boolean | null
    isFounder: boolean | null
  }

  export type DaoMembershipMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    membershipTier: $Enums.MembershipTier | null
    joinedAt: Date | null
    lastActiveAt: Date | null
    totalStaked: Decimal | null
    totalTransactions: number | null
    totalVolume: Decimal | null
    referralCount: number | null
    isActive: boolean | null
    isPremium: boolean | null
    isFounder: boolean | null
  }

  export type DaoMembershipCountAggregateOutputType = {
    id: number
    userId: number
    membershipTier: number
    joinedAt: number
    lastActiveAt: number
    totalStaked: number
    totalTransactions: number
    totalVolume: number
    referralCount: number
    isActive: number
    isPremium: number
    isFounder: number
    _all: number
  }


  export type DaoMembershipAvgAggregateInputType = {
    totalStaked?: true
    totalTransactions?: true
    totalVolume?: true
    referralCount?: true
  }

  export type DaoMembershipSumAggregateInputType = {
    totalStaked?: true
    totalTransactions?: true
    totalVolume?: true
    referralCount?: true
  }

  export type DaoMembershipMinAggregateInputType = {
    id?: true
    userId?: true
    membershipTier?: true
    joinedAt?: true
    lastActiveAt?: true
    totalStaked?: true
    totalTransactions?: true
    totalVolume?: true
    referralCount?: true
    isActive?: true
    isPremium?: true
    isFounder?: true
  }

  export type DaoMembershipMaxAggregateInputType = {
    id?: true
    userId?: true
    membershipTier?: true
    joinedAt?: true
    lastActiveAt?: true
    totalStaked?: true
    totalTransactions?: true
    totalVolume?: true
    referralCount?: true
    isActive?: true
    isPremium?: true
    isFounder?: true
  }

  export type DaoMembershipCountAggregateInputType = {
    id?: true
    userId?: true
    membershipTier?: true
    joinedAt?: true
    lastActiveAt?: true
    totalStaked?: true
    totalTransactions?: true
    totalVolume?: true
    referralCount?: true
    isActive?: true
    isPremium?: true
    isFounder?: true
    _all?: true
  }

  export type DaoMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DaoMembership to aggregate.
     */
    where?: DaoMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaoMemberships to fetch.
     */
    orderBy?: DaoMembershipOrderByWithRelationInput | DaoMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DaoMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaoMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaoMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DaoMemberships
    **/
    _count?: true | DaoMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DaoMembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DaoMembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DaoMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DaoMembershipMaxAggregateInputType
  }

  export type GetDaoMembershipAggregateType<T extends DaoMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateDaoMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaoMembership[P]>
      : GetScalarType<T[P], AggregateDaoMembership[P]>
  }




  export type DaoMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DaoMembershipWhereInput
    orderBy?: DaoMembershipOrderByWithAggregationInput | DaoMembershipOrderByWithAggregationInput[]
    by: DaoMembershipScalarFieldEnum[] | DaoMembershipScalarFieldEnum
    having?: DaoMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DaoMembershipCountAggregateInputType | true
    _avg?: DaoMembershipAvgAggregateInputType
    _sum?: DaoMembershipSumAggregateInputType
    _min?: DaoMembershipMinAggregateInputType
    _max?: DaoMembershipMaxAggregateInputType
  }

  export type DaoMembershipGroupByOutputType = {
    id: string
    userId: string
    membershipTier: $Enums.MembershipTier
    joinedAt: Date
    lastActiveAt: Date
    totalStaked: Decimal
    totalTransactions: number
    totalVolume: Decimal
    referralCount: number
    isActive: boolean
    isPremium: boolean
    isFounder: boolean
    _count: DaoMembershipCountAggregateOutputType | null
    _avg: DaoMembershipAvgAggregateOutputType | null
    _sum: DaoMembershipSumAggregateOutputType | null
    _min: DaoMembershipMinAggregateOutputType | null
    _max: DaoMembershipMaxAggregateOutputType | null
  }

  type GetDaoMembershipGroupByPayload<T extends DaoMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DaoMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DaoMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DaoMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], DaoMembershipGroupByOutputType[P]>
        }
      >
    >


  export type DaoMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    membershipTier?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    totalStaked?: boolean
    totalTransactions?: boolean
    totalVolume?: boolean
    referralCount?: boolean
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["daoMembership"]>

  export type DaoMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    membershipTier?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    totalStaked?: boolean
    totalTransactions?: boolean
    totalVolume?: boolean
    referralCount?: boolean
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["daoMembership"]>

  export type DaoMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    membershipTier?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    totalStaked?: boolean
    totalTransactions?: boolean
    totalVolume?: boolean
    referralCount?: boolean
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["daoMembership"]>

  export type DaoMembershipSelectScalar = {
    id?: boolean
    userId?: boolean
    membershipTier?: boolean
    joinedAt?: boolean
    lastActiveAt?: boolean
    totalStaked?: boolean
    totalTransactions?: boolean
    totalVolume?: boolean
    referralCount?: boolean
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
  }

  export type DaoMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "membershipTier" | "joinedAt" | "lastActiveAt" | "totalStaked" | "totalTransactions" | "totalVolume" | "referralCount" | "isActive" | "isPremium" | "isFounder", ExtArgs["result"]["daoMembership"]>
  export type DaoMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DaoMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DaoMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DaoMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DaoMembership"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      membershipTier: $Enums.MembershipTier
      joinedAt: Date
      lastActiveAt: Date
      totalStaked: Prisma.Decimal
      totalTransactions: number
      totalVolume: Prisma.Decimal
      referralCount: number
      isActive: boolean
      isPremium: boolean
      isFounder: boolean
    }, ExtArgs["result"]["daoMembership"]>
    composites: {}
  }

  type DaoMembershipGetPayload<S extends boolean | null | undefined | DaoMembershipDefaultArgs> = $Result.GetResult<Prisma.$DaoMembershipPayload, S>

  type DaoMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DaoMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DaoMembershipCountAggregateInputType | true
    }

  export interface DaoMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DaoMembership'], meta: { name: 'DaoMembership' } }
    /**
     * Find zero or one DaoMembership that matches the filter.
     * @param {DaoMembershipFindUniqueArgs} args - Arguments to find a DaoMembership
     * @example
     * // Get one DaoMembership
     * const daoMembership = await prisma.daoMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DaoMembershipFindUniqueArgs>(args: SelectSubset<T, DaoMembershipFindUniqueArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DaoMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DaoMembershipFindUniqueOrThrowArgs} args - Arguments to find a DaoMembership
     * @example
     * // Get one DaoMembership
     * const daoMembership = await prisma.daoMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DaoMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, DaoMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DaoMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipFindFirstArgs} args - Arguments to find a DaoMembership
     * @example
     * // Get one DaoMembership
     * const daoMembership = await prisma.daoMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DaoMembershipFindFirstArgs>(args?: SelectSubset<T, DaoMembershipFindFirstArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DaoMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipFindFirstOrThrowArgs} args - Arguments to find a DaoMembership
     * @example
     * // Get one DaoMembership
     * const daoMembership = await prisma.daoMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DaoMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, DaoMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DaoMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DaoMemberships
     * const daoMemberships = await prisma.daoMembership.findMany()
     * 
     * // Get first 10 DaoMemberships
     * const daoMemberships = await prisma.daoMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daoMembershipWithIdOnly = await prisma.daoMembership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DaoMembershipFindManyArgs>(args?: SelectSubset<T, DaoMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DaoMembership.
     * @param {DaoMembershipCreateArgs} args - Arguments to create a DaoMembership.
     * @example
     * // Create one DaoMembership
     * const DaoMembership = await prisma.daoMembership.create({
     *   data: {
     *     // ... data to create a DaoMembership
     *   }
     * })
     * 
     */
    create<T extends DaoMembershipCreateArgs>(args: SelectSubset<T, DaoMembershipCreateArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DaoMemberships.
     * @param {DaoMembershipCreateManyArgs} args - Arguments to create many DaoMemberships.
     * @example
     * // Create many DaoMemberships
     * const daoMembership = await prisma.daoMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DaoMembershipCreateManyArgs>(args?: SelectSubset<T, DaoMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DaoMemberships and returns the data saved in the database.
     * @param {DaoMembershipCreateManyAndReturnArgs} args - Arguments to create many DaoMemberships.
     * @example
     * // Create many DaoMemberships
     * const daoMembership = await prisma.daoMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DaoMemberships and only return the `id`
     * const daoMembershipWithIdOnly = await prisma.daoMembership.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DaoMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, DaoMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DaoMembership.
     * @param {DaoMembershipDeleteArgs} args - Arguments to delete one DaoMembership.
     * @example
     * // Delete one DaoMembership
     * const DaoMembership = await prisma.daoMembership.delete({
     *   where: {
     *     // ... filter to delete one DaoMembership
     *   }
     * })
     * 
     */
    delete<T extends DaoMembershipDeleteArgs>(args: SelectSubset<T, DaoMembershipDeleteArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DaoMembership.
     * @param {DaoMembershipUpdateArgs} args - Arguments to update one DaoMembership.
     * @example
     * // Update one DaoMembership
     * const daoMembership = await prisma.daoMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DaoMembershipUpdateArgs>(args: SelectSubset<T, DaoMembershipUpdateArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DaoMemberships.
     * @param {DaoMembershipDeleteManyArgs} args - Arguments to filter DaoMemberships to delete.
     * @example
     * // Delete a few DaoMemberships
     * const { count } = await prisma.daoMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DaoMembershipDeleteManyArgs>(args?: SelectSubset<T, DaoMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DaoMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DaoMemberships
     * const daoMembership = await prisma.daoMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DaoMembershipUpdateManyArgs>(args: SelectSubset<T, DaoMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DaoMemberships and returns the data updated in the database.
     * @param {DaoMembershipUpdateManyAndReturnArgs} args - Arguments to update many DaoMemberships.
     * @example
     * // Update many DaoMemberships
     * const daoMembership = await prisma.daoMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DaoMemberships and only return the `id`
     * const daoMembershipWithIdOnly = await prisma.daoMembership.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DaoMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, DaoMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DaoMembership.
     * @param {DaoMembershipUpsertArgs} args - Arguments to update or create a DaoMembership.
     * @example
     * // Update or create a DaoMembership
     * const daoMembership = await prisma.daoMembership.upsert({
     *   create: {
     *     // ... data to create a DaoMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DaoMembership we want to update
     *   }
     * })
     */
    upsert<T extends DaoMembershipUpsertArgs>(args: SelectSubset<T, DaoMembershipUpsertArgs<ExtArgs>>): Prisma__DaoMembershipClient<$Result.GetResult<Prisma.$DaoMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DaoMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipCountArgs} args - Arguments to filter DaoMemberships to count.
     * @example
     * // Count the number of DaoMemberships
     * const count = await prisma.daoMembership.count({
     *   where: {
     *     // ... the filter for the DaoMemberships we want to count
     *   }
     * })
    **/
    count<T extends DaoMembershipCountArgs>(
      args?: Subset<T, DaoMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DaoMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DaoMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DaoMembershipAggregateArgs>(args: Subset<T, DaoMembershipAggregateArgs>): Prisma.PrismaPromise<GetDaoMembershipAggregateType<T>>

    /**
     * Group by DaoMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DaoMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DaoMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DaoMembershipGroupByArgs['orderBy'] }
        : { orderBy?: DaoMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DaoMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDaoMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DaoMembership model
   */
  readonly fields: DaoMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DaoMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DaoMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DaoMembership model
   */
  interface DaoMembershipFieldRefs {
    readonly id: FieldRef<"DaoMembership", 'String'>
    readonly userId: FieldRef<"DaoMembership", 'String'>
    readonly membershipTier: FieldRef<"DaoMembership", 'MembershipTier'>
    readonly joinedAt: FieldRef<"DaoMembership", 'DateTime'>
    readonly lastActiveAt: FieldRef<"DaoMembership", 'DateTime'>
    readonly totalStaked: FieldRef<"DaoMembership", 'Decimal'>
    readonly totalTransactions: FieldRef<"DaoMembership", 'Int'>
    readonly totalVolume: FieldRef<"DaoMembership", 'Decimal'>
    readonly referralCount: FieldRef<"DaoMembership", 'Int'>
    readonly isActive: FieldRef<"DaoMembership", 'Boolean'>
    readonly isPremium: FieldRef<"DaoMembership", 'Boolean'>
    readonly isFounder: FieldRef<"DaoMembership", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * DaoMembership findUnique
   */
  export type DaoMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DaoMembership to fetch.
     */
    where: DaoMembershipWhereUniqueInput
  }

  /**
   * DaoMembership findUniqueOrThrow
   */
  export type DaoMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DaoMembership to fetch.
     */
    where: DaoMembershipWhereUniqueInput
  }

  /**
   * DaoMembership findFirst
   */
  export type DaoMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DaoMembership to fetch.
     */
    where?: DaoMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaoMemberships to fetch.
     */
    orderBy?: DaoMembershipOrderByWithRelationInput | DaoMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DaoMemberships.
     */
    cursor?: DaoMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaoMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaoMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DaoMemberships.
     */
    distinct?: DaoMembershipScalarFieldEnum | DaoMembershipScalarFieldEnum[]
  }

  /**
   * DaoMembership findFirstOrThrow
   */
  export type DaoMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DaoMembership to fetch.
     */
    where?: DaoMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaoMemberships to fetch.
     */
    orderBy?: DaoMembershipOrderByWithRelationInput | DaoMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DaoMemberships.
     */
    cursor?: DaoMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaoMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaoMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DaoMemberships.
     */
    distinct?: DaoMembershipScalarFieldEnum | DaoMembershipScalarFieldEnum[]
  }

  /**
   * DaoMembership findMany
   */
  export type DaoMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DaoMemberships to fetch.
     */
    where?: DaoMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DaoMemberships to fetch.
     */
    orderBy?: DaoMembershipOrderByWithRelationInput | DaoMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DaoMemberships.
     */
    cursor?: DaoMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DaoMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DaoMemberships.
     */
    skip?: number
    distinct?: DaoMembershipScalarFieldEnum | DaoMembershipScalarFieldEnum[]
  }

  /**
   * DaoMembership create
   */
  export type DaoMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a DaoMembership.
     */
    data: XOR<DaoMembershipCreateInput, DaoMembershipUncheckedCreateInput>
  }

  /**
   * DaoMembership createMany
   */
  export type DaoMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DaoMemberships.
     */
    data: DaoMembershipCreateManyInput | DaoMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DaoMembership createManyAndReturn
   */
  export type DaoMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many DaoMemberships.
     */
    data: DaoMembershipCreateManyInput | DaoMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DaoMembership update
   */
  export type DaoMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a DaoMembership.
     */
    data: XOR<DaoMembershipUpdateInput, DaoMembershipUncheckedUpdateInput>
    /**
     * Choose, which DaoMembership to update.
     */
    where: DaoMembershipWhereUniqueInput
  }

  /**
   * DaoMembership updateMany
   */
  export type DaoMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DaoMemberships.
     */
    data: XOR<DaoMembershipUpdateManyMutationInput, DaoMembershipUncheckedUpdateManyInput>
    /**
     * Filter which DaoMemberships to update
     */
    where?: DaoMembershipWhereInput
    /**
     * Limit how many DaoMemberships to update.
     */
    limit?: number
  }

  /**
   * DaoMembership updateManyAndReturn
   */
  export type DaoMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * The data used to update DaoMemberships.
     */
    data: XOR<DaoMembershipUpdateManyMutationInput, DaoMembershipUncheckedUpdateManyInput>
    /**
     * Filter which DaoMemberships to update
     */
    where?: DaoMembershipWhereInput
    /**
     * Limit how many DaoMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DaoMembership upsert
   */
  export type DaoMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the DaoMembership to update in case it exists.
     */
    where: DaoMembershipWhereUniqueInput
    /**
     * In case the DaoMembership found by the `where` argument doesn't exist, create a new DaoMembership with this data.
     */
    create: XOR<DaoMembershipCreateInput, DaoMembershipUncheckedCreateInput>
    /**
     * In case the DaoMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DaoMembershipUpdateInput, DaoMembershipUncheckedUpdateInput>
  }

  /**
   * DaoMembership delete
   */
  export type DaoMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
    /**
     * Filter which DaoMembership to delete.
     */
    where: DaoMembershipWhereUniqueInput
  }

  /**
   * DaoMembership deleteMany
   */
  export type DaoMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DaoMemberships to delete
     */
    where?: DaoMembershipWhereInput
    /**
     * Limit how many DaoMemberships to delete.
     */
    limit?: number
  }

  /**
   * DaoMembership without action
   */
  export type DaoMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DaoMembership
     */
    select?: DaoMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DaoMembership
     */
    omit?: DaoMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DaoMembershipInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: $Enums.BadgeCategory | null
    rarity: $Enums.BadgeRarity | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    icon: string | null
    category: $Enums.BadgeCategory | null
    rarity: $Enums.BadgeRarity | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: string | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    category: number
    rarity: number
    requirements: number
    isActive: number
    createdAt: number
    updatedAt: number
    createdBy: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    category?: true
    rarity?: true
    requirements?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity: $Enums.BadgeRarity
    requirements: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    createdBy: string
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    requirements?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    requirements?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    requirements?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    category?: boolean
    rarity?: boolean
    requirements?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
  }

  export type BadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "icon" | "category" | "rarity" | "requirements" | "isActive" | "createdAt" | "updatedAt" | "createdBy", ExtArgs["result"]["badge"]>
  export type BadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userBadges?: boolean | Badge$userBadgesArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {
      userBadges: Prisma.$UserBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      icon: string
      category: $Enums.BadgeCategory
      rarity: $Enums.BadgeRarity
      requirements: Prisma.JsonValue
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      createdBy: string
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges and returns the data updated in the database.
     * @param {BadgeUpdateManyAndReturnArgs} args - Arguments to update many Badges.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, BadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userBadges<T extends Badge$userBadgesArgs<ExtArgs> = {}>(args?: Subset<T, Badge$userBadgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly icon: FieldRef<"Badge", 'String'>
    readonly category: FieldRef<"Badge", 'BadgeCategory'>
    readonly rarity: FieldRef<"Badge", 'BadgeRarity'>
    readonly requirements: FieldRef<"Badge", 'Json'>
    readonly isActive: FieldRef<"Badge", 'Boolean'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
    readonly updatedAt: FieldRef<"Badge", 'DateTime'>
    readonly createdBy: FieldRef<"Badge", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge updateManyAndReturn
   */
  export type BadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to delete.
     */
    limit?: number
  }

  /**
   * Badge.userBadges
   */
  export type Badge$userBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
    isVisible: boolean | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    badgeId: string | null
    earnedAt: Date | null
    isVisible: boolean | null
  }

  export type UserBadgeCountAggregateOutputType = {
    id: number
    userId: number
    badgeId: number
    earnedAt: number
    progress: number
    isVisible: number
    _all: number
  }


  export type UserBadgeMinAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    isVisible?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    isVisible?: true
  }

  export type UserBadgeCountAggregateInputType = {
    id?: true
    userId?: true
    badgeId?: true
    earnedAt?: true
    progress?: true
    isVisible?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    id: string
    userId: string
    badgeId: string
    earnedAt: Date
    progress: JsonValue | null
    isVisible: boolean
    _count: UserBadgeCountAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    progress?: boolean
    isVisible?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    progress?: boolean
    isVisible?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    progress?: boolean
    isVisible?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    id?: boolean
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    progress?: boolean
    isVisible?: boolean
  }

  export type UserBadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "badgeId" | "earnedAt" | "progress" | "isVisible", ExtArgs["result"]["userBadge"]>
  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      badge: Prisma.$BadgePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      badgeId: string
      earnedAt: Date
      progress: Prisma.JsonValue | null
      isVisible: boolean
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges and returns the data updated in the database.
     * @param {UserBadgeUpdateManyAndReturnArgs} args - Arguments to update many UserBadges.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserBadges and only return the `id`
     * const userBadgeWithIdOnly = await prisma.userBadge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserBadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, UserBadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    badge<T extends BadgeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BadgeDefaultArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */
  interface UserBadgeFieldRefs {
    readonly id: FieldRef<"UserBadge", 'String'>
    readonly userId: FieldRef<"UserBadge", 'String'>
    readonly badgeId: FieldRef<"UserBadge", 'String'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
    readonly progress: FieldRef<"UserBadge", 'Json'>
    readonly isVisible: FieldRef<"UserBadge", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
  }

  /**
   * UserBadge updateManyAndReturn
   */
  export type UserBadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
    /**
     * Limit how many UserBadges to delete.
     */
    limit?: number
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserBadge
     */
    omit?: UserBadgeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model AdminRole
   */

  export type AggregateAdminRole = {
    _count: AdminRoleCountAggregateOutputType | null
    _min: AdminRoleMinAggregateOutputType | null
    _max: AdminRoleMaxAggregateOutputType | null
  }

  export type AdminRoleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.AdminRoleType | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type AdminRoleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.AdminRoleType | null
    grantedBy: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type AdminRoleCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    grantedBy: number
    grantedAt: number
    expiresAt: number
    isActive: number
    permissions: number
    _all: number
  }


  export type AdminRoleMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
  }

  export type AdminRoleMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
  }

  export type AdminRoleCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    grantedBy?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    permissions?: true
    _all?: true
  }

  export type AdminRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminRole to aggregate.
     */
    where?: AdminRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminRoles to fetch.
     */
    orderBy?: AdminRoleOrderByWithRelationInput | AdminRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminRoles
    **/
    _count?: true | AdminRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminRoleMaxAggregateInputType
  }

  export type GetAdminRoleAggregateType<T extends AdminRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminRole[P]>
      : GetScalarType<T[P], AggregateAdminRole[P]>
  }




  export type AdminRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminRoleWhereInput
    orderBy?: AdminRoleOrderByWithAggregationInput | AdminRoleOrderByWithAggregationInput[]
    by: AdminRoleScalarFieldEnum[] | AdminRoleScalarFieldEnum
    having?: AdminRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminRoleCountAggregateInputType | true
    _min?: AdminRoleMinAggregateInputType
    _max?: AdminRoleMaxAggregateInputType
  }

  export type AdminRoleGroupByOutputType = {
    id: string
    userId: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt: Date
    expiresAt: Date | null
    isActive: boolean
    permissions: JsonValue
    _count: AdminRoleCountAggregateOutputType | null
    _min: AdminRoleMinAggregateOutputType | null
    _max: AdminRoleMaxAggregateOutputType | null
  }

  type GetAdminRoleGroupByPayload<T extends AdminRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminRoleGroupByOutputType[P]>
            : GetScalarType<T[P], AdminRoleGroupByOutputType[P]>
        }
      >
    >


  export type AdminRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminRole"]>

  export type AdminRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminRole"]>

  export type AdminRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminRole"]>

  export type AdminRoleSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    grantedBy?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    permissions?: boolean
  }

  export type AdminRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "role" | "grantedBy" | "grantedAt" | "expiresAt" | "isActive" | "permissions", ExtArgs["result"]["adminRole"]>
  export type AdminRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      role: $Enums.AdminRoleType
      grantedBy: string
      grantedAt: Date
      expiresAt: Date | null
      isActive: boolean
      permissions: Prisma.JsonValue
    }, ExtArgs["result"]["adminRole"]>
    composites: {}
  }

  type AdminRoleGetPayload<S extends boolean | null | undefined | AdminRoleDefaultArgs> = $Result.GetResult<Prisma.$AdminRolePayload, S>

  type AdminRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminRoleCountAggregateInputType | true
    }

  export interface AdminRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminRole'], meta: { name: 'AdminRole' } }
    /**
     * Find zero or one AdminRole that matches the filter.
     * @param {AdminRoleFindUniqueArgs} args - Arguments to find a AdminRole
     * @example
     * // Get one AdminRole
     * const adminRole = await prisma.adminRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminRoleFindUniqueArgs>(args: SelectSubset<T, AdminRoleFindUniqueArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminRoleFindUniqueOrThrowArgs} args - Arguments to find a AdminRole
     * @example
     * // Get one AdminRole
     * const adminRole = await prisma.adminRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleFindFirstArgs} args - Arguments to find a AdminRole
     * @example
     * // Get one AdminRole
     * const adminRole = await prisma.adminRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminRoleFindFirstArgs>(args?: SelectSubset<T, AdminRoleFindFirstArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleFindFirstOrThrowArgs} args - Arguments to find a AdminRole
     * @example
     * // Get one AdminRole
     * const adminRole = await prisma.adminRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminRoles
     * const adminRoles = await prisma.adminRole.findMany()
     * 
     * // Get first 10 AdminRoles
     * const adminRoles = await prisma.adminRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminRoleWithIdOnly = await prisma.adminRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminRoleFindManyArgs>(args?: SelectSubset<T, AdminRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminRole.
     * @param {AdminRoleCreateArgs} args - Arguments to create a AdminRole.
     * @example
     * // Create one AdminRole
     * const AdminRole = await prisma.adminRole.create({
     *   data: {
     *     // ... data to create a AdminRole
     *   }
     * })
     * 
     */
    create<T extends AdminRoleCreateArgs>(args: SelectSubset<T, AdminRoleCreateArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminRoles.
     * @param {AdminRoleCreateManyArgs} args - Arguments to create many AdminRoles.
     * @example
     * // Create many AdminRoles
     * const adminRole = await prisma.adminRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminRoleCreateManyArgs>(args?: SelectSubset<T, AdminRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminRoles and returns the data saved in the database.
     * @param {AdminRoleCreateManyAndReturnArgs} args - Arguments to create many AdminRoles.
     * @example
     * // Create many AdminRoles
     * const adminRole = await prisma.adminRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminRoles and only return the `id`
     * const adminRoleWithIdOnly = await prisma.adminRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminRole.
     * @param {AdminRoleDeleteArgs} args - Arguments to delete one AdminRole.
     * @example
     * // Delete one AdminRole
     * const AdminRole = await prisma.adminRole.delete({
     *   where: {
     *     // ... filter to delete one AdminRole
     *   }
     * })
     * 
     */
    delete<T extends AdminRoleDeleteArgs>(args: SelectSubset<T, AdminRoleDeleteArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminRole.
     * @param {AdminRoleUpdateArgs} args - Arguments to update one AdminRole.
     * @example
     * // Update one AdminRole
     * const adminRole = await prisma.adminRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminRoleUpdateArgs>(args: SelectSubset<T, AdminRoleUpdateArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminRoles.
     * @param {AdminRoleDeleteManyArgs} args - Arguments to filter AdminRoles to delete.
     * @example
     * // Delete a few AdminRoles
     * const { count } = await prisma.adminRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminRoleDeleteManyArgs>(args?: SelectSubset<T, AdminRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminRoles
     * const adminRole = await prisma.adminRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminRoleUpdateManyArgs>(args: SelectSubset<T, AdminRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminRoles and returns the data updated in the database.
     * @param {AdminRoleUpdateManyAndReturnArgs} args - Arguments to update many AdminRoles.
     * @example
     * // Update many AdminRoles
     * const adminRole = await prisma.adminRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminRoles and only return the `id`
     * const adminRoleWithIdOnly = await prisma.adminRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminRole.
     * @param {AdminRoleUpsertArgs} args - Arguments to update or create a AdminRole.
     * @example
     * // Update or create a AdminRole
     * const adminRole = await prisma.adminRole.upsert({
     *   create: {
     *     // ... data to create a AdminRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminRole we want to update
     *   }
     * })
     */
    upsert<T extends AdminRoleUpsertArgs>(args: SelectSubset<T, AdminRoleUpsertArgs<ExtArgs>>): Prisma__AdminRoleClient<$Result.GetResult<Prisma.$AdminRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleCountArgs} args - Arguments to filter AdminRoles to count.
     * @example
     * // Count the number of AdminRoles
     * const count = await prisma.adminRole.count({
     *   where: {
     *     // ... the filter for the AdminRoles we want to count
     *   }
     * })
    **/
    count<T extends AdminRoleCountArgs>(
      args?: Subset<T, AdminRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminRoleAggregateArgs>(args: Subset<T, AdminRoleAggregateArgs>): Prisma.PrismaPromise<GetAdminRoleAggregateType<T>>

    /**
     * Group by AdminRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminRoleGroupByArgs['orderBy'] }
        : { orderBy?: AdminRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminRole model
   */
  readonly fields: AdminRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminRole model
   */
  interface AdminRoleFieldRefs {
    readonly id: FieldRef<"AdminRole", 'String'>
    readonly userId: FieldRef<"AdminRole", 'String'>
    readonly role: FieldRef<"AdminRole", 'AdminRoleType'>
    readonly grantedBy: FieldRef<"AdminRole", 'String'>
    readonly grantedAt: FieldRef<"AdminRole", 'DateTime'>
    readonly expiresAt: FieldRef<"AdminRole", 'DateTime'>
    readonly isActive: FieldRef<"AdminRole", 'Boolean'>
    readonly permissions: FieldRef<"AdminRole", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AdminRole findUnique
   */
  export type AdminRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter, which AdminRole to fetch.
     */
    where: AdminRoleWhereUniqueInput
  }

  /**
   * AdminRole findUniqueOrThrow
   */
  export type AdminRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter, which AdminRole to fetch.
     */
    where: AdminRoleWhereUniqueInput
  }

  /**
   * AdminRole findFirst
   */
  export type AdminRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter, which AdminRole to fetch.
     */
    where?: AdminRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminRoles to fetch.
     */
    orderBy?: AdminRoleOrderByWithRelationInput | AdminRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminRoles.
     */
    cursor?: AdminRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminRoles.
     */
    distinct?: AdminRoleScalarFieldEnum | AdminRoleScalarFieldEnum[]
  }

  /**
   * AdminRole findFirstOrThrow
   */
  export type AdminRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter, which AdminRole to fetch.
     */
    where?: AdminRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminRoles to fetch.
     */
    orderBy?: AdminRoleOrderByWithRelationInput | AdminRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminRoles.
     */
    cursor?: AdminRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminRoles.
     */
    distinct?: AdminRoleScalarFieldEnum | AdminRoleScalarFieldEnum[]
  }

  /**
   * AdminRole findMany
   */
  export type AdminRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter, which AdminRoles to fetch.
     */
    where?: AdminRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminRoles to fetch.
     */
    orderBy?: AdminRoleOrderByWithRelationInput | AdminRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminRoles.
     */
    cursor?: AdminRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminRoles.
     */
    skip?: number
    distinct?: AdminRoleScalarFieldEnum | AdminRoleScalarFieldEnum[]
  }

  /**
   * AdminRole create
   */
  export type AdminRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminRole.
     */
    data: XOR<AdminRoleCreateInput, AdminRoleUncheckedCreateInput>
  }

  /**
   * AdminRole createMany
   */
  export type AdminRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminRoles.
     */
    data: AdminRoleCreateManyInput | AdminRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminRole createManyAndReturn
   */
  export type AdminRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * The data used to create many AdminRoles.
     */
    data: AdminRoleCreateManyInput | AdminRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminRole update
   */
  export type AdminRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminRole.
     */
    data: XOR<AdminRoleUpdateInput, AdminRoleUncheckedUpdateInput>
    /**
     * Choose, which AdminRole to update.
     */
    where: AdminRoleWhereUniqueInput
  }

  /**
   * AdminRole updateMany
   */
  export type AdminRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminRoles.
     */
    data: XOR<AdminRoleUpdateManyMutationInput, AdminRoleUncheckedUpdateManyInput>
    /**
     * Filter which AdminRoles to update
     */
    where?: AdminRoleWhereInput
    /**
     * Limit how many AdminRoles to update.
     */
    limit?: number
  }

  /**
   * AdminRole updateManyAndReturn
   */
  export type AdminRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * The data used to update AdminRoles.
     */
    data: XOR<AdminRoleUpdateManyMutationInput, AdminRoleUncheckedUpdateManyInput>
    /**
     * Filter which AdminRoles to update
     */
    where?: AdminRoleWhereInput
    /**
     * Limit how many AdminRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminRole upsert
   */
  export type AdminRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminRole to update in case it exists.
     */
    where: AdminRoleWhereUniqueInput
    /**
     * In case the AdminRole found by the `where` argument doesn't exist, create a new AdminRole with this data.
     */
    create: XOR<AdminRoleCreateInput, AdminRoleUncheckedCreateInput>
    /**
     * In case the AdminRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminRoleUpdateInput, AdminRoleUncheckedUpdateInput>
  }

  /**
   * AdminRole delete
   */
  export type AdminRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
    /**
     * Filter which AdminRole to delete.
     */
    where: AdminRoleWhereUniqueInput
  }

  /**
   * AdminRole deleteMany
   */
  export type AdminRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminRoles to delete
     */
    where?: AdminRoleWhereInput
    /**
     * Limit how many AdminRoles to delete.
     */
    limit?: number
  }

  /**
   * AdminRole without action
   */
  export type AdminRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminRole
     */
    select?: AdminRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminRole
     */
    omit?: AdminRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminRoleInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionHash: string | null
    ipAddress: string | null
    userAgent: string | null
    loginMethod: $Enums.AuthMethod | null
    isActive: boolean | null
    lastUsedAt: Date | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionHash: string | null
    ipAddress: string | null
    userAgent: string | null
    loginMethod: $Enums.AuthMethod | null
    isActive: boolean | null
    lastUsedAt: Date | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionHash: number
    ipAddress: number
    userAgent: number
    loginMethod: number
    isActive: number
    lastUsedAt: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionHash?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    isActive?: true
    lastUsedAt?: true
    createdAt?: true
    expiresAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionHash?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    isActive?: true
    lastUsedAt?: true
    createdAt?: true
    expiresAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionHash?: true
    ipAddress?: true
    userAgent?: true
    loginMethod?: true
    isActive?: true
    lastUsedAt?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    sessionHash: string
    ipAddress: string | null
    userAgent: string | null
    loginMethod: $Enums.AuthMethod
    isActive: boolean
    lastUsedAt: Date
    createdAt: Date
    expiresAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionHash?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    loginMethod?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionHash" | "ipAddress" | "userAgent" | "loginMethod" | "isActive" | "lastUsedAt" | "createdAt" | "expiresAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionHash: string
      ipAddress: string | null
      userAgent: string | null
      loginMethod: $Enums.AuthMethod
      isActive: boolean
      lastUsedAt: Date
      createdAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly sessionHash: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly loginMethod: FieldRef<"UserSession", 'AuthMethod'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly lastUsedAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    actionUrl: string | null
    isRead: boolean | null
    isSent: boolean | null
    priority: $Enums.NotificationPriority | null
    createdAt: Date | null
    readAt: Date | null
    sentAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    actionUrl: string | null
    isRead: boolean | null
    isSent: boolean | null
    priority: $Enums.NotificationPriority | null
    createdAt: Date | null
    readAt: Date | null
    sentAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    actionUrl: number
    isRead: number
    isSent: number
    priority: number
    metadata: number
    createdAt: number
    readAt: number
    sentAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    isSent?: true
    priority?: true
    createdAt?: true
    readAt?: true
    sentAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    isSent?: true
    priority?: true
    createdAt?: true
    readAt?: true
    sentAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    actionUrl?: true
    isRead?: true
    isSent?: true
    priority?: true
    metadata?: true
    createdAt?: true
    readAt?: true
    sentAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl: string | null
    isRead: boolean
    isSent: boolean
    priority: $Enums.NotificationPriority
    metadata: JsonValue | null
    createdAt: Date
    readAt: Date | null
    sentAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    isSent?: boolean
    priority?: boolean
    metadata?: boolean
    createdAt?: boolean
    readAt?: boolean
    sentAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    isSent?: boolean
    priority?: boolean
    metadata?: boolean
    createdAt?: boolean
    readAt?: boolean
    sentAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    isSent?: boolean
    priority?: boolean
    metadata?: boolean
    createdAt?: boolean
    readAt?: boolean
    sentAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    actionUrl?: boolean
    isRead?: boolean
    isSent?: boolean
    priority?: boolean
    metadata?: boolean
    createdAt?: boolean
    readAt?: boolean
    sentAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "actionUrl" | "isRead" | "isSent" | "priority" | "metadata" | "createdAt" | "readAt" | "sentAt", ExtArgs["result"]["notification"]>

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      type: $Enums.NotificationType
      title: string
      message: string
      actionUrl: string | null
      isRead: boolean
      isSent: boolean
      priority: $Enums.NotificationPriority
      metadata: Prisma.JsonValue | null
      createdAt: Date
      readAt: Date | null
      sentAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly isSent: FieldRef<"Notification", 'Boolean'>
    readonly priority: FieldRef<"Notification", 'NotificationPriority'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
  }


  /**
   * Model Referral
   */

  export type AggregateReferral = {
    _count: ReferralCountAggregateOutputType | null
    _avg: ReferralAvgAggregateOutputType | null
    _sum: ReferralSumAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  export type ReferralAvgAggregateOutputType = {
    referrerReward: Decimal | null
    refereeReward: Decimal | null
  }

  export type ReferralSumAggregateOutputType = {
    referrerReward: Decimal | null
    refereeReward: Decimal | null
  }

  export type ReferralMinAggregateOutputType = {
    id: string | null
    referrerId: string | null
    refereeId: string | null
    referralCode: string | null
    isActive: boolean | null
    isRewardClaimed: boolean | null
    referrerReward: Decimal | null
    refereeReward: Decimal | null
    createdAt: Date | null
    completedAt: Date | null
    claimedAt: Date | null
  }

  export type ReferralMaxAggregateOutputType = {
    id: string | null
    referrerId: string | null
    refereeId: string | null
    referralCode: string | null
    isActive: boolean | null
    isRewardClaimed: boolean | null
    referrerReward: Decimal | null
    refereeReward: Decimal | null
    createdAt: Date | null
    completedAt: Date | null
    claimedAt: Date | null
  }

  export type ReferralCountAggregateOutputType = {
    id: number
    referrerId: number
    refereeId: number
    referralCode: number
    isActive: number
    isRewardClaimed: number
    referrerReward: number
    refereeReward: number
    createdAt: number
    completedAt: number
    claimedAt: number
    _all: number
  }


  export type ReferralAvgAggregateInputType = {
    referrerReward?: true
    refereeReward?: true
  }

  export type ReferralSumAggregateInputType = {
    referrerReward?: true
    refereeReward?: true
  }

  export type ReferralMinAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCode?: true
    isActive?: true
    isRewardClaimed?: true
    referrerReward?: true
    refereeReward?: true
    createdAt?: true
    completedAt?: true
    claimedAt?: true
  }

  export type ReferralMaxAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCode?: true
    isActive?: true
    isRewardClaimed?: true
    referrerReward?: true
    refereeReward?: true
    createdAt?: true
    completedAt?: true
    claimedAt?: true
  }

  export type ReferralCountAggregateInputType = {
    id?: true
    referrerId?: true
    refereeId?: true
    referralCode?: true
    isActive?: true
    isRewardClaimed?: true
    referrerReward?: true
    refereeReward?: true
    createdAt?: true
    completedAt?: true
    claimedAt?: true
    _all?: true
  }

  export type ReferralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referral to aggregate.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referrals
    **/
    _count?: true | ReferralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralMaxAggregateInputType
  }

  export type GetReferralAggregateType<T extends ReferralAggregateArgs> = {
        [P in keyof T & keyof AggregateReferral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferral[P]>
      : GetScalarType<T[P], AggregateReferral[P]>
  }




  export type ReferralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithAggregationInput | ReferralOrderByWithAggregationInput[]
    by: ReferralScalarFieldEnum[] | ReferralScalarFieldEnum
    having?: ReferralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCountAggregateInputType | true
    _avg?: ReferralAvgAggregateInputType
    _sum?: ReferralSumAggregateInputType
    _min?: ReferralMinAggregateInputType
    _max?: ReferralMaxAggregateInputType
  }

  export type ReferralGroupByOutputType = {
    id: string
    referrerId: string
    refereeId: string
    referralCode: string
    isActive: boolean
    isRewardClaimed: boolean
    referrerReward: Decimal
    refereeReward: Decimal
    createdAt: Date
    completedAt: Date | null
    claimedAt: Date | null
    _count: ReferralCountAggregateOutputType | null
    _avg: ReferralAvgAggregateOutputType | null
    _sum: ReferralSumAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  type GetReferralGroupByPayload<T extends ReferralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralGroupByOutputType[P]>
        }
      >
    >


  export type ReferralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCode?: boolean
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: boolean
    refereeReward?: boolean
    createdAt?: boolean
    completedAt?: boolean
    claimedAt?: boolean
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCode?: boolean
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: boolean
    refereeReward?: boolean
    createdAt?: boolean
    completedAt?: boolean
    claimedAt?: boolean
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCode?: boolean
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: boolean
    refereeReward?: boolean
    createdAt?: boolean
    completedAt?: boolean
    claimedAt?: boolean
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectScalar = {
    id?: boolean
    referrerId?: boolean
    refereeId?: boolean
    referralCode?: boolean
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: boolean
    refereeReward?: boolean
    createdAt?: boolean
    completedAt?: boolean
    claimedAt?: boolean
  }

  export type ReferralOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "referrerId" | "refereeId" | "referralCode" | "isActive" | "isRewardClaimed" | "referrerReward" | "refereeReward" | "createdAt" | "completedAt" | "claimedAt", ExtArgs["result"]["referral"]>

  export type $ReferralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referral"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      referrerId: string
      refereeId: string
      referralCode: string
      isActive: boolean
      isRewardClaimed: boolean
      referrerReward: Prisma.Decimal
      refereeReward: Prisma.Decimal
      createdAt: Date
      completedAt: Date | null
      claimedAt: Date | null
    }, ExtArgs["result"]["referral"]>
    composites: {}
  }

  type ReferralGetPayload<S extends boolean | null | undefined | ReferralDefaultArgs> = $Result.GetResult<Prisma.$ReferralPayload, S>

  type ReferralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCountAggregateInputType | true
    }

  export interface ReferralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referral'], meta: { name: 'Referral' } }
    /**
     * Find zero or one Referral that matches the filter.
     * @param {ReferralFindUniqueArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralFindUniqueArgs>(args: SelectSubset<T, ReferralFindUniqueArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Referral that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralFindUniqueOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralFindFirstArgs>(args?: SelectSubset<T, ReferralFindFirstArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Referrals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referrals
     * const referrals = await prisma.referral.findMany()
     * 
     * // Get first 10 Referrals
     * const referrals = await prisma.referral.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralWithIdOnly = await prisma.referral.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralFindManyArgs>(args?: SelectSubset<T, ReferralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Referral.
     * @param {ReferralCreateArgs} args - Arguments to create a Referral.
     * @example
     * // Create one Referral
     * const Referral = await prisma.referral.create({
     *   data: {
     *     // ... data to create a Referral
     *   }
     * })
     * 
     */
    create<T extends ReferralCreateArgs>(args: SelectSubset<T, ReferralCreateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Referrals.
     * @param {ReferralCreateManyArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCreateManyArgs>(args?: SelectSubset<T, ReferralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referrals and returns the data saved in the database.
     * @param {ReferralCreateManyAndReturnArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Referral.
     * @param {ReferralDeleteArgs} args - Arguments to delete one Referral.
     * @example
     * // Delete one Referral
     * const Referral = await prisma.referral.delete({
     *   where: {
     *     // ... filter to delete one Referral
     *   }
     * })
     * 
     */
    delete<T extends ReferralDeleteArgs>(args: SelectSubset<T, ReferralDeleteArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Referral.
     * @param {ReferralUpdateArgs} args - Arguments to update one Referral.
     * @example
     * // Update one Referral
     * const referral = await prisma.referral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralUpdateArgs>(args: SelectSubset<T, ReferralUpdateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Referrals.
     * @param {ReferralDeleteManyArgs} args - Arguments to filter Referrals to delete.
     * @example
     * // Delete a few Referrals
     * const { count } = await prisma.referral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralDeleteManyArgs>(args?: SelectSubset<T, ReferralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralUpdateManyArgs>(args: SelectSubset<T, ReferralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals and returns the data updated in the database.
     * @param {ReferralUpdateManyAndReturnArgs} args - Arguments to update many Referrals.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Referral.
     * @param {ReferralUpsertArgs} args - Arguments to update or create a Referral.
     * @example
     * // Update or create a Referral
     * const referral = await prisma.referral.upsert({
     *   create: {
     *     // ... data to create a Referral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referral we want to update
     *   }
     * })
     */
    upsert<T extends ReferralUpsertArgs>(args: SelectSubset<T, ReferralUpsertArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCountArgs} args - Arguments to filter Referrals to count.
     * @example
     * // Count the number of Referrals
     * const count = await prisma.referral.count({
     *   where: {
     *     // ... the filter for the Referrals we want to count
     *   }
     * })
    **/
    count<T extends ReferralCountArgs>(
      args?: Subset<T, ReferralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralAggregateArgs>(args: Subset<T, ReferralAggregateArgs>): Prisma.PrismaPromise<GetReferralAggregateType<T>>

    /**
     * Group by Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralGroupByArgs['orderBy'] }
        : { orderBy?: ReferralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referral model
   */
  readonly fields: ReferralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referral model
   */
  interface ReferralFieldRefs {
    readonly id: FieldRef<"Referral", 'String'>
    readonly referrerId: FieldRef<"Referral", 'String'>
    readonly refereeId: FieldRef<"Referral", 'String'>
    readonly referralCode: FieldRef<"Referral", 'String'>
    readonly isActive: FieldRef<"Referral", 'Boolean'>
    readonly isRewardClaimed: FieldRef<"Referral", 'Boolean'>
    readonly referrerReward: FieldRef<"Referral", 'Decimal'>
    readonly refereeReward: FieldRef<"Referral", 'Decimal'>
    readonly createdAt: FieldRef<"Referral", 'DateTime'>
    readonly completedAt: FieldRef<"Referral", 'DateTime'>
    readonly claimedAt: FieldRef<"Referral", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Referral findUnique
   */
  export type ReferralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findUniqueOrThrow
   */
  export type ReferralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findFirst
   */
  export type ReferralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findFirstOrThrow
   */
  export type ReferralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findMany
   */
  export type ReferralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter, which Referrals to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral create
   */
  export type ReferralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data needed to create a Referral.
     */
    data: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
  }

  /**
   * Referral createMany
   */
  export type ReferralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referral createManyAndReturn
   */
  export type ReferralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referral update
   */
  export type ReferralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data needed to update a Referral.
     */
    data: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
    /**
     * Choose, which Referral to update.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral updateMany
   */
  export type ReferralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
  }

  /**
   * Referral updateManyAndReturn
   */
  export type ReferralUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
  }

  /**
   * Referral upsert
   */
  export type ReferralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The filter to search for the Referral to update in case it exists.
     */
    where: ReferralWhereUniqueInput
    /**
     * In case the Referral found by the `where` argument doesn't exist, create a new Referral with this data.
     */
    create: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
    /**
     * In case the Referral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
  }

  /**
   * Referral delete
   */
  export type ReferralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Filter which Referral to delete.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral deleteMany
   */
  export type ReferralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrals to delete
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to delete.
     */
    limit?: number
  }

  /**
   * Referral without action
   */
  export type ReferralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
  }


  /**
   * Model ManualPayment
   */

  export type AggregateManualPayment = {
    _count: ManualPaymentCountAggregateOutputType | null
    _avg: ManualPaymentAvgAggregateOutputType | null
    _sum: ManualPaymentSumAggregateOutputType | null
    _min: ManualPaymentMinAggregateOutputType | null
    _max: ManualPaymentMaxAggregateOutputType | null
  }

  export type ManualPaymentAvgAggregateOutputType = {
    requestedAmount: Decimal | null
    tokenAmount: Decimal | null
    paymentAmount: Decimal | null
  }

  export type ManualPaymentSumAggregateOutputType = {
    requestedAmount: Decimal | null
    tokenAmount: Decimal | null
    paymentAmount: Decimal | null
  }

  export type ManualPaymentMinAggregateOutputType = {
    id: string | null
    referenceId: string | null
    userId: string | null
    tokenType: $Enums.ManualPaymentTokenType | null
    requestedAmount: Decimal | null
    tokenAmount: Decimal | null
    deliveryChain: $Enums.Chain | null
    paymentMethod: $Enums.ManualPaymentMethod | null
    paymentAmount: Decimal | null
    cashAppCashtag: string | null
    cashAppProof: string | null
    stablecoinType: $Enums.StablecoinType | null
    senderAddress: string | null
    txHash: string | null
    blockchainChain: $Enums.Chain | null
    status: $Enums.ManualPaymentStatus | null
    verifiedBy: string | null
    verifiedAt: Date | null
    rejectionReason: string | null
    distributionTxHash: string | null
    distributedAt: Date | null
    userNotes: string | null
    adminNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type ManualPaymentMaxAggregateOutputType = {
    id: string | null
    referenceId: string | null
    userId: string | null
    tokenType: $Enums.ManualPaymentTokenType | null
    requestedAmount: Decimal | null
    tokenAmount: Decimal | null
    deliveryChain: $Enums.Chain | null
    paymentMethod: $Enums.ManualPaymentMethod | null
    paymentAmount: Decimal | null
    cashAppCashtag: string | null
    cashAppProof: string | null
    stablecoinType: $Enums.StablecoinType | null
    senderAddress: string | null
    txHash: string | null
    blockchainChain: $Enums.Chain | null
    status: $Enums.ManualPaymentStatus | null
    verifiedBy: string | null
    verifiedAt: Date | null
    rejectionReason: string | null
    distributionTxHash: string | null
    distributedAt: Date | null
    userNotes: string | null
    adminNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type ManualPaymentCountAggregateOutputType = {
    id: number
    referenceId: number
    userId: number
    tokenType: number
    requestedAmount: number
    tokenAmount: number
    deliveryChain: number
    paymentMethod: number
    paymentAmount: number
    cashAppCashtag: number
    cashAppProof: number
    stablecoinType: number
    senderAddress: number
    txHash: number
    blockchainChain: number
    status: number
    verifiedBy: number
    verifiedAt: number
    rejectionReason: number
    distributionTxHash: number
    distributedAt: number
    userNotes: number
    adminNotes: number
    createdAt: number
    updatedAt: number
    expiresAt: number
    _all: number
  }


  export type ManualPaymentAvgAggregateInputType = {
    requestedAmount?: true
    tokenAmount?: true
    paymentAmount?: true
  }

  export type ManualPaymentSumAggregateInputType = {
    requestedAmount?: true
    tokenAmount?: true
    paymentAmount?: true
  }

  export type ManualPaymentMinAggregateInputType = {
    id?: true
    referenceId?: true
    userId?: true
    tokenType?: true
    requestedAmount?: true
    tokenAmount?: true
    deliveryChain?: true
    paymentMethod?: true
    paymentAmount?: true
    cashAppCashtag?: true
    cashAppProof?: true
    stablecoinType?: true
    senderAddress?: true
    txHash?: true
    blockchainChain?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    rejectionReason?: true
    distributionTxHash?: true
    distributedAt?: true
    userNotes?: true
    adminNotes?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type ManualPaymentMaxAggregateInputType = {
    id?: true
    referenceId?: true
    userId?: true
    tokenType?: true
    requestedAmount?: true
    tokenAmount?: true
    deliveryChain?: true
    paymentMethod?: true
    paymentAmount?: true
    cashAppCashtag?: true
    cashAppProof?: true
    stablecoinType?: true
    senderAddress?: true
    txHash?: true
    blockchainChain?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    rejectionReason?: true
    distributionTxHash?: true
    distributedAt?: true
    userNotes?: true
    adminNotes?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type ManualPaymentCountAggregateInputType = {
    id?: true
    referenceId?: true
    userId?: true
    tokenType?: true
    requestedAmount?: true
    tokenAmount?: true
    deliveryChain?: true
    paymentMethod?: true
    paymentAmount?: true
    cashAppCashtag?: true
    cashAppProof?: true
    stablecoinType?: true
    senderAddress?: true
    txHash?: true
    blockchainChain?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    rejectionReason?: true
    distributionTxHash?: true
    distributedAt?: true
    userNotes?: true
    adminNotes?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type ManualPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManualPayment to aggregate.
     */
    where?: ManualPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualPayments to fetch.
     */
    orderBy?: ManualPaymentOrderByWithRelationInput | ManualPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManualPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ManualPayments
    **/
    _count?: true | ManualPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManualPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManualPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManualPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManualPaymentMaxAggregateInputType
  }

  export type GetManualPaymentAggregateType<T extends ManualPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateManualPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManualPayment[P]>
      : GetScalarType<T[P], AggregateManualPayment[P]>
  }




  export type ManualPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManualPaymentWhereInput
    orderBy?: ManualPaymentOrderByWithAggregationInput | ManualPaymentOrderByWithAggregationInput[]
    by: ManualPaymentScalarFieldEnum[] | ManualPaymentScalarFieldEnum
    having?: ManualPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManualPaymentCountAggregateInputType | true
    _avg?: ManualPaymentAvgAggregateInputType
    _sum?: ManualPaymentSumAggregateInputType
    _min?: ManualPaymentMinAggregateInputType
    _max?: ManualPaymentMaxAggregateInputType
  }

  export type ManualPaymentGroupByOutputType = {
    id: string
    referenceId: string
    userId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal
    tokenAmount: Decimal
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal
    cashAppCashtag: string | null
    cashAppProof: string | null
    stablecoinType: $Enums.StablecoinType | null
    senderAddress: string | null
    txHash: string | null
    blockchainChain: $Enums.Chain | null
    status: $Enums.ManualPaymentStatus
    verifiedBy: string | null
    verifiedAt: Date | null
    rejectionReason: string | null
    distributionTxHash: string | null
    distributedAt: Date | null
    userNotes: string | null
    adminNotes: string | null
    createdAt: Date
    updatedAt: Date
    expiresAt: Date
    _count: ManualPaymentCountAggregateOutputType | null
    _avg: ManualPaymentAvgAggregateOutputType | null
    _sum: ManualPaymentSumAggregateOutputType | null
    _min: ManualPaymentMinAggregateOutputType | null
    _max: ManualPaymentMaxAggregateOutputType | null
  }

  type GetManualPaymentGroupByPayload<T extends ManualPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManualPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManualPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManualPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], ManualPaymentGroupByOutputType[P]>
        }
      >
    >


  export type ManualPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referenceId?: boolean
    userId?: boolean
    tokenType?: boolean
    requestedAmount?: boolean
    tokenAmount?: boolean
    deliveryChain?: boolean
    paymentMethod?: boolean
    paymentAmount?: boolean
    cashAppCashtag?: boolean
    cashAppProof?: boolean
    stablecoinType?: boolean
    senderAddress?: boolean
    txHash?: boolean
    blockchainChain?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    rejectionReason?: boolean
    distributionTxHash?: boolean
    distributedAt?: boolean
    userNotes?: boolean
    adminNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manualPayment"]>

  export type ManualPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referenceId?: boolean
    userId?: boolean
    tokenType?: boolean
    requestedAmount?: boolean
    tokenAmount?: boolean
    deliveryChain?: boolean
    paymentMethod?: boolean
    paymentAmount?: boolean
    cashAppCashtag?: boolean
    cashAppProof?: boolean
    stablecoinType?: boolean
    senderAddress?: boolean
    txHash?: boolean
    blockchainChain?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    rejectionReason?: boolean
    distributionTxHash?: boolean
    distributedAt?: boolean
    userNotes?: boolean
    adminNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manualPayment"]>

  export type ManualPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referenceId?: boolean
    userId?: boolean
    tokenType?: boolean
    requestedAmount?: boolean
    tokenAmount?: boolean
    deliveryChain?: boolean
    paymentMethod?: boolean
    paymentAmount?: boolean
    cashAppCashtag?: boolean
    cashAppProof?: boolean
    stablecoinType?: boolean
    senderAddress?: boolean
    txHash?: boolean
    blockchainChain?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    rejectionReason?: boolean
    distributionTxHash?: boolean
    distributedAt?: boolean
    userNotes?: boolean
    adminNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manualPayment"]>

  export type ManualPaymentSelectScalar = {
    id?: boolean
    referenceId?: boolean
    userId?: boolean
    tokenType?: boolean
    requestedAmount?: boolean
    tokenAmount?: boolean
    deliveryChain?: boolean
    paymentMethod?: boolean
    paymentAmount?: boolean
    cashAppCashtag?: boolean
    cashAppProof?: boolean
    stablecoinType?: boolean
    senderAddress?: boolean
    txHash?: boolean
    blockchainChain?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    rejectionReason?: boolean
    distributionTxHash?: boolean
    distributedAt?: boolean
    userNotes?: boolean
    adminNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }

  export type ManualPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "referenceId" | "userId" | "tokenType" | "requestedAmount" | "tokenAmount" | "deliveryChain" | "paymentMethod" | "paymentAmount" | "cashAppCashtag" | "cashAppProof" | "stablecoinType" | "senderAddress" | "txHash" | "blockchainChain" | "status" | "verifiedBy" | "verifiedAt" | "rejectionReason" | "distributionTxHash" | "distributedAt" | "userNotes" | "adminNotes" | "createdAt" | "updatedAt" | "expiresAt", ExtArgs["result"]["manualPayment"]>
  export type ManualPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ManualPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ManualPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ManualPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ManualPayment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      referenceId: string
      userId: string
      tokenType: $Enums.ManualPaymentTokenType
      requestedAmount: Prisma.Decimal
      tokenAmount: Prisma.Decimal
      deliveryChain: $Enums.Chain
      paymentMethod: $Enums.ManualPaymentMethod
      paymentAmount: Prisma.Decimal
      cashAppCashtag: string | null
      cashAppProof: string | null
      stablecoinType: $Enums.StablecoinType | null
      senderAddress: string | null
      txHash: string | null
      blockchainChain: $Enums.Chain | null
      status: $Enums.ManualPaymentStatus
      verifiedBy: string | null
      verifiedAt: Date | null
      rejectionReason: string | null
      distributionTxHash: string | null
      distributedAt: Date | null
      userNotes: string | null
      adminNotes: string | null
      createdAt: Date
      updatedAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["manualPayment"]>
    composites: {}
  }

  type ManualPaymentGetPayload<S extends boolean | null | undefined | ManualPaymentDefaultArgs> = $Result.GetResult<Prisma.$ManualPaymentPayload, S>

  type ManualPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ManualPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ManualPaymentCountAggregateInputType | true
    }

  export interface ManualPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ManualPayment'], meta: { name: 'ManualPayment' } }
    /**
     * Find zero or one ManualPayment that matches the filter.
     * @param {ManualPaymentFindUniqueArgs} args - Arguments to find a ManualPayment
     * @example
     * // Get one ManualPayment
     * const manualPayment = await prisma.manualPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManualPaymentFindUniqueArgs>(args: SelectSubset<T, ManualPaymentFindUniqueArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ManualPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ManualPaymentFindUniqueOrThrowArgs} args - Arguments to find a ManualPayment
     * @example
     * // Get one ManualPayment
     * const manualPayment = await prisma.manualPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManualPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, ManualPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ManualPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentFindFirstArgs} args - Arguments to find a ManualPayment
     * @example
     * // Get one ManualPayment
     * const manualPayment = await prisma.manualPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManualPaymentFindFirstArgs>(args?: SelectSubset<T, ManualPaymentFindFirstArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ManualPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentFindFirstOrThrowArgs} args - Arguments to find a ManualPayment
     * @example
     * // Get one ManualPayment
     * const manualPayment = await prisma.manualPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManualPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, ManualPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ManualPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManualPayments
     * const manualPayments = await prisma.manualPayment.findMany()
     * 
     * // Get first 10 ManualPayments
     * const manualPayments = await prisma.manualPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manualPaymentWithIdOnly = await prisma.manualPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManualPaymentFindManyArgs>(args?: SelectSubset<T, ManualPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ManualPayment.
     * @param {ManualPaymentCreateArgs} args - Arguments to create a ManualPayment.
     * @example
     * // Create one ManualPayment
     * const ManualPayment = await prisma.manualPayment.create({
     *   data: {
     *     // ... data to create a ManualPayment
     *   }
     * })
     * 
     */
    create<T extends ManualPaymentCreateArgs>(args: SelectSubset<T, ManualPaymentCreateArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ManualPayments.
     * @param {ManualPaymentCreateManyArgs} args - Arguments to create many ManualPayments.
     * @example
     * // Create many ManualPayments
     * const manualPayment = await prisma.manualPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManualPaymentCreateManyArgs>(args?: SelectSubset<T, ManualPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ManualPayments and returns the data saved in the database.
     * @param {ManualPaymentCreateManyAndReturnArgs} args - Arguments to create many ManualPayments.
     * @example
     * // Create many ManualPayments
     * const manualPayment = await prisma.manualPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ManualPayments and only return the `id`
     * const manualPaymentWithIdOnly = await prisma.manualPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ManualPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, ManualPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ManualPayment.
     * @param {ManualPaymentDeleteArgs} args - Arguments to delete one ManualPayment.
     * @example
     * // Delete one ManualPayment
     * const ManualPayment = await prisma.manualPayment.delete({
     *   where: {
     *     // ... filter to delete one ManualPayment
     *   }
     * })
     * 
     */
    delete<T extends ManualPaymentDeleteArgs>(args: SelectSubset<T, ManualPaymentDeleteArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ManualPayment.
     * @param {ManualPaymentUpdateArgs} args - Arguments to update one ManualPayment.
     * @example
     * // Update one ManualPayment
     * const manualPayment = await prisma.manualPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManualPaymentUpdateArgs>(args: SelectSubset<T, ManualPaymentUpdateArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ManualPayments.
     * @param {ManualPaymentDeleteManyArgs} args - Arguments to filter ManualPayments to delete.
     * @example
     * // Delete a few ManualPayments
     * const { count } = await prisma.manualPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManualPaymentDeleteManyArgs>(args?: SelectSubset<T, ManualPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManualPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManualPayments
     * const manualPayment = await prisma.manualPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManualPaymentUpdateManyArgs>(args: SelectSubset<T, ManualPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManualPayments and returns the data updated in the database.
     * @param {ManualPaymentUpdateManyAndReturnArgs} args - Arguments to update many ManualPayments.
     * @example
     * // Update many ManualPayments
     * const manualPayment = await prisma.manualPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ManualPayments and only return the `id`
     * const manualPaymentWithIdOnly = await prisma.manualPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ManualPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, ManualPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ManualPayment.
     * @param {ManualPaymentUpsertArgs} args - Arguments to update or create a ManualPayment.
     * @example
     * // Update or create a ManualPayment
     * const manualPayment = await prisma.manualPayment.upsert({
     *   create: {
     *     // ... data to create a ManualPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManualPayment we want to update
     *   }
     * })
     */
    upsert<T extends ManualPaymentUpsertArgs>(args: SelectSubset<T, ManualPaymentUpsertArgs<ExtArgs>>): Prisma__ManualPaymentClient<$Result.GetResult<Prisma.$ManualPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ManualPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentCountArgs} args - Arguments to filter ManualPayments to count.
     * @example
     * // Count the number of ManualPayments
     * const count = await prisma.manualPayment.count({
     *   where: {
     *     // ... the filter for the ManualPayments we want to count
     *   }
     * })
    **/
    count<T extends ManualPaymentCountArgs>(
      args?: Subset<T, ManualPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManualPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ManualPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManualPaymentAggregateArgs>(args: Subset<T, ManualPaymentAggregateArgs>): Prisma.PrismaPromise<GetManualPaymentAggregateType<T>>

    /**
     * Group by ManualPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManualPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManualPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManualPaymentGroupByArgs['orderBy'] }
        : { orderBy?: ManualPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManualPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManualPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ManualPayment model
   */
  readonly fields: ManualPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ManualPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManualPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ManualPayment model
   */
  interface ManualPaymentFieldRefs {
    readonly id: FieldRef<"ManualPayment", 'String'>
    readonly referenceId: FieldRef<"ManualPayment", 'String'>
    readonly userId: FieldRef<"ManualPayment", 'String'>
    readonly tokenType: FieldRef<"ManualPayment", 'ManualPaymentTokenType'>
    readonly requestedAmount: FieldRef<"ManualPayment", 'Decimal'>
    readonly tokenAmount: FieldRef<"ManualPayment", 'Decimal'>
    readonly deliveryChain: FieldRef<"ManualPayment", 'Chain'>
    readonly paymentMethod: FieldRef<"ManualPayment", 'ManualPaymentMethod'>
    readonly paymentAmount: FieldRef<"ManualPayment", 'Decimal'>
    readonly cashAppCashtag: FieldRef<"ManualPayment", 'String'>
    readonly cashAppProof: FieldRef<"ManualPayment", 'String'>
    readonly stablecoinType: FieldRef<"ManualPayment", 'StablecoinType'>
    readonly senderAddress: FieldRef<"ManualPayment", 'String'>
    readonly txHash: FieldRef<"ManualPayment", 'String'>
    readonly blockchainChain: FieldRef<"ManualPayment", 'Chain'>
    readonly status: FieldRef<"ManualPayment", 'ManualPaymentStatus'>
    readonly verifiedBy: FieldRef<"ManualPayment", 'String'>
    readonly verifiedAt: FieldRef<"ManualPayment", 'DateTime'>
    readonly rejectionReason: FieldRef<"ManualPayment", 'String'>
    readonly distributionTxHash: FieldRef<"ManualPayment", 'String'>
    readonly distributedAt: FieldRef<"ManualPayment", 'DateTime'>
    readonly userNotes: FieldRef<"ManualPayment", 'String'>
    readonly adminNotes: FieldRef<"ManualPayment", 'String'>
    readonly createdAt: FieldRef<"ManualPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"ManualPayment", 'DateTime'>
    readonly expiresAt: FieldRef<"ManualPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ManualPayment findUnique
   */
  export type ManualPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ManualPayment to fetch.
     */
    where: ManualPaymentWhereUniqueInput
  }

  /**
   * ManualPayment findUniqueOrThrow
   */
  export type ManualPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ManualPayment to fetch.
     */
    where: ManualPaymentWhereUniqueInput
  }

  /**
   * ManualPayment findFirst
   */
  export type ManualPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ManualPayment to fetch.
     */
    where?: ManualPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualPayments to fetch.
     */
    orderBy?: ManualPaymentOrderByWithRelationInput | ManualPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManualPayments.
     */
    cursor?: ManualPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManualPayments.
     */
    distinct?: ManualPaymentScalarFieldEnum | ManualPaymentScalarFieldEnum[]
  }

  /**
   * ManualPayment findFirstOrThrow
   */
  export type ManualPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ManualPayment to fetch.
     */
    where?: ManualPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualPayments to fetch.
     */
    orderBy?: ManualPaymentOrderByWithRelationInput | ManualPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManualPayments.
     */
    cursor?: ManualPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManualPayments.
     */
    distinct?: ManualPaymentScalarFieldEnum | ManualPaymentScalarFieldEnum[]
  }

  /**
   * ManualPayment findMany
   */
  export type ManualPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ManualPayments to fetch.
     */
    where?: ManualPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManualPayments to fetch.
     */
    orderBy?: ManualPaymentOrderByWithRelationInput | ManualPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ManualPayments.
     */
    cursor?: ManualPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManualPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManualPayments.
     */
    skip?: number
    distinct?: ManualPaymentScalarFieldEnum | ManualPaymentScalarFieldEnum[]
  }

  /**
   * ManualPayment create
   */
  export type ManualPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a ManualPayment.
     */
    data: XOR<ManualPaymentCreateInput, ManualPaymentUncheckedCreateInput>
  }

  /**
   * ManualPayment createMany
   */
  export type ManualPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ManualPayments.
     */
    data: ManualPaymentCreateManyInput | ManualPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ManualPayment createManyAndReturn
   */
  export type ManualPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many ManualPayments.
     */
    data: ManualPaymentCreateManyInput | ManualPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ManualPayment update
   */
  export type ManualPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a ManualPayment.
     */
    data: XOR<ManualPaymentUpdateInput, ManualPaymentUncheckedUpdateInput>
    /**
     * Choose, which ManualPayment to update.
     */
    where: ManualPaymentWhereUniqueInput
  }

  /**
   * ManualPayment updateMany
   */
  export type ManualPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ManualPayments.
     */
    data: XOR<ManualPaymentUpdateManyMutationInput, ManualPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ManualPayments to update
     */
    where?: ManualPaymentWhereInput
    /**
     * Limit how many ManualPayments to update.
     */
    limit?: number
  }

  /**
   * ManualPayment updateManyAndReturn
   */
  export type ManualPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * The data used to update ManualPayments.
     */
    data: XOR<ManualPaymentUpdateManyMutationInput, ManualPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ManualPayments to update
     */
    where?: ManualPaymentWhereInput
    /**
     * Limit how many ManualPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ManualPayment upsert
   */
  export type ManualPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the ManualPayment to update in case it exists.
     */
    where: ManualPaymentWhereUniqueInput
    /**
     * In case the ManualPayment found by the `where` argument doesn't exist, create a new ManualPayment with this data.
     */
    create: XOR<ManualPaymentCreateInput, ManualPaymentUncheckedCreateInput>
    /**
     * In case the ManualPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManualPaymentUpdateInput, ManualPaymentUncheckedUpdateInput>
  }

  /**
   * ManualPayment delete
   */
  export type ManualPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
    /**
     * Filter which ManualPayment to delete.
     */
    where: ManualPaymentWhereUniqueInput
  }

  /**
   * ManualPayment deleteMany
   */
  export type ManualPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManualPayments to delete
     */
    where?: ManualPaymentWhereInput
    /**
     * Limit how many ManualPayments to delete.
     */
    limit?: number
  }

  /**
   * ManualPayment without action
   */
  export type ManualPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManualPayment
     */
    select?: ManualPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ManualPayment
     */
    omit?: ManualPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManualPaymentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    address: 'address',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    displayName: 'displayName',
    avatar: 'avatar',
    bio: 'bio',
    location: 'location',
    website: 'website',
    twitter: 'twitter',
    discord: 'discord',
    googleId: 'googleId',
    facebookId: 'facebookId',
    appleId: 'appleId',
    preferredChain: 'preferredChain',
    emailNotifications: 'emailNotifications',
    pushNotifications: 'pushNotifications',
    darkMode: 'darkMode',
    language: 'language',
    kycStatus: 'kycStatus',
    kycSubmittedAt: 'kycSubmittedAt',
    kycVerifiedAt: 'kycVerifiedAt',
    kycDocuments: 'kycDocuments'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MintReceiptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    tokenAmount: 'tokenAmount',
    chain: 'chain',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentId: 'paymentId',
    paymentHash: 'paymentHash',
    txHash: 'txHash',
    blockNumber: 'blockNumber',
    gasUsed: 'gasUsed',
    receipt: 'receipt',
    signature: 'signature',
    nonce: 'nonce',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    expiresAt: 'expiresAt'
  };

  export type MintReceiptScalarFieldEnum = (typeof MintReceiptScalarFieldEnum)[keyof typeof MintReceiptScalarFieldEnum]


  export const RedeemReceiptScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenAmount: 'tokenAmount',
    amount: 'amount',
    chain: 'chain',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentAddress: 'paymentAddress',
    burnTxHash: 'burnTxHash',
    blockNumber: 'blockNumber',
    gasUsed: 'gasUsed',
    payoutId: 'payoutId',
    payoutHash: 'payoutHash',
    receipt: 'receipt',
    signature: 'signature',
    nonce: 'nonce',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    expiresAt: 'expiresAt'
  };

  export type RedeemReceiptScalarFieldEnum = (typeof RedeemReceiptScalarFieldEnum)[keyof typeof RedeemReceiptScalarFieldEnum]


  export const ReserveSnapshotScalarFieldEnum: {
    id: 'id',
    totalUsdReserve: 'totalUsdReserve',
    totalSupply: 'totalSupply',
    bscSupply: 'bscSupply',
    polygonSupply: 'polygonSupply',
    stripeBalance: 'stripeBalance',
    cashAppBalance: 'cashAppBalance',
    bankBalance: 'bankBalance',
    collateralRatio: 'collateralRatio',
    isHealthy: 'isHealthy',
    blockNumber: 'blockNumber',
    timestamp: 'timestamp'
  };

  export type ReserveSnapshotScalarFieldEnum = (typeof ReserveSnapshotScalarFieldEnum)[keyof typeof ReserveSnapshotScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    userAddress: 'userAddress',
    adminAddress: 'adminAddress',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    oldData: 'oldData',
    newData: 'newData',
    metadata: 'metadata',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    updatedBy: 'updatedBy',
    updatedAt: 'updatedAt'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const DaoMembershipScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    membershipTier: 'membershipTier',
    joinedAt: 'joinedAt',
    lastActiveAt: 'lastActiveAt',
    totalStaked: 'totalStaked',
    totalTransactions: 'totalTransactions',
    totalVolume: 'totalVolume',
    referralCount: 'referralCount',
    isActive: 'isActive',
    isPremium: 'isPremium',
    isFounder: 'isFounder'
  };

  export type DaoMembershipScalarFieldEnum = (typeof DaoMembershipScalarFieldEnum)[keyof typeof DaoMembershipScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    category: 'category',
    rarity: 'rarity',
    requirements: 'requirements',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    badgeId: 'badgeId',
    earnedAt: 'earnedAt',
    progress: 'progress',
    isVisible: 'isVisible'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const AdminRoleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    grantedBy: 'grantedBy',
    grantedAt: 'grantedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    permissions: 'permissions'
  };

  export type AdminRoleScalarFieldEnum = (typeof AdminRoleScalarFieldEnum)[keyof typeof AdminRoleScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionHash: 'sessionHash',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    loginMethod: 'loginMethod',
    isActive: 'isActive',
    lastUsedAt: 'lastUsedAt',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    actionUrl: 'actionUrl',
    isRead: 'isRead',
    isSent: 'isSent',
    priority: 'priority',
    metadata: 'metadata',
    createdAt: 'createdAt',
    readAt: 'readAt',
    sentAt: 'sentAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ReferralScalarFieldEnum: {
    id: 'id',
    referrerId: 'referrerId',
    refereeId: 'refereeId',
    referralCode: 'referralCode',
    isActive: 'isActive',
    isRewardClaimed: 'isRewardClaimed',
    referrerReward: 'referrerReward',
    refereeReward: 'refereeReward',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    claimedAt: 'claimedAt'
  };

  export type ReferralScalarFieldEnum = (typeof ReferralScalarFieldEnum)[keyof typeof ReferralScalarFieldEnum]


  export const ManualPaymentScalarFieldEnum: {
    id: 'id',
    referenceId: 'referenceId',
    userId: 'userId',
    tokenType: 'tokenType',
    requestedAmount: 'requestedAmount',
    tokenAmount: 'tokenAmount',
    deliveryChain: 'deliveryChain',
    paymentMethod: 'paymentMethod',
    paymentAmount: 'paymentAmount',
    cashAppCashtag: 'cashAppCashtag',
    cashAppProof: 'cashAppProof',
    stablecoinType: 'stablecoinType',
    senderAddress: 'senderAddress',
    txHash: 'txHash',
    blockchainChain: 'blockchainChain',
    status: 'status',
    verifiedBy: 'verifiedBy',
    verifiedAt: 'verifiedAt',
    rejectionReason: 'rejectionReason',
    distributionTxHash: 'distributionTxHash',
    distributedAt: 'distributedAt',
    userNotes: 'userNotes',
    adminNotes: 'adminNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt'
  };

  export type ManualPaymentScalarFieldEnum = (typeof ManualPaymentScalarFieldEnum)[keyof typeof ManualPaymentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Chain'
   */
  export type EnumChainFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Chain'>
    


  /**
   * Reference to a field of type 'Chain[]'
   */
  export type ListEnumChainFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Chain[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'KycStatus'
   */
  export type EnumKycStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KycStatus'>
    


  /**
   * Reference to a field of type 'KycStatus[]'
   */
  export type ListEnumKycStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KycStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'MintStatus'
   */
  export type EnumMintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MintStatus'>
    


  /**
   * Reference to a field of type 'MintStatus[]'
   */
  export type ListEnumMintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MintStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RedeemStatus'
   */
  export type EnumRedeemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RedeemStatus'>
    


  /**
   * Reference to a field of type 'RedeemStatus[]'
   */
  export type ListEnumRedeemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RedeemStatus[]'>
    


  /**
   * Reference to a field of type 'AuditAction'
   */
  export type EnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction'>
    


  /**
   * Reference to a field of type 'AuditAction[]'
   */
  export type ListEnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction[]'>
    


  /**
   * Reference to a field of type 'MembershipTier'
   */
  export type EnumMembershipTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MembershipTier'>
    


  /**
   * Reference to a field of type 'MembershipTier[]'
   */
  export type ListEnumMembershipTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MembershipTier[]'>
    


  /**
   * Reference to a field of type 'BadgeCategory'
   */
  export type EnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory'>
    


  /**
   * Reference to a field of type 'BadgeCategory[]'
   */
  export type ListEnumBadgeCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeCategory[]'>
    


  /**
   * Reference to a field of type 'BadgeRarity'
   */
  export type EnumBadgeRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeRarity'>
    


  /**
   * Reference to a field of type 'BadgeRarity[]'
   */
  export type ListEnumBadgeRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BadgeRarity[]'>
    


  /**
   * Reference to a field of type 'AdminRoleType'
   */
  export type EnumAdminRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRoleType'>
    


  /**
   * Reference to a field of type 'AdminRoleType[]'
   */
  export type ListEnumAdminRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminRoleType[]'>
    


  /**
   * Reference to a field of type 'AuthMethod'
   */
  export type EnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod'>
    


  /**
   * Reference to a field of type 'AuthMethod[]'
   */
  export type ListEnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationPriority'
   */
  export type EnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority'>
    


  /**
   * Reference to a field of type 'NotificationPriority[]'
   */
  export type ListEnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority[]'>
    


  /**
   * Reference to a field of type 'ManualPaymentTokenType'
   */
  export type EnumManualPaymentTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentTokenType'>
    


  /**
   * Reference to a field of type 'ManualPaymentTokenType[]'
   */
  export type ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentTokenType[]'>
    


  /**
   * Reference to a field of type 'ManualPaymentMethod'
   */
  export type EnumManualPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentMethod'>
    


  /**
   * Reference to a field of type 'ManualPaymentMethod[]'
   */
  export type ListEnumManualPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentMethod[]'>
    


  /**
   * Reference to a field of type 'StablecoinType'
   */
  export type EnumStablecoinTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StablecoinType'>
    


  /**
   * Reference to a field of type 'StablecoinType[]'
   */
  export type ListEnumStablecoinTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StablecoinType[]'>
    


  /**
   * Reference to a field of type 'ManualPaymentStatus'
   */
  export type EnumManualPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentStatus'>
    


  /**
   * Reference to a field of type 'ManualPaymentStatus[]'
   */
  export type ListEnumManualPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ManualPaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    twitter?: StringNullableFilter<"User"> | string | null
    discord?: StringNullableFilter<"User"> | string | null
    googleId?: StringNullableFilter<"User"> | string | null
    facebookId?: StringNullableFilter<"User"> | string | null
    appleId?: StringNullableFilter<"User"> | string | null
    preferredChain?: EnumChainNullableFilter<"User"> | $Enums.Chain | null
    emailNotifications?: BoolFilter<"User"> | boolean
    pushNotifications?: BoolFilter<"User"> | boolean
    darkMode?: BoolFilter<"User"> | boolean
    language?: StringFilter<"User"> | string
    kycStatus?: EnumKycStatusFilter<"User"> | $Enums.KycStatus
    kycSubmittedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycDocuments?: JsonNullableFilter<"User">
    mintReceipts?: MintReceiptListRelationFilter
    redeemReceipts?: RedeemReceiptListRelationFilter
    daoMembership?: XOR<DaoMembershipNullableScalarRelationFilter, DaoMembershipWhereInput> | null
    userBadges?: UserBadgeListRelationFilter
    adminRoles?: AdminRoleListRelationFilter
    sessions?: UserSessionListRelationFilter
    manualPayments?: ManualPaymentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    email?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayName?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    discord?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    facebookId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    preferredChain?: SortOrderInput | SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    kycStatus?: SortOrder
    kycSubmittedAt?: SortOrderInput | SortOrder
    kycVerifiedAt?: SortOrderInput | SortOrder
    kycDocuments?: SortOrderInput | SortOrder
    mintReceipts?: MintReceiptOrderByRelationAggregateInput
    redeemReceipts?: RedeemReceiptOrderByRelationAggregateInput
    daoMembership?: DaoMembershipOrderByWithRelationInput
    userBadges?: UserBadgeOrderByRelationAggregateInput
    adminRoles?: AdminRoleOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
    manualPayments?: ManualPaymentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address?: string
    email?: string
    googleId?: string
    facebookId?: string
    appleId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    displayName?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    location?: StringNullableFilter<"User"> | string | null
    website?: StringNullableFilter<"User"> | string | null
    twitter?: StringNullableFilter<"User"> | string | null
    discord?: StringNullableFilter<"User"> | string | null
    preferredChain?: EnumChainNullableFilter<"User"> | $Enums.Chain | null
    emailNotifications?: BoolFilter<"User"> | boolean
    pushNotifications?: BoolFilter<"User"> | boolean
    darkMode?: BoolFilter<"User"> | boolean
    language?: StringFilter<"User"> | string
    kycStatus?: EnumKycStatusFilter<"User"> | $Enums.KycStatus
    kycSubmittedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycVerifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    kycDocuments?: JsonNullableFilter<"User">
    mintReceipts?: MintReceiptListRelationFilter
    redeemReceipts?: RedeemReceiptListRelationFilter
    daoMembership?: XOR<DaoMembershipNullableScalarRelationFilter, DaoMembershipWhereInput> | null
    userBadges?: UserBadgeListRelationFilter
    adminRoles?: AdminRoleListRelationFilter
    sessions?: UserSessionListRelationFilter
    manualPayments?: ManualPaymentListRelationFilter
  }, "id" | "address" | "email" | "googleId" | "facebookId" | "appleId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    email?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayName?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    discord?: SortOrderInput | SortOrder
    googleId?: SortOrderInput | SortOrder
    facebookId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    preferredChain?: SortOrderInput | SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    kycStatus?: SortOrder
    kycSubmittedAt?: SortOrderInput | SortOrder
    kycVerifiedAt?: SortOrderInput | SortOrder
    kycDocuments?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    displayName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    website?: StringNullableWithAggregatesFilter<"User"> | string | null
    twitter?: StringNullableWithAggregatesFilter<"User"> | string | null
    discord?: StringNullableWithAggregatesFilter<"User"> | string | null
    googleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    facebookId?: StringNullableWithAggregatesFilter<"User"> | string | null
    appleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    preferredChain?: EnumChainNullableWithAggregatesFilter<"User"> | $Enums.Chain | null
    emailNotifications?: BoolWithAggregatesFilter<"User"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"User"> | boolean
    darkMode?: BoolWithAggregatesFilter<"User"> | boolean
    language?: StringWithAggregatesFilter<"User"> | string
    kycStatus?: EnumKycStatusWithAggregatesFilter<"User"> | $Enums.KycStatus
    kycSubmittedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    kycVerifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    kycDocuments?: JsonNullableWithAggregatesFilter<"User">
  }

  export type MintReceiptWhereInput = {
    AND?: MintReceiptWhereInput | MintReceiptWhereInput[]
    OR?: MintReceiptWhereInput[]
    NOT?: MintReceiptWhereInput | MintReceiptWhereInput[]
    id?: StringFilter<"MintReceipt"> | string
    userId?: StringFilter<"MintReceipt"> | string
    amount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"MintReceipt"> | $Enums.Chain
    status?: EnumMintStatusFilter<"MintReceipt"> | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFilter<"MintReceipt"> | $Enums.PaymentMethod
    paymentId?: StringFilter<"MintReceipt"> | string
    paymentHash?: StringNullableFilter<"MintReceipt"> | string | null
    txHash?: StringNullableFilter<"MintReceipt"> | string | null
    blockNumber?: IntNullableFilter<"MintReceipt"> | number | null
    gasUsed?: IntNullableFilter<"MintReceipt"> | number | null
    receipt?: StringFilter<"MintReceipt"> | string
    signature?: StringFilter<"MintReceipt"> | string
    nonce?: StringFilter<"MintReceipt"> | string
    createdAt?: DateTimeFilter<"MintReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"MintReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"MintReceipt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MintReceiptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    tokenAmount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    paymentHash?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MintReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    paymentId?: string
    nonce?: string
    AND?: MintReceiptWhereInput | MintReceiptWhereInput[]
    OR?: MintReceiptWhereInput[]
    NOT?: MintReceiptWhereInput | MintReceiptWhereInput[]
    userId?: StringFilter<"MintReceipt"> | string
    amount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"MintReceipt"> | $Enums.Chain
    status?: EnumMintStatusFilter<"MintReceipt"> | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFilter<"MintReceipt"> | $Enums.PaymentMethod
    paymentHash?: StringNullableFilter<"MintReceipt"> | string | null
    txHash?: StringNullableFilter<"MintReceipt"> | string | null
    blockNumber?: IntNullableFilter<"MintReceipt"> | number | null
    gasUsed?: IntNullableFilter<"MintReceipt"> | number | null
    receipt?: StringFilter<"MintReceipt"> | string
    signature?: StringFilter<"MintReceipt"> | string
    createdAt?: DateTimeFilter<"MintReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"MintReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"MintReceipt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "paymentId" | "nonce">

  export type MintReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    tokenAmount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    paymentHash?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    _count?: MintReceiptCountOrderByAggregateInput
    _avg?: MintReceiptAvgOrderByAggregateInput
    _max?: MintReceiptMaxOrderByAggregateInput
    _min?: MintReceiptMinOrderByAggregateInput
    _sum?: MintReceiptSumOrderByAggregateInput
  }

  export type MintReceiptScalarWhereWithAggregatesInput = {
    AND?: MintReceiptScalarWhereWithAggregatesInput | MintReceiptScalarWhereWithAggregatesInput[]
    OR?: MintReceiptScalarWhereWithAggregatesInput[]
    NOT?: MintReceiptScalarWhereWithAggregatesInput | MintReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MintReceipt"> | string
    userId?: StringWithAggregatesFilter<"MintReceipt"> | string
    amount?: DecimalWithAggregatesFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalWithAggregatesFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainWithAggregatesFilter<"MintReceipt"> | $Enums.Chain
    status?: EnumMintStatusWithAggregatesFilter<"MintReceipt"> | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"MintReceipt"> | $Enums.PaymentMethod
    paymentId?: StringWithAggregatesFilter<"MintReceipt"> | string
    paymentHash?: StringNullableWithAggregatesFilter<"MintReceipt"> | string | null
    txHash?: StringNullableWithAggregatesFilter<"MintReceipt"> | string | null
    blockNumber?: IntNullableWithAggregatesFilter<"MintReceipt"> | number | null
    gasUsed?: IntNullableWithAggregatesFilter<"MintReceipt"> | number | null
    receipt?: StringWithAggregatesFilter<"MintReceipt"> | string
    signature?: StringWithAggregatesFilter<"MintReceipt"> | string
    nonce?: StringWithAggregatesFilter<"MintReceipt"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MintReceipt"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"MintReceipt"> | Date | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"MintReceipt"> | Date | string
  }

  export type RedeemReceiptWhereInput = {
    AND?: RedeemReceiptWhereInput | RedeemReceiptWhereInput[]
    OR?: RedeemReceiptWhereInput[]
    NOT?: RedeemReceiptWhereInput | RedeemReceiptWhereInput[]
    id?: StringFilter<"RedeemReceipt"> | string
    userId?: StringFilter<"RedeemReceipt"> | string
    tokenAmount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"RedeemReceipt"> | $Enums.Chain
    status?: EnumRedeemStatusFilter<"RedeemReceipt"> | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFilter<"RedeemReceipt"> | $Enums.PaymentMethod
    paymentAddress?: StringFilter<"RedeemReceipt"> | string
    burnTxHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    blockNumber?: IntNullableFilter<"RedeemReceipt"> | number | null
    gasUsed?: IntNullableFilter<"RedeemReceipt"> | number | null
    payoutId?: StringNullableFilter<"RedeemReceipt"> | string | null
    payoutHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    receipt?: StringFilter<"RedeemReceipt"> | string
    signature?: StringFilter<"RedeemReceipt"> | string
    nonce?: StringFilter<"RedeemReceipt"> | string
    createdAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"RedeemReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RedeemReceiptOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenAmount?: SortOrder
    amount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentAddress?: SortOrder
    burnTxHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    payoutId?: SortOrderInput | SortOrder
    payoutHash?: SortOrderInput | SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RedeemReceiptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    payoutId?: string
    nonce?: string
    AND?: RedeemReceiptWhereInput | RedeemReceiptWhereInput[]
    OR?: RedeemReceiptWhereInput[]
    NOT?: RedeemReceiptWhereInput | RedeemReceiptWhereInput[]
    userId?: StringFilter<"RedeemReceipt"> | string
    tokenAmount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"RedeemReceipt"> | $Enums.Chain
    status?: EnumRedeemStatusFilter<"RedeemReceipt"> | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFilter<"RedeemReceipt"> | $Enums.PaymentMethod
    paymentAddress?: StringFilter<"RedeemReceipt"> | string
    burnTxHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    blockNumber?: IntNullableFilter<"RedeemReceipt"> | number | null
    gasUsed?: IntNullableFilter<"RedeemReceipt"> | number | null
    payoutHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    receipt?: StringFilter<"RedeemReceipt"> | string
    signature?: StringFilter<"RedeemReceipt"> | string
    createdAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"RedeemReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "payoutId" | "nonce">

  export type RedeemReceiptOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenAmount?: SortOrder
    amount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentAddress?: SortOrder
    burnTxHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    payoutId?: SortOrderInput | SortOrder
    payoutHash?: SortOrderInput | SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    _count?: RedeemReceiptCountOrderByAggregateInput
    _avg?: RedeemReceiptAvgOrderByAggregateInput
    _max?: RedeemReceiptMaxOrderByAggregateInput
    _min?: RedeemReceiptMinOrderByAggregateInput
    _sum?: RedeemReceiptSumOrderByAggregateInput
  }

  export type RedeemReceiptScalarWhereWithAggregatesInput = {
    AND?: RedeemReceiptScalarWhereWithAggregatesInput | RedeemReceiptScalarWhereWithAggregatesInput[]
    OR?: RedeemReceiptScalarWhereWithAggregatesInput[]
    NOT?: RedeemReceiptScalarWhereWithAggregatesInput | RedeemReceiptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    userId?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    tokenAmount?: DecimalWithAggregatesFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalWithAggregatesFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainWithAggregatesFilter<"RedeemReceipt"> | $Enums.Chain
    status?: EnumRedeemStatusWithAggregatesFilter<"RedeemReceipt"> | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"RedeemReceipt"> | $Enums.PaymentMethod
    paymentAddress?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    burnTxHash?: StringNullableWithAggregatesFilter<"RedeemReceipt"> | string | null
    blockNumber?: IntNullableWithAggregatesFilter<"RedeemReceipt"> | number | null
    gasUsed?: IntNullableWithAggregatesFilter<"RedeemReceipt"> | number | null
    payoutId?: StringNullableWithAggregatesFilter<"RedeemReceipt"> | string | null
    payoutHash?: StringNullableWithAggregatesFilter<"RedeemReceipt"> | string | null
    receipt?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    signature?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    nonce?: StringWithAggregatesFilter<"RedeemReceipt"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RedeemReceipt"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"RedeemReceipt"> | Date | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"RedeemReceipt"> | Date | string
  }

  export type ReserveSnapshotWhereInput = {
    AND?: ReserveSnapshotWhereInput | ReserveSnapshotWhereInput[]
    OR?: ReserveSnapshotWhereInput[]
    NOT?: ReserveSnapshotWhereInput | ReserveSnapshotWhereInput[]
    id?: StringFilter<"ReserveSnapshot"> | string
    totalUsdReserve?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFilter<"ReserveSnapshot"> | boolean
    blockNumber?: IntFilter<"ReserveSnapshot"> | number
    timestamp?: DateTimeFilter<"ReserveSnapshot"> | Date | string
  }

  export type ReserveSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    isHealthy?: SortOrder
    blockNumber?: SortOrder
    timestamp?: SortOrder
  }

  export type ReserveSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReserveSnapshotWhereInput | ReserveSnapshotWhereInput[]
    OR?: ReserveSnapshotWhereInput[]
    NOT?: ReserveSnapshotWhereInput | ReserveSnapshotWhereInput[]
    totalUsdReserve?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFilter<"ReserveSnapshot"> | boolean
    blockNumber?: IntFilter<"ReserveSnapshot"> | number
    timestamp?: DateTimeFilter<"ReserveSnapshot"> | Date | string
  }, "id">

  export type ReserveSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    isHealthy?: SortOrder
    blockNumber?: SortOrder
    timestamp?: SortOrder
    _count?: ReserveSnapshotCountOrderByAggregateInput
    _avg?: ReserveSnapshotAvgOrderByAggregateInput
    _max?: ReserveSnapshotMaxOrderByAggregateInput
    _min?: ReserveSnapshotMinOrderByAggregateInput
    _sum?: ReserveSnapshotSumOrderByAggregateInput
  }

  export type ReserveSnapshotScalarWhereWithAggregatesInput = {
    AND?: ReserveSnapshotScalarWhereWithAggregatesInput | ReserveSnapshotScalarWhereWithAggregatesInput[]
    OR?: ReserveSnapshotScalarWhereWithAggregatesInput[]
    NOT?: ReserveSnapshotScalarWhereWithAggregatesInput | ReserveSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReserveSnapshot"> | string
    totalUsdReserve?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalWithAggregatesFilter<"ReserveSnapshot"> | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolWithAggregatesFilter<"ReserveSnapshot"> | boolean
    blockNumber?: IntWithAggregatesFilter<"ReserveSnapshot"> | number
    timestamp?: DateTimeWithAggregatesFilter<"ReserveSnapshot"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    userAddress?: StringNullableFilter<"AuditLog"> | string | null
    adminAddress?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userAddress?: SortOrderInput | SortOrder
    adminAddress?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    entityType?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    userAddress?: StringNullableFilter<"AuditLog"> | string | null
    adminAddress?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    oldData?: JsonNullableFilter<"AuditLog">
    newData?: JsonNullableFilter<"AuditLog">
    metadata?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userAddress?: SortOrderInput | SortOrder
    adminAddress?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: EnumAuditActionWithAggregatesFilter<"AuditLog"> | $Enums.AuditAction
    entityType?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    userAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    adminAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldData?: JsonNullableWithAggregatesFilter<"AuditLog">
    newData?: JsonNullableWithAggregatesFilter<"AuditLog">
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: StringFilter<"SystemConfig"> | string
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    updatedBy?: StringFilter<"SystemConfig"> | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedBy?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
    description?: StringNullableFilter<"SystemConfig"> | string | null
    updatedBy?: StringFilter<"SystemConfig"> | string
    updatedAt?: DateTimeFilter<"SystemConfig"> | Date | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    updatedBy?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemConfig"> | string
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
    description?: StringNullableWithAggregatesFilter<"SystemConfig"> | string | null
    updatedBy?: StringWithAggregatesFilter<"SystemConfig"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemConfig"> | Date | string
  }

  export type DaoMembershipWhereInput = {
    AND?: DaoMembershipWhereInput | DaoMembershipWhereInput[]
    OR?: DaoMembershipWhereInput[]
    NOT?: DaoMembershipWhereInput | DaoMembershipWhereInput[]
    id?: StringFilter<"DaoMembership"> | string
    userId?: StringFilter<"DaoMembership"> | string
    membershipTier?: EnumMembershipTierFilter<"DaoMembership"> | $Enums.MembershipTier
    joinedAt?: DateTimeFilter<"DaoMembership"> | Date | string
    lastActiveAt?: DateTimeFilter<"DaoMembership"> | Date | string
    totalStaked?: DecimalFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFilter<"DaoMembership"> | number
    totalVolume?: DecimalFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    referralCount?: IntFilter<"DaoMembership"> | number
    isActive?: BoolFilter<"DaoMembership"> | boolean
    isPremium?: BoolFilter<"DaoMembership"> | boolean
    isFounder?: BoolFilter<"DaoMembership"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DaoMembershipOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    membershipTier?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    isFounder?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DaoMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: DaoMembershipWhereInput | DaoMembershipWhereInput[]
    OR?: DaoMembershipWhereInput[]
    NOT?: DaoMembershipWhereInput | DaoMembershipWhereInput[]
    membershipTier?: EnumMembershipTierFilter<"DaoMembership"> | $Enums.MembershipTier
    joinedAt?: DateTimeFilter<"DaoMembership"> | Date | string
    lastActiveAt?: DateTimeFilter<"DaoMembership"> | Date | string
    totalStaked?: DecimalFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFilter<"DaoMembership"> | number
    totalVolume?: DecimalFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    referralCount?: IntFilter<"DaoMembership"> | number
    isActive?: BoolFilter<"DaoMembership"> | boolean
    isPremium?: BoolFilter<"DaoMembership"> | boolean
    isFounder?: BoolFilter<"DaoMembership"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type DaoMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    membershipTier?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    isFounder?: SortOrder
    _count?: DaoMembershipCountOrderByAggregateInput
    _avg?: DaoMembershipAvgOrderByAggregateInput
    _max?: DaoMembershipMaxOrderByAggregateInput
    _min?: DaoMembershipMinOrderByAggregateInput
    _sum?: DaoMembershipSumOrderByAggregateInput
  }

  export type DaoMembershipScalarWhereWithAggregatesInput = {
    AND?: DaoMembershipScalarWhereWithAggregatesInput | DaoMembershipScalarWhereWithAggregatesInput[]
    OR?: DaoMembershipScalarWhereWithAggregatesInput[]
    NOT?: DaoMembershipScalarWhereWithAggregatesInput | DaoMembershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DaoMembership"> | string
    userId?: StringWithAggregatesFilter<"DaoMembership"> | string
    membershipTier?: EnumMembershipTierWithAggregatesFilter<"DaoMembership"> | $Enums.MembershipTier
    joinedAt?: DateTimeWithAggregatesFilter<"DaoMembership"> | Date | string
    lastActiveAt?: DateTimeWithAggregatesFilter<"DaoMembership"> | Date | string
    totalStaked?: DecimalWithAggregatesFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntWithAggregatesFilter<"DaoMembership"> | number
    totalVolume?: DecimalWithAggregatesFilter<"DaoMembership"> | Decimal | DecimalJsLike | number | string
    referralCount?: IntWithAggregatesFilter<"DaoMembership"> | number
    isActive?: BoolWithAggregatesFilter<"DaoMembership"> | boolean
    isPremium?: BoolWithAggregatesFilter<"DaoMembership"> | boolean
    isFounder?: BoolWithAggregatesFilter<"DaoMembership"> | boolean
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    name?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFilter<"Badge"> | $Enums.BadgeRarity
    requirements?: JsonFilter<"Badge">
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
    createdBy?: StringFilter<"Badge"> | string
    userBadges?: UserBadgeListRelationFilter
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    requirements?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    userBadges?: UserBadgeOrderByRelationAggregateInput
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    description?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    category?: EnumBadgeCategoryFilter<"Badge"> | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFilter<"Badge"> | $Enums.BadgeRarity
    requirements?: JsonFilter<"Badge">
    isActive?: BoolFilter<"Badge"> | boolean
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
    createdBy?: StringFilter<"Badge"> | string
    userBadges?: UserBadgeListRelationFilter
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    requirements?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringWithAggregatesFilter<"Badge"> | string
    icon?: StringWithAggregatesFilter<"Badge"> | string
    category?: EnumBadgeCategoryWithAggregatesFilter<"Badge"> | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityWithAggregatesFilter<"Badge"> | $Enums.BadgeRarity
    requirements?: JsonWithAggregatesFilter<"Badge">
    isActive?: BoolWithAggregatesFilter<"Badge"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Badge"> | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    progress?: JsonNullableFilter<"UserBadge">
    isVisible?: BoolFilter<"UserBadge"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    badge?: XOR<BadgeScalarRelationFilter, BadgeWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    progress?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    user?: UserOrderByWithRelationInput
    badge?: BadgeOrderByWithRelationInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_badgeId?: UserBadgeUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    progress?: JsonNullableFilter<"UserBadge">
    isVisible?: BoolFilter<"UserBadge"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    badge?: XOR<BadgeScalarRelationFilter, BadgeWhereInput>
  }, "id" | "userId_badgeId">

  export type UserBadgeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    progress?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBadge"> | string
    userId?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeId?: StringWithAggregatesFilter<"UserBadge"> | string
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
    progress?: JsonNullableWithAggregatesFilter<"UserBadge">
    isVisible?: BoolWithAggregatesFilter<"UserBadge"> | boolean
  }

  export type AdminRoleWhereInput = {
    AND?: AdminRoleWhereInput | AdminRoleWhereInput[]
    OR?: AdminRoleWhereInput[]
    NOT?: AdminRoleWhereInput | AdminRoleWhereInput[]
    id?: StringFilter<"AdminRole"> | string
    userId?: StringFilter<"AdminRole"> | string
    role?: EnumAdminRoleTypeFilter<"AdminRole"> | $Enums.AdminRoleType
    grantedBy?: StringFilter<"AdminRole"> | string
    grantedAt?: DateTimeFilter<"AdminRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AdminRole"> | Date | string | null
    isActive?: BoolFilter<"AdminRole"> | boolean
    permissions?: JsonFilter<"AdminRole">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminRoleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AdminRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_role?: AdminRoleUserIdRoleCompoundUniqueInput
    AND?: AdminRoleWhereInput | AdminRoleWhereInput[]
    OR?: AdminRoleWhereInput[]
    NOT?: AdminRoleWhereInput | AdminRoleWhereInput[]
    userId?: StringFilter<"AdminRole"> | string
    role?: EnumAdminRoleTypeFilter<"AdminRole"> | $Enums.AdminRoleType
    grantedBy?: StringFilter<"AdminRole"> | string
    grantedAt?: DateTimeFilter<"AdminRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AdminRole"> | Date | string | null
    isActive?: BoolFilter<"AdminRole"> | boolean
    permissions?: JsonFilter<"AdminRole">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_role">

  export type AdminRoleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    _count?: AdminRoleCountOrderByAggregateInput
    _max?: AdminRoleMaxOrderByAggregateInput
    _min?: AdminRoleMinOrderByAggregateInput
  }

  export type AdminRoleScalarWhereWithAggregatesInput = {
    AND?: AdminRoleScalarWhereWithAggregatesInput | AdminRoleScalarWhereWithAggregatesInput[]
    OR?: AdminRoleScalarWhereWithAggregatesInput[]
    NOT?: AdminRoleScalarWhereWithAggregatesInput | AdminRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminRole"> | string
    userId?: StringWithAggregatesFilter<"AdminRole"> | string
    role?: EnumAdminRoleTypeWithAggregatesFilter<"AdminRole"> | $Enums.AdminRoleType
    grantedBy?: StringWithAggregatesFilter<"AdminRole"> | string
    grantedAt?: DateTimeWithAggregatesFilter<"AdminRole"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"AdminRole"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"AdminRole"> | boolean
    permissions?: JsonWithAggregatesFilter<"AdminRole">
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionHash?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    loginMethod?: EnumAuthMethodFilter<"UserSession"> | $Enums.AuthMethod
    isActive?: BoolFilter<"UserSession"> | boolean
    lastUsedAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionHash?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    loginMethod?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionHash?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    loginMethod?: EnumAuthMethodFilter<"UserSession"> | $Enums.AuthMethod
    isActive?: BoolFilter<"UserSession"> | boolean
    lastUsedAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionHash">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionHash?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    loginMethod?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    sessionHash?: StringWithAggregatesFilter<"UserSession"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    loginMethod?: EnumAuthMethodWithAggregatesFilter<"UserSession"> | $Enums.AuthMethod
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    lastUsedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    isSent?: BoolFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isSent?: SortOrder
    priority?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    isSent?: BoolFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isSent?: SortOrder
    priority?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    isSent?: BoolWithAggregatesFilter<"Notification"> | boolean
    priority?: EnumNotificationPriorityWithAggregatesFilter<"Notification"> | $Enums.NotificationPriority
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type ReferralWhereInput = {
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    id?: StringFilter<"Referral"> | string
    referrerId?: StringFilter<"Referral"> | string
    refereeId?: StringFilter<"Referral"> | string
    referralCode?: StringFilter<"Referral"> | string
    isActive?: BoolFilter<"Referral"> | boolean
    isRewardClaimed?: BoolFilter<"Referral"> | boolean
    referrerReward?: DecimalFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    claimedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
  }

  export type ReferralOrderByWithRelationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCode?: SortOrder
    isActive?: SortOrder
    isRewardClaimed?: SortOrder
    referrerReward?: SortOrder
    refereeReward?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    claimedAt?: SortOrderInput | SortOrder
  }

  export type ReferralWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    referralCode?: string
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    referrerId?: StringFilter<"Referral"> | string
    refereeId?: StringFilter<"Referral"> | string
    isActive?: BoolFilter<"Referral"> | boolean
    isRewardClaimed?: BoolFilter<"Referral"> | boolean
    referrerReward?: DecimalFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    claimedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
  }, "id" | "referralCode">

  export type ReferralOrderByWithAggregationInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCode?: SortOrder
    isActive?: SortOrder
    isRewardClaimed?: SortOrder
    referrerReward?: SortOrder
    refereeReward?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    claimedAt?: SortOrderInput | SortOrder
    _count?: ReferralCountOrderByAggregateInput
    _avg?: ReferralAvgOrderByAggregateInput
    _max?: ReferralMaxOrderByAggregateInput
    _min?: ReferralMinOrderByAggregateInput
    _sum?: ReferralSumOrderByAggregateInput
  }

  export type ReferralScalarWhereWithAggregatesInput = {
    AND?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    OR?: ReferralScalarWhereWithAggregatesInput[]
    NOT?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Referral"> | string
    referrerId?: StringWithAggregatesFilter<"Referral"> | string
    refereeId?: StringWithAggregatesFilter<"Referral"> | string
    referralCode?: StringWithAggregatesFilter<"Referral"> | string
    isActive?: BoolWithAggregatesFilter<"Referral"> | boolean
    isRewardClaimed?: BoolWithAggregatesFilter<"Referral"> | boolean
    referrerReward?: DecimalWithAggregatesFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalWithAggregatesFilter<"Referral"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Referral"> | Date | string | null
    claimedAt?: DateTimeNullableWithAggregatesFilter<"Referral"> | Date | string | null
  }

  export type ManualPaymentWhereInput = {
    AND?: ManualPaymentWhereInput | ManualPaymentWhereInput[]
    OR?: ManualPaymentWhereInput[]
    NOT?: ManualPaymentWhereInput | ManualPaymentWhereInput[]
    id?: StringFilter<"ManualPayment"> | string
    referenceId?: StringFilter<"ManualPayment"> | string
    userId?: StringFilter<"ManualPayment"> | string
    tokenType?: EnumManualPaymentTokenTypeFilter<"ManualPayment"> | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFilter<"ManualPayment"> | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFilter<"ManualPayment"> | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: StringNullableFilter<"ManualPayment"> | string | null
    cashAppProof?: StringNullableFilter<"ManualPayment"> | string | null
    stablecoinType?: EnumStablecoinTypeNullableFilter<"ManualPayment"> | $Enums.StablecoinType | null
    senderAddress?: StringNullableFilter<"ManualPayment"> | string | null
    txHash?: StringNullableFilter<"ManualPayment"> | string | null
    blockchainChain?: EnumChainNullableFilter<"ManualPayment"> | $Enums.Chain | null
    status?: EnumManualPaymentStatusFilter<"ManualPayment"> | $Enums.ManualPaymentStatus
    verifiedBy?: StringNullableFilter<"ManualPayment"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    rejectionReason?: StringNullableFilter<"ManualPayment"> | string | null
    distributionTxHash?: StringNullableFilter<"ManualPayment"> | string | null
    distributedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    userNotes?: StringNullableFilter<"ManualPayment"> | string | null
    adminNotes?: StringNullableFilter<"ManualPayment"> | string | null
    createdAt?: DateTimeFilter<"ManualPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ManualPayment"> | Date | string
    expiresAt?: DateTimeFilter<"ManualPayment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ManualPaymentOrderByWithRelationInput = {
    id?: SortOrder
    referenceId?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    deliveryChain?: SortOrder
    paymentMethod?: SortOrder
    paymentAmount?: SortOrder
    cashAppCashtag?: SortOrderInput | SortOrder
    cashAppProof?: SortOrderInput | SortOrder
    stablecoinType?: SortOrderInput | SortOrder
    senderAddress?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    blockchainChain?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    distributionTxHash?: SortOrderInput | SortOrder
    distributedAt?: SortOrderInput | SortOrder
    userNotes?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ManualPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    referenceId?: string
    AND?: ManualPaymentWhereInput | ManualPaymentWhereInput[]
    OR?: ManualPaymentWhereInput[]
    NOT?: ManualPaymentWhereInput | ManualPaymentWhereInput[]
    userId?: StringFilter<"ManualPayment"> | string
    tokenType?: EnumManualPaymentTokenTypeFilter<"ManualPayment"> | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFilter<"ManualPayment"> | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFilter<"ManualPayment"> | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: StringNullableFilter<"ManualPayment"> | string | null
    cashAppProof?: StringNullableFilter<"ManualPayment"> | string | null
    stablecoinType?: EnumStablecoinTypeNullableFilter<"ManualPayment"> | $Enums.StablecoinType | null
    senderAddress?: StringNullableFilter<"ManualPayment"> | string | null
    txHash?: StringNullableFilter<"ManualPayment"> | string | null
    blockchainChain?: EnumChainNullableFilter<"ManualPayment"> | $Enums.Chain | null
    status?: EnumManualPaymentStatusFilter<"ManualPayment"> | $Enums.ManualPaymentStatus
    verifiedBy?: StringNullableFilter<"ManualPayment"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    rejectionReason?: StringNullableFilter<"ManualPayment"> | string | null
    distributionTxHash?: StringNullableFilter<"ManualPayment"> | string | null
    distributedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    userNotes?: StringNullableFilter<"ManualPayment"> | string | null
    adminNotes?: StringNullableFilter<"ManualPayment"> | string | null
    createdAt?: DateTimeFilter<"ManualPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ManualPayment"> | Date | string
    expiresAt?: DateTimeFilter<"ManualPayment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "referenceId">

  export type ManualPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    referenceId?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    deliveryChain?: SortOrder
    paymentMethod?: SortOrder
    paymentAmount?: SortOrder
    cashAppCashtag?: SortOrderInput | SortOrder
    cashAppProof?: SortOrderInput | SortOrder
    stablecoinType?: SortOrderInput | SortOrder
    senderAddress?: SortOrderInput | SortOrder
    txHash?: SortOrderInput | SortOrder
    blockchainChain?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    distributionTxHash?: SortOrderInput | SortOrder
    distributedAt?: SortOrderInput | SortOrder
    userNotes?: SortOrderInput | SortOrder
    adminNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    _count?: ManualPaymentCountOrderByAggregateInput
    _avg?: ManualPaymentAvgOrderByAggregateInput
    _max?: ManualPaymentMaxOrderByAggregateInput
    _min?: ManualPaymentMinOrderByAggregateInput
    _sum?: ManualPaymentSumOrderByAggregateInput
  }

  export type ManualPaymentScalarWhereWithAggregatesInput = {
    AND?: ManualPaymentScalarWhereWithAggregatesInput | ManualPaymentScalarWhereWithAggregatesInput[]
    OR?: ManualPaymentScalarWhereWithAggregatesInput[]
    NOT?: ManualPaymentScalarWhereWithAggregatesInput | ManualPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ManualPayment"> | string
    referenceId?: StringWithAggregatesFilter<"ManualPayment"> | string
    userId?: StringWithAggregatesFilter<"ManualPayment"> | string
    tokenType?: EnumManualPaymentTokenTypeWithAggregatesFilter<"ManualPayment"> | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalWithAggregatesFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalWithAggregatesFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainWithAggregatesFilter<"ManualPayment"> | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodWithAggregatesFilter<"ManualPayment"> | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalWithAggregatesFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    cashAppProof?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    stablecoinType?: EnumStablecoinTypeNullableWithAggregatesFilter<"ManualPayment"> | $Enums.StablecoinType | null
    senderAddress?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    txHash?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    blockchainChain?: EnumChainNullableWithAggregatesFilter<"ManualPayment"> | $Enums.Chain | null
    status?: EnumManualPaymentStatusWithAggregatesFilter<"ManualPayment"> | $Enums.ManualPaymentStatus
    verifiedBy?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"ManualPayment"> | Date | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    distributionTxHash?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    distributedAt?: DateTimeNullableWithAggregatesFilter<"ManualPayment"> | Date | string | null
    userNotes?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    adminNotes?: StringNullableWithAggregatesFilter<"ManualPayment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ManualPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ManualPayment"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"ManualPayment"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MintReceiptCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutMintReceiptsInput
  }

  export type MintReceiptUncheckedCreateInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type MintReceiptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMintReceiptsNestedInput
  }

  export type MintReceiptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MintReceiptCreateManyInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type MintReceiptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MintReceiptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptCreateInput = {
    id?: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutRedeemReceiptsInput
  }

  export type RedeemReceiptUncheckedCreateInput = {
    id?: string
    userId: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type RedeemReceiptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRedeemReceiptsNestedInput
  }

  export type RedeemReceiptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptCreateManyInput = {
    id?: string
    userId: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type RedeemReceiptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReserveSnapshotCreateInput = {
    id?: string
    totalUsdReserve: Decimal | DecimalJsLike | number | string
    totalSupply: Decimal | DecimalJsLike | number | string
    bscSupply: Decimal | DecimalJsLike | number | string
    polygonSupply: Decimal | DecimalJsLike | number | string
    stripeBalance: Decimal | DecimalJsLike | number | string
    cashAppBalance: Decimal | DecimalJsLike | number | string
    bankBalance: Decimal | DecimalJsLike | number | string
    collateralRatio: Decimal | DecimalJsLike | number | string
    isHealthy?: boolean
    blockNumber: number
    timestamp?: Date | string
  }

  export type ReserveSnapshotUncheckedCreateInput = {
    id?: string
    totalUsdReserve: Decimal | DecimalJsLike | number | string
    totalSupply: Decimal | DecimalJsLike | number | string
    bscSupply: Decimal | DecimalJsLike | number | string
    polygonSupply: Decimal | DecimalJsLike | number | string
    stripeBalance: Decimal | DecimalJsLike | number | string
    cashAppBalance: Decimal | DecimalJsLike | number | string
    bankBalance: Decimal | DecimalJsLike | number | string
    collateralRatio: Decimal | DecimalJsLike | number | string
    isHealthy?: boolean
    blockNumber: number
    timestamp?: Date | string
  }

  export type ReserveSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalUsdReserve?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFieldUpdateOperationsInput | boolean
    blockNumber?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReserveSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalUsdReserve?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFieldUpdateOperationsInput | boolean
    blockNumber?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReserveSnapshotCreateManyInput = {
    id?: string
    totalUsdReserve: Decimal | DecimalJsLike | number | string
    totalSupply: Decimal | DecimalJsLike | number | string
    bscSupply: Decimal | DecimalJsLike | number | string
    polygonSupply: Decimal | DecimalJsLike | number | string
    stripeBalance: Decimal | DecimalJsLike | number | string
    cashAppBalance: Decimal | DecimalJsLike | number | string
    bankBalance: Decimal | DecimalJsLike | number | string
    collateralRatio: Decimal | DecimalJsLike | number | string
    isHealthy?: boolean
    blockNumber: number
    timestamp?: Date | string
  }

  export type ReserveSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalUsdReserve?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFieldUpdateOperationsInput | boolean
    blockNumber?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReserveSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalUsdReserve?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bscSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    polygonSupply?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    stripeBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    collateralRatio?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isHealthy?: BoolFieldUpdateOperationsInput | boolean
    blockNumber?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: $Enums.AuditAction
    entityType: string
    entityId: string
    userAddress?: string | null
    adminAddress?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: $Enums.AuditAction
    entityType: string
    entityId: string
    userAddress?: string | null
    adminAddress?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userAddress?: NullableStringFieldUpdateOperationsInput | string | null
    adminAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userAddress?: NullableStringFieldUpdateOperationsInput | string | null
    adminAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: $Enums.AuditAction
    entityType: string
    entityId: string
    userAddress?: string | null
    adminAddress?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userAddress?: NullableStringFieldUpdateOperationsInput | string | null
    adminAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userAddress?: NullableStringFieldUpdateOperationsInput | string | null
    adminAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    updatedBy: string
    updatedAt?: Date | string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    updatedBy: string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigCreateManyInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    updatedBy: string
    updatedAt?: Date | string
  }

  export type SystemConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DaoMembershipCreateInput = {
    id?: string
    membershipTier?: $Enums.MembershipTier
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    totalStaked?: Decimal | DecimalJsLike | number | string
    totalTransactions?: number
    totalVolume?: Decimal | DecimalJsLike | number | string
    referralCount?: number
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
    user: UserCreateNestedOneWithoutDaoMembershipInput
  }

  export type DaoMembershipUncheckedCreateInput = {
    id?: string
    userId: string
    membershipTier?: $Enums.MembershipTier
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    totalStaked?: Decimal | DecimalJsLike | number | string
    totalTransactions?: number
    totalVolume?: Decimal | DecimalJsLike | number | string
    referralCount?: number
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
  }

  export type DaoMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDaoMembershipNestedInput
  }

  export type DaoMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DaoMembershipCreateManyInput = {
    id?: string
    userId: string
    membershipTier?: $Enums.MembershipTier
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    totalStaked?: Decimal | DecimalJsLike | number | string
    totalTransactions?: number
    totalVolume?: Decimal | DecimalJsLike | number | string
    referralCount?: number
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
  }

  export type DaoMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DaoMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BadgeCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity?: $Enums.BadgeRarity
    requirements: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    userBadges?: UserBadgeCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity?: $Enums.BadgeRarity
    requirements: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    userBadges?: UserBadgeUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    userBadges?: UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeCreateManyInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity?: $Enums.BadgeRarity
    requirements: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type UserBadgeCreateInput = {
    id?: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
    user: UserCreateNestedOneWithoutUserBadgesInput
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type UserBadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBadgeCreateManyInput = {
    id?: string
    userId: string
    badgeId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type UserBadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminRoleCreateInput = {
    id?: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutAdminRolesInput
  }

  export type AdminRoleUncheckedCreateInput = {
    id?: string
    userId: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutAdminRolesNestedInput
  }

  export type AdminRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleCreateManyInput = {
    id?: string
    userId: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type UserSessionCreateInput = {
    id?: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    userId?: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    isSent?: boolean
    priority?: $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    readAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    isSent?: boolean
    priority?: $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    readAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isSent?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isSent?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId?: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    actionUrl?: string | null
    isRead?: boolean
    isSent?: boolean
    priority?: $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    readAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isSent?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isSent?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralCreateInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCode: string
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: Decimal | DecimalJsLike | number | string
    refereeReward?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    completedAt?: Date | string | null
    claimedAt?: Date | string | null
  }

  export type ReferralUncheckedCreateInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCode: string
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: Decimal | DecimalJsLike | number | string
    refereeReward?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    completedAt?: Date | string | null
    claimedAt?: Date | string | null
  }

  export type ReferralUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isRewardClaimed?: BoolFieldUpdateOperationsInput | boolean
    referrerReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isRewardClaimed?: BoolFieldUpdateOperationsInput | boolean
    referrerReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralCreateManyInput = {
    id?: string
    referrerId: string
    refereeId: string
    referralCode: string
    isActive?: boolean
    isRewardClaimed?: boolean
    referrerReward?: Decimal | DecimalJsLike | number | string
    refereeReward?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    completedAt?: Date | string | null
    claimedAt?: Date | string | null
  }

  export type ReferralUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isRewardClaimed?: BoolFieldUpdateOperationsInput | boolean
    referrerReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    referrerId?: StringFieldUpdateOperationsInput | string
    refereeId?: StringFieldUpdateOperationsInput | string
    referralCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isRewardClaimed?: BoolFieldUpdateOperationsInput | boolean
    referrerReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refereeReward?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ManualPaymentCreateInput = {
    id?: string
    referenceId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutManualPaymentsInput
  }

  export type ManualPaymentUncheckedCreateInput = {
    id?: string
    referenceId: string
    userId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type ManualPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutManualPaymentsNestedInput
  }

  export type ManualPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualPaymentCreateManyInput = {
    id?: string
    referenceId: string
    userId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type ManualPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumChainNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel> | null
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    not?: NestedEnumChainNullableFilter<$PrismaModel> | $Enums.Chain | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumKycStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.KycStatus | EnumKycStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKycStatusFilter<$PrismaModel> | $Enums.KycStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MintReceiptListRelationFilter = {
    every?: MintReceiptWhereInput
    some?: MintReceiptWhereInput
    none?: MintReceiptWhereInput
  }

  export type RedeemReceiptListRelationFilter = {
    every?: RedeemReceiptWhereInput
    some?: RedeemReceiptWhereInput
    none?: RedeemReceiptWhereInput
  }

  export type DaoMembershipNullableScalarRelationFilter = {
    is?: DaoMembershipWhereInput | null
    isNot?: DaoMembershipWhereInput | null
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type AdminRoleListRelationFilter = {
    every?: AdminRoleWhereInput
    some?: AdminRoleWhereInput
    none?: AdminRoleWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type ManualPaymentListRelationFilter = {
    every?: ManualPaymentWhereInput
    some?: ManualPaymentWhereInput
    none?: ManualPaymentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MintReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RedeemReceiptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ManualPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    appleId?: SortOrder
    preferredChain?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    kycStatus?: SortOrder
    kycSubmittedAt?: SortOrder
    kycVerifiedAt?: SortOrder
    kycDocuments?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    appleId?: SortOrder
    preferredChain?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    kycStatus?: SortOrder
    kycSubmittedAt?: SortOrder
    kycVerifiedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayName?: SortOrder
    avatar?: SortOrder
    bio?: SortOrder
    location?: SortOrder
    website?: SortOrder
    twitter?: SortOrder
    discord?: SortOrder
    googleId?: SortOrder
    facebookId?: SortOrder
    appleId?: SortOrder
    preferredChain?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    darkMode?: SortOrder
    language?: SortOrder
    kycStatus?: SortOrder
    kycSubmittedAt?: SortOrder
    kycVerifiedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumChainNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel> | null
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    not?: NestedEnumChainNullableWithAggregatesFilter<$PrismaModel> | $Enums.Chain | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumChainNullableFilter<$PrismaModel>
    _max?: NestedEnumChainNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumKycStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KycStatus | EnumKycStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKycStatusWithAggregatesFilter<$PrismaModel> | $Enums.KycStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKycStatusFilter<$PrismaModel>
    _max?: NestedEnumKycStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumChainFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel>
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    not?: NestedEnumChainFilter<$PrismaModel> | $Enums.Chain
  }

  export type EnumMintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MintStatus | EnumMintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMintStatusFilter<$PrismaModel> | $Enums.MintStatus
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MintReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    tokenAmount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    paymentHash?: SortOrder
    txHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type MintReceiptAvgOrderByAggregateInput = {
    amount?: SortOrder
    tokenAmount?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
  }

  export type MintReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    tokenAmount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    paymentHash?: SortOrder
    txHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type MintReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    tokenAmount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    paymentHash?: SortOrder
    txHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type MintReceiptSumOrderByAggregateInput = {
    amount?: SortOrder
    tokenAmount?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumChainWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel>
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    not?: NestedEnumChainWithAggregatesFilter<$PrismaModel> | $Enums.Chain
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChainFilter<$PrismaModel>
    _max?: NestedEnumChainFilter<$PrismaModel>
  }

  export type EnumMintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MintStatus | EnumMintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMintStatusWithAggregatesFilter<$PrismaModel> | $Enums.MintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMintStatusFilter<$PrismaModel>
    _max?: NestedEnumMintStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRedeemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RedeemStatus | EnumRedeemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRedeemStatusFilter<$PrismaModel> | $Enums.RedeemStatus
  }

  export type RedeemReceiptCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenAmount?: SortOrder
    amount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentAddress?: SortOrder
    burnTxHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    payoutId?: SortOrder
    payoutHash?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type RedeemReceiptAvgOrderByAggregateInput = {
    tokenAmount?: SortOrder
    amount?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
  }

  export type RedeemReceiptMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenAmount?: SortOrder
    amount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentAddress?: SortOrder
    burnTxHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    payoutId?: SortOrder
    payoutHash?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type RedeemReceiptMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenAmount?: SortOrder
    amount?: SortOrder
    chain?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentAddress?: SortOrder
    burnTxHash?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    payoutId?: SortOrder
    payoutHash?: SortOrder
    receipt?: SortOrder
    signature?: SortOrder
    nonce?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type RedeemReceiptSumOrderByAggregateInput = {
    tokenAmount?: SortOrder
    amount?: SortOrder
    blockNumber?: SortOrder
    gasUsed?: SortOrder
  }

  export type EnumRedeemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RedeemStatus | EnumRedeemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRedeemStatusWithAggregatesFilter<$PrismaModel> | $Enums.RedeemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRedeemStatusFilter<$PrismaModel>
    _max?: NestedEnumRedeemStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ReserveSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    isHealthy?: SortOrder
    blockNumber?: SortOrder
    timestamp?: SortOrder
  }

  export type ReserveSnapshotAvgOrderByAggregateInput = {
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    blockNumber?: SortOrder
  }

  export type ReserveSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    isHealthy?: SortOrder
    blockNumber?: SortOrder
    timestamp?: SortOrder
  }

  export type ReserveSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    isHealthy?: SortOrder
    blockNumber?: SortOrder
    timestamp?: SortOrder
  }

  export type ReserveSnapshotSumOrderByAggregateInput = {
    totalUsdReserve?: SortOrder
    totalSupply?: SortOrder
    bscSupply?: SortOrder
    polygonSupply?: SortOrder
    stripeBalance?: SortOrder
    cashAppBalance?: SortOrder
    bankBalance?: SortOrder
    collateralRatio?: SortOrder
    blockNumber?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userAddress?: SortOrder
    adminAddress?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    metadata?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userAddress?: SortOrder
    adminAddress?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userAddress?: SortOrder
    adminAddress?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    updatedBy?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    updatedBy?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    updatedBy?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMembershipTierFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipTier | EnumMembershipTierFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipTierFilter<$PrismaModel> | $Enums.MembershipTier
  }

  export type DaoMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    membershipTier?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    isFounder?: SortOrder
  }

  export type DaoMembershipAvgOrderByAggregateInput = {
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
  }

  export type DaoMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    membershipTier?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    isFounder?: SortOrder
  }

  export type DaoMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    membershipTier?: SortOrder
    joinedAt?: SortOrder
    lastActiveAt?: SortOrder
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    isFounder?: SortOrder
  }

  export type DaoMembershipSumOrderByAggregateInput = {
    totalStaked?: SortOrder
    totalTransactions?: SortOrder
    totalVolume?: SortOrder
    referralCount?: SortOrder
  }

  export type EnumMembershipTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipTier | EnumMembershipTierFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipTierWithAggregatesFilter<$PrismaModel> | $Enums.MembershipTier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMembershipTierFilter<$PrismaModel>
    _max?: NestedEnumMembershipTierFilter<$PrismaModel>
  }

  export type EnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type EnumBadgeRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeRarity | EnumBadgeRarityFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeRarityFilter<$PrismaModel> | $Enums.BadgeRarity
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    requirements?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    category?: SortOrder
    rarity?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
  }

  export type EnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type EnumBadgeRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeRarity | EnumBadgeRarityFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeRarityWithAggregatesFilter<$PrismaModel> | $Enums.BadgeRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeRarityFilter<$PrismaModel>
    _max?: NestedEnumBadgeRarityFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BadgeScalarRelationFilter = {
    is?: BadgeWhereInput
    isNot?: BadgeWhereInput
  }

  export type UserBadgeUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: string
  }

  export type UserBadgeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    progress?: SortOrder
    isVisible?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    isVisible?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    isVisible?: SortOrder
  }

  export type EnumAdminRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRoleType | EnumAdminRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleTypeFilter<$PrismaModel> | $Enums.AdminRoleType
  }

  export type AdminRoleUserIdRoleCompoundUniqueInput = {
    userId: string
    role: $Enums.AdminRoleType
  }

  export type AdminRoleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
  }

  export type AdminRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type AdminRoleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    grantedBy?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type EnumAdminRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRoleType | EnumAdminRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.AdminRoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleTypeFilter<$PrismaModel>
  }

  export type EnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionHash?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    loginMethod?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type EnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    isSent?: SortOrder
    priority?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    isSent?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    actionUrl?: SortOrder
    isRead?: SortOrder
    isSent?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    sentAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type ReferralCountOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCode?: SortOrder
    isActive?: SortOrder
    isRewardClaimed?: SortOrder
    referrerReward?: SortOrder
    refereeReward?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    claimedAt?: SortOrder
  }

  export type ReferralAvgOrderByAggregateInput = {
    referrerReward?: SortOrder
    refereeReward?: SortOrder
  }

  export type ReferralMaxOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCode?: SortOrder
    isActive?: SortOrder
    isRewardClaimed?: SortOrder
    referrerReward?: SortOrder
    refereeReward?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    claimedAt?: SortOrder
  }

  export type ReferralMinOrderByAggregateInput = {
    id?: SortOrder
    referrerId?: SortOrder
    refereeId?: SortOrder
    referralCode?: SortOrder
    isActive?: SortOrder
    isRewardClaimed?: SortOrder
    referrerReward?: SortOrder
    refereeReward?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    claimedAt?: SortOrder
  }

  export type ReferralSumOrderByAggregateInput = {
    referrerReward?: SortOrder
    refereeReward?: SortOrder
  }

  export type EnumManualPaymentTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentTokenType | EnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel> | $Enums.ManualPaymentTokenType
  }

  export type EnumManualPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentMethod | EnumManualPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentMethodFilter<$PrismaModel> | $Enums.ManualPaymentMethod
  }

  export type EnumStablecoinTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StablecoinType | EnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel> | $Enums.StablecoinType | null
  }

  export type EnumManualPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentStatus | EnumManualPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentStatusFilter<$PrismaModel> | $Enums.ManualPaymentStatus
  }

  export type ManualPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    deliveryChain?: SortOrder
    paymentMethod?: SortOrder
    paymentAmount?: SortOrder
    cashAppCashtag?: SortOrder
    cashAppProof?: SortOrder
    stablecoinType?: SortOrder
    senderAddress?: SortOrder
    txHash?: SortOrder
    blockchainChain?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    rejectionReason?: SortOrder
    distributionTxHash?: SortOrder
    distributedAt?: SortOrder
    userNotes?: SortOrder
    adminNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ManualPaymentAvgOrderByAggregateInput = {
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    paymentAmount?: SortOrder
  }

  export type ManualPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    deliveryChain?: SortOrder
    paymentMethod?: SortOrder
    paymentAmount?: SortOrder
    cashAppCashtag?: SortOrder
    cashAppProof?: SortOrder
    stablecoinType?: SortOrder
    senderAddress?: SortOrder
    txHash?: SortOrder
    blockchainChain?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    rejectionReason?: SortOrder
    distributionTxHash?: SortOrder
    distributedAt?: SortOrder
    userNotes?: SortOrder
    adminNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ManualPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    deliveryChain?: SortOrder
    paymentMethod?: SortOrder
    paymentAmount?: SortOrder
    cashAppCashtag?: SortOrder
    cashAppProof?: SortOrder
    stablecoinType?: SortOrder
    senderAddress?: SortOrder
    txHash?: SortOrder
    blockchainChain?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    rejectionReason?: SortOrder
    distributionTxHash?: SortOrder
    distributedAt?: SortOrder
    userNotes?: SortOrder
    adminNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ManualPaymentSumOrderByAggregateInput = {
    requestedAmount?: SortOrder
    tokenAmount?: SortOrder
    paymentAmount?: SortOrder
  }

  export type EnumManualPaymentTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentTokenType | EnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentTokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel>
  }

  export type EnumManualPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentMethod | EnumManualPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentMethodFilter<$PrismaModel>
  }

  export type EnumStablecoinTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StablecoinType | EnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStablecoinTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StablecoinType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel>
  }

  export type EnumManualPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentStatus | EnumManualPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentStatusFilter<$PrismaModel>
  }

  export type MintReceiptCreateNestedManyWithoutUserInput = {
    create?: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput> | MintReceiptCreateWithoutUserInput[] | MintReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MintReceiptCreateOrConnectWithoutUserInput | MintReceiptCreateOrConnectWithoutUserInput[]
    createMany?: MintReceiptCreateManyUserInputEnvelope
    connect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
  }

  export type RedeemReceiptCreateNestedManyWithoutUserInput = {
    create?: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput> | RedeemReceiptCreateWithoutUserInput[] | RedeemReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RedeemReceiptCreateOrConnectWithoutUserInput | RedeemReceiptCreateOrConnectWithoutUserInput[]
    createMany?: RedeemReceiptCreateManyUserInputEnvelope
    connect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
  }

  export type DaoMembershipCreateNestedOneWithoutUserInput = {
    create?: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
    connectOrCreate?: DaoMembershipCreateOrConnectWithoutUserInput
    connect?: DaoMembershipWhereUniqueInput
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type AdminRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput> | AdminRoleCreateWithoutUserInput[] | AdminRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminRoleCreateOrConnectWithoutUserInput | AdminRoleCreateOrConnectWithoutUserInput[]
    createMany?: AdminRoleCreateManyUserInputEnvelope
    connect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type ManualPaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput> | ManualPaymentCreateWithoutUserInput[] | ManualPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ManualPaymentCreateOrConnectWithoutUserInput | ManualPaymentCreateOrConnectWithoutUserInput[]
    createMany?: ManualPaymentCreateManyUserInputEnvelope
    connect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
  }

  export type MintReceiptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput> | MintReceiptCreateWithoutUserInput[] | MintReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MintReceiptCreateOrConnectWithoutUserInput | MintReceiptCreateOrConnectWithoutUserInput[]
    createMany?: MintReceiptCreateManyUserInputEnvelope
    connect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
  }

  export type RedeemReceiptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput> | RedeemReceiptCreateWithoutUserInput[] | RedeemReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RedeemReceiptCreateOrConnectWithoutUserInput | RedeemReceiptCreateOrConnectWithoutUserInput[]
    createMany?: RedeemReceiptCreateManyUserInputEnvelope
    connect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
  }

  export type DaoMembershipUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
    connectOrCreate?: DaoMembershipCreateOrConnectWithoutUserInput
    connect?: DaoMembershipWhereUniqueInput
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type AdminRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput> | AdminRoleCreateWithoutUserInput[] | AdminRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminRoleCreateOrConnectWithoutUserInput | AdminRoleCreateOrConnectWithoutUserInput[]
    createMany?: AdminRoleCreateManyUserInputEnvelope
    connect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type ManualPaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput> | ManualPaymentCreateWithoutUserInput[] | ManualPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ManualPaymentCreateOrConnectWithoutUserInput | ManualPaymentCreateOrConnectWithoutUserInput[]
    createMany?: ManualPaymentCreateManyUserInputEnvelope
    connect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumChainFieldUpdateOperationsInput = {
    set?: $Enums.Chain | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumKycStatusFieldUpdateOperationsInput = {
    set?: $Enums.KycStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type MintReceiptUpdateManyWithoutUserNestedInput = {
    create?: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput> | MintReceiptCreateWithoutUserInput[] | MintReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MintReceiptCreateOrConnectWithoutUserInput | MintReceiptCreateOrConnectWithoutUserInput[]
    upsert?: MintReceiptUpsertWithWhereUniqueWithoutUserInput | MintReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MintReceiptCreateManyUserInputEnvelope
    set?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    disconnect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    delete?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    connect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    update?: MintReceiptUpdateWithWhereUniqueWithoutUserInput | MintReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MintReceiptUpdateManyWithWhereWithoutUserInput | MintReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MintReceiptScalarWhereInput | MintReceiptScalarWhereInput[]
  }

  export type RedeemReceiptUpdateManyWithoutUserNestedInput = {
    create?: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput> | RedeemReceiptCreateWithoutUserInput[] | RedeemReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RedeemReceiptCreateOrConnectWithoutUserInput | RedeemReceiptCreateOrConnectWithoutUserInput[]
    upsert?: RedeemReceiptUpsertWithWhereUniqueWithoutUserInput | RedeemReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RedeemReceiptCreateManyUserInputEnvelope
    set?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    disconnect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    delete?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    connect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    update?: RedeemReceiptUpdateWithWhereUniqueWithoutUserInput | RedeemReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RedeemReceiptUpdateManyWithWhereWithoutUserInput | RedeemReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RedeemReceiptScalarWhereInput | RedeemReceiptScalarWhereInput[]
  }

  export type DaoMembershipUpdateOneWithoutUserNestedInput = {
    create?: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
    connectOrCreate?: DaoMembershipCreateOrConnectWithoutUserInput
    upsert?: DaoMembershipUpsertWithoutUserInput
    disconnect?: DaoMembershipWhereInput | boolean
    delete?: DaoMembershipWhereInput | boolean
    connect?: DaoMembershipWhereUniqueInput
    update?: XOR<XOR<DaoMembershipUpdateToOneWithWhereWithoutUserInput, DaoMembershipUpdateWithoutUserInput>, DaoMembershipUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type AdminRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput> | AdminRoleCreateWithoutUserInput[] | AdminRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminRoleCreateOrConnectWithoutUserInput | AdminRoleCreateOrConnectWithoutUserInput[]
    upsert?: AdminRoleUpsertWithWhereUniqueWithoutUserInput | AdminRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminRoleCreateManyUserInputEnvelope
    set?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    disconnect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    delete?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    connect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    update?: AdminRoleUpdateWithWhereUniqueWithoutUserInput | AdminRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminRoleUpdateManyWithWhereWithoutUserInput | AdminRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminRoleScalarWhereInput | AdminRoleScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type ManualPaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput> | ManualPaymentCreateWithoutUserInput[] | ManualPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ManualPaymentCreateOrConnectWithoutUserInput | ManualPaymentCreateOrConnectWithoutUserInput[]
    upsert?: ManualPaymentUpsertWithWhereUniqueWithoutUserInput | ManualPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ManualPaymentCreateManyUserInputEnvelope
    set?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    disconnect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    delete?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    connect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    update?: ManualPaymentUpdateWithWhereUniqueWithoutUserInput | ManualPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ManualPaymentUpdateManyWithWhereWithoutUserInput | ManualPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ManualPaymentScalarWhereInput | ManualPaymentScalarWhereInput[]
  }

  export type MintReceiptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput> | MintReceiptCreateWithoutUserInput[] | MintReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MintReceiptCreateOrConnectWithoutUserInput | MintReceiptCreateOrConnectWithoutUserInput[]
    upsert?: MintReceiptUpsertWithWhereUniqueWithoutUserInput | MintReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MintReceiptCreateManyUserInputEnvelope
    set?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    disconnect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    delete?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    connect?: MintReceiptWhereUniqueInput | MintReceiptWhereUniqueInput[]
    update?: MintReceiptUpdateWithWhereUniqueWithoutUserInput | MintReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MintReceiptUpdateManyWithWhereWithoutUserInput | MintReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MintReceiptScalarWhereInput | MintReceiptScalarWhereInput[]
  }

  export type RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput> | RedeemReceiptCreateWithoutUserInput[] | RedeemReceiptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RedeemReceiptCreateOrConnectWithoutUserInput | RedeemReceiptCreateOrConnectWithoutUserInput[]
    upsert?: RedeemReceiptUpsertWithWhereUniqueWithoutUserInput | RedeemReceiptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RedeemReceiptCreateManyUserInputEnvelope
    set?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    disconnect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    delete?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    connect?: RedeemReceiptWhereUniqueInput | RedeemReceiptWhereUniqueInput[]
    update?: RedeemReceiptUpdateWithWhereUniqueWithoutUserInput | RedeemReceiptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RedeemReceiptUpdateManyWithWhereWithoutUserInput | RedeemReceiptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RedeemReceiptScalarWhereInput | RedeemReceiptScalarWhereInput[]
  }

  export type DaoMembershipUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
    connectOrCreate?: DaoMembershipCreateOrConnectWithoutUserInput
    upsert?: DaoMembershipUpsertWithoutUserInput
    disconnect?: DaoMembershipWhereInput | boolean
    delete?: DaoMembershipWhereInput | boolean
    connect?: DaoMembershipWhereUniqueInput
    update?: XOR<XOR<DaoMembershipUpdateToOneWithWhereWithoutUserInput, DaoMembershipUpdateWithoutUserInput>, DaoMembershipUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type AdminRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput> | AdminRoleCreateWithoutUserInput[] | AdminRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminRoleCreateOrConnectWithoutUserInput | AdminRoleCreateOrConnectWithoutUserInput[]
    upsert?: AdminRoleUpsertWithWhereUniqueWithoutUserInput | AdminRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminRoleCreateManyUserInputEnvelope
    set?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    disconnect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    delete?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    connect?: AdminRoleWhereUniqueInput | AdminRoleWhereUniqueInput[]
    update?: AdminRoleUpdateWithWhereUniqueWithoutUserInput | AdminRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminRoleUpdateManyWithWhereWithoutUserInput | AdminRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminRoleScalarWhereInput | AdminRoleScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type ManualPaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput> | ManualPaymentCreateWithoutUserInput[] | ManualPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ManualPaymentCreateOrConnectWithoutUserInput | ManualPaymentCreateOrConnectWithoutUserInput[]
    upsert?: ManualPaymentUpsertWithWhereUniqueWithoutUserInput | ManualPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ManualPaymentCreateManyUserInputEnvelope
    set?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    disconnect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    delete?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    connect?: ManualPaymentWhereUniqueInput | ManualPaymentWhereUniqueInput[]
    update?: ManualPaymentUpdateWithWhereUniqueWithoutUserInput | ManualPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ManualPaymentUpdateManyWithWhereWithoutUserInput | ManualPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ManualPaymentScalarWhereInput | ManualPaymentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMintReceiptsInput = {
    create?: XOR<UserCreateWithoutMintReceiptsInput, UserUncheckedCreateWithoutMintReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMintReceiptsInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumChainFieldUpdateOperationsInput = {
    set?: $Enums.Chain
  }

  export type EnumMintStatusFieldUpdateOperationsInput = {
    set?: $Enums.MintStatus
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMintReceiptsNestedInput = {
    create?: XOR<UserCreateWithoutMintReceiptsInput, UserUncheckedCreateWithoutMintReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMintReceiptsInput
    upsert?: UserUpsertWithoutMintReceiptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMintReceiptsInput, UserUpdateWithoutMintReceiptsInput>, UserUncheckedUpdateWithoutMintReceiptsInput>
  }

  export type UserCreateNestedOneWithoutRedeemReceiptsInput = {
    create?: XOR<UserCreateWithoutRedeemReceiptsInput, UserUncheckedCreateWithoutRedeemReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRedeemReceiptsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRedeemStatusFieldUpdateOperationsInput = {
    set?: $Enums.RedeemStatus
  }

  export type UserUpdateOneRequiredWithoutRedeemReceiptsNestedInput = {
    create?: XOR<UserCreateWithoutRedeemReceiptsInput, UserUncheckedCreateWithoutRedeemReceiptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRedeemReceiptsInput
    upsert?: UserUpsertWithoutRedeemReceiptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRedeemReceiptsInput, UserUpdateWithoutRedeemReceiptsInput>, UserUncheckedUpdateWithoutRedeemReceiptsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAuditActionFieldUpdateOperationsInput = {
    set?: $Enums.AuditAction
  }

  export type UserCreateNestedOneWithoutDaoMembershipInput = {
    create?: XOR<UserCreateWithoutDaoMembershipInput, UserUncheckedCreateWithoutDaoMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutDaoMembershipInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMembershipTierFieldUpdateOperationsInput = {
    set?: $Enums.MembershipTier
  }

  export type UserUpdateOneRequiredWithoutDaoMembershipNestedInput = {
    create?: XOR<UserCreateWithoutDaoMembershipInput, UserUncheckedCreateWithoutDaoMembershipInput>
    connectOrCreate?: UserCreateOrConnectWithoutDaoMembershipInput
    upsert?: UserUpsertWithoutDaoMembershipInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDaoMembershipInput, UserUpdateWithoutDaoMembershipInput>, UserUncheckedUpdateWithoutDaoMembershipInput>
  }

  export type UserBadgeCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type EnumBadgeCategoryFieldUpdateOperationsInput = {
    set?: $Enums.BadgeCategory
  }

  export type EnumBadgeRarityFieldUpdateOperationsInput = {
    set?: $Enums.BadgeRarity
  }

  export type UserBadgeUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type BadgeCreateNestedOneWithoutUserBadgesInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBadgesInput
    upsert?: UserUpsertWithoutUserBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserBadgesInput, UserUpdateWithoutUserBadgesInput>, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type BadgeUpdateOneRequiredWithoutUserBadgesNestedInput = {
    create?: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUserBadgesInput
    upsert?: BadgeUpsertWithoutUserBadgesInput
    connect?: BadgeWhereUniqueInput
    update?: XOR<XOR<BadgeUpdateToOneWithWhereWithoutUserBadgesInput, BadgeUpdateWithoutUserBadgesInput>, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserCreateNestedOneWithoutAdminRolesInput = {
    create?: XOR<UserCreateWithoutAdminRolesInput, UserUncheckedCreateWithoutAdminRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminRolesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAdminRoleTypeFieldUpdateOperationsInput = {
    set?: $Enums.AdminRoleType
  }

  export type UserUpdateOneRequiredWithoutAdminRolesNestedInput = {
    create?: XOR<UserCreateWithoutAdminRolesInput, UserUncheckedCreateWithoutAdminRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminRolesInput
    upsert?: UserUpsertWithoutAdminRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminRolesInput, UserUpdateWithoutAdminRolesInput>, UserUncheckedUpdateWithoutAdminRolesInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuthMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthMethod
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.NotificationPriority
  }

  export type UserCreateNestedOneWithoutManualPaymentsInput = {
    create?: XOR<UserCreateWithoutManualPaymentsInput, UserUncheckedCreateWithoutManualPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManualPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumManualPaymentTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.ManualPaymentTokenType
  }

  export type EnumManualPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.ManualPaymentMethod
  }

  export type NullableEnumStablecoinTypeFieldUpdateOperationsInput = {
    set?: $Enums.StablecoinType | null
  }

  export type EnumManualPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.ManualPaymentStatus
  }

  export type UserUpdateOneRequiredWithoutManualPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutManualPaymentsInput, UserUncheckedCreateWithoutManualPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManualPaymentsInput
    upsert?: UserUpsertWithoutManualPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManualPaymentsInput, UserUpdateWithoutManualPaymentsInput>, UserUncheckedUpdateWithoutManualPaymentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumChainNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel> | null
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    not?: NestedEnumChainNullableFilter<$PrismaModel> | $Enums.Chain | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumKycStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.KycStatus | EnumKycStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKycStatusFilter<$PrismaModel> | $Enums.KycStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumChainNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel> | null
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel> | null
    not?: NestedEnumChainNullableWithAggregatesFilter<$PrismaModel> | $Enums.Chain | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumChainNullableFilter<$PrismaModel>
    _max?: NestedEnumChainNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumKycStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KycStatus | EnumKycStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KycStatus[] | ListEnumKycStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKycStatusWithAggregatesFilter<$PrismaModel> | $Enums.KycStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKycStatusFilter<$PrismaModel>
    _max?: NestedEnumKycStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumChainFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel>
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    not?: NestedEnumChainFilter<$PrismaModel> | $Enums.Chain
  }

  export type NestedEnumMintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MintStatus | EnumMintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMintStatusFilter<$PrismaModel> | $Enums.MintStatus
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumChainWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Chain | EnumChainFieldRefInput<$PrismaModel>
    in?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    notIn?: $Enums.Chain[] | ListEnumChainFieldRefInput<$PrismaModel>
    not?: NestedEnumChainWithAggregatesFilter<$PrismaModel> | $Enums.Chain
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChainFilter<$PrismaModel>
    _max?: NestedEnumChainFilter<$PrismaModel>
  }

  export type NestedEnumMintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MintStatus | EnumMintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MintStatus[] | ListEnumMintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMintStatusWithAggregatesFilter<$PrismaModel> | $Enums.MintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMintStatusFilter<$PrismaModel>
    _max?: NestedEnumMintStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRedeemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RedeemStatus | EnumRedeemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRedeemStatusFilter<$PrismaModel> | $Enums.RedeemStatus
  }

  export type NestedEnumRedeemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RedeemStatus | EnumRedeemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RedeemStatus[] | ListEnumRedeemStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRedeemStatusWithAggregatesFilter<$PrismaModel> | $Enums.RedeemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRedeemStatusFilter<$PrismaModel>
    _max?: NestedEnumRedeemStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type NestedEnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }

  export type NestedEnumMembershipTierFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipTier | EnumMembershipTierFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipTierFilter<$PrismaModel> | $Enums.MembershipTier
  }

  export type NestedEnumMembershipTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipTier | EnumMembershipTierFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipTier[] | ListEnumMembershipTierFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipTierWithAggregatesFilter<$PrismaModel> | $Enums.MembershipTier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMembershipTierFilter<$PrismaModel>
    _max?: NestedEnumMembershipTierFilter<$PrismaModel>
  }

  export type NestedEnumBadgeCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryFilter<$PrismaModel> | $Enums.BadgeCategory
  }

  export type NestedEnumBadgeRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeRarity | EnumBadgeRarityFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeRarityFilter<$PrismaModel> | $Enums.BadgeRarity
  }

  export type NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeCategory | EnumBadgeCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeCategory[] | ListEnumBadgeCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeCategoryWithAggregatesFilter<$PrismaModel> | $Enums.BadgeCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeCategoryFilter<$PrismaModel>
    _max?: NestedEnumBadgeCategoryFilter<$PrismaModel>
  }

  export type NestedEnumBadgeRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BadgeRarity | EnumBadgeRarityFieldRefInput<$PrismaModel>
    in?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BadgeRarity[] | ListEnumBadgeRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumBadgeRarityWithAggregatesFilter<$PrismaModel> | $Enums.BadgeRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBadgeRarityFilter<$PrismaModel>
    _max?: NestedEnumBadgeRarityFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAdminRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRoleType | EnumAdminRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleTypeFilter<$PrismaModel> | $Enums.AdminRoleType
  }

  export type NestedEnumAdminRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminRoleType | EnumAdminRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminRoleType[] | ListEnumAdminRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.AdminRoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumAdminRoleTypeFilter<$PrismaModel>
  }

  export type NestedEnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type NestedEnumManualPaymentTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentTokenType | EnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel> | $Enums.ManualPaymentTokenType
  }

  export type NestedEnumManualPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentMethod | EnumManualPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentMethodFilter<$PrismaModel> | $Enums.ManualPaymentMethod
  }

  export type NestedEnumStablecoinTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StablecoinType | EnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel> | $Enums.StablecoinType | null
  }

  export type NestedEnumManualPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentStatus | EnumManualPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentStatusFilter<$PrismaModel> | $Enums.ManualPaymentStatus
  }

  export type NestedEnumManualPaymentTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentTokenType | EnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentTokenType[] | ListEnumManualPaymentTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentTokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentTokenTypeFilter<$PrismaModel>
  }

  export type NestedEnumManualPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentMethod | EnumManualPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentMethod[] | ListEnumManualPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumStablecoinTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StablecoinType | EnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StablecoinType[] | ListEnumStablecoinTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStablecoinTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.StablecoinType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumStablecoinTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumManualPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ManualPaymentStatus | EnumManualPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ManualPaymentStatus[] | ListEnumManualPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumManualPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ManualPaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumManualPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumManualPaymentStatusFilter<$PrismaModel>
  }

  export type MintReceiptCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type MintReceiptUncheckedCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type MintReceiptCreateOrConnectWithoutUserInput = {
    where: MintReceiptWhereUniqueInput
    create: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput>
  }

  export type MintReceiptCreateManyUserInputEnvelope = {
    data: MintReceiptCreateManyUserInput | MintReceiptCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RedeemReceiptCreateWithoutUserInput = {
    id?: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type RedeemReceiptUncheckedCreateWithoutUserInput = {
    id?: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type RedeemReceiptCreateOrConnectWithoutUserInput = {
    where: RedeemReceiptWhereUniqueInput
    create: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput>
  }

  export type RedeemReceiptCreateManyUserInputEnvelope = {
    data: RedeemReceiptCreateManyUserInput | RedeemReceiptCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DaoMembershipCreateWithoutUserInput = {
    id?: string
    membershipTier?: $Enums.MembershipTier
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    totalStaked?: Decimal | DecimalJsLike | number | string
    totalTransactions?: number
    totalVolume?: Decimal | DecimalJsLike | number | string
    referralCount?: number
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
  }

  export type DaoMembershipUncheckedCreateWithoutUserInput = {
    id?: string
    membershipTier?: $Enums.MembershipTier
    joinedAt?: Date | string
    lastActiveAt?: Date | string
    totalStaked?: Decimal | DecimalJsLike | number | string
    totalTransactions?: number
    totalVolume?: Decimal | DecimalJsLike | number | string
    referralCount?: number
    isActive?: boolean
    isPremium?: boolean
    isFounder?: boolean
  }

  export type DaoMembershipCreateOrConnectWithoutUserInput = {
    where: DaoMembershipWhereUniqueInput
    create: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
    badge: BadgeCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    id?: string
    badgeId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminRoleCreateWithoutUserInput = {
    id?: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUncheckedCreateWithoutUserInput = {
    id?: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleCreateOrConnectWithoutUserInput = {
    where: AdminRoleWhereUniqueInput
    create: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput>
  }

  export type AdminRoleCreateManyUserInputEnvelope = {
    data: AdminRoleCreateManyUserInput | AdminRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ManualPaymentCreateWithoutUserInput = {
    id?: string
    referenceId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type ManualPaymentUncheckedCreateWithoutUserInput = {
    id?: string
    referenceId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type ManualPaymentCreateOrConnectWithoutUserInput = {
    where: ManualPaymentWhereUniqueInput
    create: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput>
  }

  export type ManualPaymentCreateManyUserInputEnvelope = {
    data: ManualPaymentCreateManyUserInput | ManualPaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MintReceiptUpsertWithWhereUniqueWithoutUserInput = {
    where: MintReceiptWhereUniqueInput
    update: XOR<MintReceiptUpdateWithoutUserInput, MintReceiptUncheckedUpdateWithoutUserInput>
    create: XOR<MintReceiptCreateWithoutUserInput, MintReceiptUncheckedCreateWithoutUserInput>
  }

  export type MintReceiptUpdateWithWhereUniqueWithoutUserInput = {
    where: MintReceiptWhereUniqueInput
    data: XOR<MintReceiptUpdateWithoutUserInput, MintReceiptUncheckedUpdateWithoutUserInput>
  }

  export type MintReceiptUpdateManyWithWhereWithoutUserInput = {
    where: MintReceiptScalarWhereInput
    data: XOR<MintReceiptUpdateManyMutationInput, MintReceiptUncheckedUpdateManyWithoutUserInput>
  }

  export type MintReceiptScalarWhereInput = {
    AND?: MintReceiptScalarWhereInput | MintReceiptScalarWhereInput[]
    OR?: MintReceiptScalarWhereInput[]
    NOT?: MintReceiptScalarWhereInput | MintReceiptScalarWhereInput[]
    id?: StringFilter<"MintReceipt"> | string
    userId?: StringFilter<"MintReceipt"> | string
    amount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"MintReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"MintReceipt"> | $Enums.Chain
    status?: EnumMintStatusFilter<"MintReceipt"> | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFilter<"MintReceipt"> | $Enums.PaymentMethod
    paymentId?: StringFilter<"MintReceipt"> | string
    paymentHash?: StringNullableFilter<"MintReceipt"> | string | null
    txHash?: StringNullableFilter<"MintReceipt"> | string | null
    blockNumber?: IntNullableFilter<"MintReceipt"> | number | null
    gasUsed?: IntNullableFilter<"MintReceipt"> | number | null
    receipt?: StringFilter<"MintReceipt"> | string
    signature?: StringFilter<"MintReceipt"> | string
    nonce?: StringFilter<"MintReceipt"> | string
    createdAt?: DateTimeFilter<"MintReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"MintReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"MintReceipt"> | Date | string
  }

  export type RedeemReceiptUpsertWithWhereUniqueWithoutUserInput = {
    where: RedeemReceiptWhereUniqueInput
    update: XOR<RedeemReceiptUpdateWithoutUserInput, RedeemReceiptUncheckedUpdateWithoutUserInput>
    create: XOR<RedeemReceiptCreateWithoutUserInput, RedeemReceiptUncheckedCreateWithoutUserInput>
  }

  export type RedeemReceiptUpdateWithWhereUniqueWithoutUserInput = {
    where: RedeemReceiptWhereUniqueInput
    data: XOR<RedeemReceiptUpdateWithoutUserInput, RedeemReceiptUncheckedUpdateWithoutUserInput>
  }

  export type RedeemReceiptUpdateManyWithWhereWithoutUserInput = {
    where: RedeemReceiptScalarWhereInput
    data: XOR<RedeemReceiptUpdateManyMutationInput, RedeemReceiptUncheckedUpdateManyWithoutUserInput>
  }

  export type RedeemReceiptScalarWhereInput = {
    AND?: RedeemReceiptScalarWhereInput | RedeemReceiptScalarWhereInput[]
    OR?: RedeemReceiptScalarWhereInput[]
    NOT?: RedeemReceiptScalarWhereInput | RedeemReceiptScalarWhereInput[]
    id?: StringFilter<"RedeemReceipt"> | string
    userId?: StringFilter<"RedeemReceipt"> | string
    tokenAmount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"RedeemReceipt"> | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFilter<"RedeemReceipt"> | $Enums.Chain
    status?: EnumRedeemStatusFilter<"RedeemReceipt"> | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFilter<"RedeemReceipt"> | $Enums.PaymentMethod
    paymentAddress?: StringFilter<"RedeemReceipt"> | string
    burnTxHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    blockNumber?: IntNullableFilter<"RedeemReceipt"> | number | null
    gasUsed?: IntNullableFilter<"RedeemReceipt"> | number | null
    payoutId?: StringNullableFilter<"RedeemReceipt"> | string | null
    payoutHash?: StringNullableFilter<"RedeemReceipt"> | string | null
    receipt?: StringFilter<"RedeemReceipt"> | string
    signature?: StringFilter<"RedeemReceipt"> | string
    nonce?: StringFilter<"RedeemReceipt"> | string
    createdAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
    completedAt?: DateTimeNullableFilter<"RedeemReceipt"> | Date | string | null
    expiresAt?: DateTimeFilter<"RedeemReceipt"> | Date | string
  }

  export type DaoMembershipUpsertWithoutUserInput = {
    update: XOR<DaoMembershipUpdateWithoutUserInput, DaoMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<DaoMembershipCreateWithoutUserInput, DaoMembershipUncheckedCreateWithoutUserInput>
    where?: DaoMembershipWhereInput
  }

  export type DaoMembershipUpdateToOneWithWhereWithoutUserInput = {
    where?: DaoMembershipWhereInput
    data: XOR<DaoMembershipUpdateWithoutUserInput, DaoMembershipUncheckedUpdateWithoutUserInput>
  }

  export type DaoMembershipUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DaoMembershipUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    membershipTier?: EnumMembershipTierFieldUpdateOperationsInput | $Enums.MembershipTier
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActiveAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalStaked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalTransactions?: IntFieldUpdateOperationsInput | number
    totalVolume?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    referralCount?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    isFounder?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    id?: StringFilter<"UserBadge"> | string
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: StringFilter<"UserBadge"> | string
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    progress?: JsonNullableFilter<"UserBadge">
    isVisible?: BoolFilter<"UserBadge"> | boolean
  }

  export type AdminRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: AdminRoleWhereUniqueInput
    update: XOR<AdminRoleUpdateWithoutUserInput, AdminRoleUncheckedUpdateWithoutUserInput>
    create: XOR<AdminRoleCreateWithoutUserInput, AdminRoleUncheckedCreateWithoutUserInput>
  }

  export type AdminRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: AdminRoleWhereUniqueInput
    data: XOR<AdminRoleUpdateWithoutUserInput, AdminRoleUncheckedUpdateWithoutUserInput>
  }

  export type AdminRoleUpdateManyWithWhereWithoutUserInput = {
    where: AdminRoleScalarWhereInput
    data: XOR<AdminRoleUpdateManyMutationInput, AdminRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type AdminRoleScalarWhereInput = {
    AND?: AdminRoleScalarWhereInput | AdminRoleScalarWhereInput[]
    OR?: AdminRoleScalarWhereInput[]
    NOT?: AdminRoleScalarWhereInput | AdminRoleScalarWhereInput[]
    id?: StringFilter<"AdminRole"> | string
    userId?: StringFilter<"AdminRole"> | string
    role?: EnumAdminRoleTypeFilter<"AdminRole"> | $Enums.AdminRoleType
    grantedBy?: StringFilter<"AdminRole"> | string
    grantedAt?: DateTimeFilter<"AdminRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"AdminRole"> | Date | string | null
    isActive?: BoolFilter<"AdminRole"> | boolean
    permissions?: JsonFilter<"AdminRole">
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionHash?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    loginMethod?: EnumAuthMethodFilter<"UserSession"> | $Enums.AuthMethod
    isActive?: BoolFilter<"UserSession"> | boolean
    lastUsedAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type ManualPaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: ManualPaymentWhereUniqueInput
    update: XOR<ManualPaymentUpdateWithoutUserInput, ManualPaymentUncheckedUpdateWithoutUserInput>
    create: XOR<ManualPaymentCreateWithoutUserInput, ManualPaymentUncheckedCreateWithoutUserInput>
  }

  export type ManualPaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: ManualPaymentWhereUniqueInput
    data: XOR<ManualPaymentUpdateWithoutUserInput, ManualPaymentUncheckedUpdateWithoutUserInput>
  }

  export type ManualPaymentUpdateManyWithWhereWithoutUserInput = {
    where: ManualPaymentScalarWhereInput
    data: XOR<ManualPaymentUpdateManyMutationInput, ManualPaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type ManualPaymentScalarWhereInput = {
    AND?: ManualPaymentScalarWhereInput | ManualPaymentScalarWhereInput[]
    OR?: ManualPaymentScalarWhereInput[]
    NOT?: ManualPaymentScalarWhereInput | ManualPaymentScalarWhereInput[]
    id?: StringFilter<"ManualPayment"> | string
    referenceId?: StringFilter<"ManualPayment"> | string
    userId?: StringFilter<"ManualPayment"> | string
    tokenType?: EnumManualPaymentTokenTypeFilter<"ManualPayment"> | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFilter<"ManualPayment"> | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFilter<"ManualPayment"> | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFilter<"ManualPayment"> | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: StringNullableFilter<"ManualPayment"> | string | null
    cashAppProof?: StringNullableFilter<"ManualPayment"> | string | null
    stablecoinType?: EnumStablecoinTypeNullableFilter<"ManualPayment"> | $Enums.StablecoinType | null
    senderAddress?: StringNullableFilter<"ManualPayment"> | string | null
    txHash?: StringNullableFilter<"ManualPayment"> | string | null
    blockchainChain?: EnumChainNullableFilter<"ManualPayment"> | $Enums.Chain | null
    status?: EnumManualPaymentStatusFilter<"ManualPayment"> | $Enums.ManualPaymentStatus
    verifiedBy?: StringNullableFilter<"ManualPayment"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    rejectionReason?: StringNullableFilter<"ManualPayment"> | string | null
    distributionTxHash?: StringNullableFilter<"ManualPayment"> | string | null
    distributedAt?: DateTimeNullableFilter<"ManualPayment"> | Date | string | null
    userNotes?: StringNullableFilter<"ManualPayment"> | string | null
    adminNotes?: StringNullableFilter<"ManualPayment"> | string | null
    createdAt?: DateTimeFilter<"ManualPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ManualPayment"> | Date | string
    expiresAt?: DateTimeFilter<"ManualPayment"> | Date | string
  }

  export type UserCreateWithoutMintReceiptsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMintReceiptsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMintReceiptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMintReceiptsInput, UserUncheckedCreateWithoutMintReceiptsInput>
  }

  export type UserUpsertWithoutMintReceiptsInput = {
    update: XOR<UserUpdateWithoutMintReceiptsInput, UserUncheckedUpdateWithoutMintReceiptsInput>
    create: XOR<UserCreateWithoutMintReceiptsInput, UserUncheckedCreateWithoutMintReceiptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMintReceiptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMintReceiptsInput, UserUncheckedUpdateWithoutMintReceiptsInput>
  }

  export type UserUpdateWithoutMintReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMintReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRedeemReceiptsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRedeemReceiptsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRedeemReceiptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRedeemReceiptsInput, UserUncheckedCreateWithoutRedeemReceiptsInput>
  }

  export type UserUpsertWithoutRedeemReceiptsInput = {
    update: XOR<UserUpdateWithoutRedeemReceiptsInput, UserUncheckedUpdateWithoutRedeemReceiptsInput>
    create: XOR<UserCreateWithoutRedeemReceiptsInput, UserUncheckedCreateWithoutRedeemReceiptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRedeemReceiptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRedeemReceiptsInput, UserUncheckedUpdateWithoutRedeemReceiptsInput>
  }

  export type UserUpdateWithoutRedeemReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRedeemReceiptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDaoMembershipInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDaoMembershipInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDaoMembershipInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDaoMembershipInput, UserUncheckedCreateWithoutDaoMembershipInput>
  }

  export type UserUpsertWithoutDaoMembershipInput = {
    update: XOR<UserUpdateWithoutDaoMembershipInput, UserUncheckedUpdateWithoutDaoMembershipInput>
    create: XOR<UserCreateWithoutDaoMembershipInput, UserUncheckedCreateWithoutDaoMembershipInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDaoMembershipInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDaoMembershipInput, UserUncheckedUpdateWithoutDaoMembershipInput>
  }

  export type UserUpdateWithoutDaoMembershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDaoMembershipInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserBadgeCreateWithoutBadgeInput = {
    id?: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
    user: UserCreateNestedOneWithoutUserBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutBadgeInput = {
    id?: string
    userId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type UserBadgeCreateOrConnectWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeCreateManyBadgeInputEnvelope = {
    data: UserBadgeCreateManyBadgeInput | UserBadgeCreateManyBadgeInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutBadgeInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutBadgeInput>
  }

  export type UserCreateWithoutUserBadgesInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserBadgesInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
  }

  export type BadgeCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity?: $Enums.BadgeRarity
    requirements: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
  }

  export type BadgeUncheckedCreateWithoutUserBadgesInput = {
    id?: string
    name: string
    description: string
    icon: string
    category: $Enums.BadgeCategory
    rarity?: $Enums.BadgeRarity
    requirements: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: string
  }

  export type BadgeCreateOrConnectWithoutUserBadgesInput = {
    where: BadgeWhereUniqueInput
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
  }

  export type UserUpsertWithoutUserBadgesInput = {
    update: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<UserCreateWithoutUserBadgesInput, UserUncheckedCreateWithoutUserBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserBadgesInput, UserUncheckedUpdateWithoutUserBadgesInput>
  }

  export type UserUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BadgeUpsertWithoutUserBadgesInput = {
    update: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
    create: XOR<BadgeCreateWithoutUserBadgesInput, BadgeUncheckedCreateWithoutUserBadgesInput>
    where?: BadgeWhereInput
  }

  export type BadgeUpdateToOneWithWhereWithoutUserBadgesInput = {
    where?: BadgeWhereInput
    data: XOR<BadgeUpdateWithoutUserBadgesInput, BadgeUncheckedUpdateWithoutUserBadgesInput>
  }

  export type BadgeUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type BadgeUncheckedUpdateWithoutUserBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    category?: EnumBadgeCategoryFieldUpdateOperationsInput | $Enums.BadgeCategory
    rarity?: EnumBadgeRarityFieldUpdateOperationsInput | $Enums.BadgeRarity
    requirements?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutAdminRolesInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminRolesInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminRolesInput, UserUncheckedCreateWithoutAdminRolesInput>
  }

  export type UserUpsertWithoutAdminRolesInput = {
    update: XOR<UserUpdateWithoutAdminRolesInput, UserUncheckedUpdateWithoutAdminRolesInput>
    create: XOR<UserCreateWithoutAdminRolesInput, UserUncheckedCreateWithoutAdminRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminRolesInput, UserUncheckedUpdateWithoutAdminRolesInput>
  }

  export type UserUpdateWithoutAdminRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    manualPayments?: ManualPaymentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    manualPayments?: ManualPaymentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutManualPaymentsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManualPaymentsInput = {
    id?: string
    address: string
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayName?: string | null
    avatar?: string | null
    bio?: string | null
    location?: string | null
    website?: string | null
    twitter?: string | null
    discord?: string | null
    googleId?: string | null
    facebookId?: string | null
    appleId?: string | null
    preferredChain?: $Enums.Chain | null
    emailNotifications?: boolean
    pushNotifications?: boolean
    darkMode?: boolean
    language?: string
    kycStatus?: $Enums.KycStatus
    kycSubmittedAt?: Date | string | null
    kycVerifiedAt?: Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedCreateNestedManyWithoutUserInput
    redeemReceipts?: RedeemReceiptUncheckedCreateNestedManyWithoutUserInput
    daoMembership?: DaoMembershipUncheckedCreateNestedOneWithoutUserInput
    userBadges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    adminRoles?: AdminRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManualPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManualPaymentsInput, UserUncheckedCreateWithoutManualPaymentsInput>
  }

  export type UserUpsertWithoutManualPaymentsInput = {
    update: XOR<UserUpdateWithoutManualPaymentsInput, UserUncheckedUpdateWithoutManualPaymentsInput>
    create: XOR<UserCreateWithoutManualPaymentsInput, UserUncheckedCreateWithoutManualPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManualPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManualPaymentsInput, UserUncheckedUpdateWithoutManualPaymentsInput>
  }

  export type UserUpdateWithoutManualPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManualPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    discord?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    facebookId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    preferredChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    darkMode?: BoolFieldUpdateOperationsInput | boolean
    language?: StringFieldUpdateOperationsInput | string
    kycStatus?: EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
    kycSubmittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycVerifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycDocuments?: NullableJsonNullValueInput | InputJsonValue
    mintReceipts?: MintReceiptUncheckedUpdateManyWithoutUserNestedInput
    redeemReceipts?: RedeemReceiptUncheckedUpdateManyWithoutUserNestedInput
    daoMembership?: DaoMembershipUncheckedUpdateOneWithoutUserNestedInput
    userBadges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    adminRoles?: AdminRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MintReceiptCreateManyUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.MintStatus
    paymentMethod: $Enums.PaymentMethod
    paymentId: string
    paymentHash?: string | null
    txHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type RedeemReceiptCreateManyUserInput = {
    id?: string
    tokenAmount: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    chain: $Enums.Chain
    status: $Enums.RedeemStatus
    paymentMethod: $Enums.PaymentMethod
    paymentAddress: string
    burnTxHash?: string | null
    blockNumber?: number | null
    gasUsed?: number | null
    payoutId?: string | null
    payoutHash?: string | null
    receipt: string
    signature: string
    nonce: string
    createdAt?: Date | string
    completedAt?: Date | string | null
    expiresAt: Date | string
  }

  export type UserBadgeCreateManyUserInput = {
    id?: string
    badgeId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type AdminRoleCreateManyUserInput = {
    id?: string
    role: $Enums.AdminRoleType
    grantedBy: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    permissions: JsonNullValueInput | InputJsonValue
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    sessionHash: string
    ipAddress?: string | null
    userAgent?: string | null
    loginMethod: $Enums.AuthMethod
    isActive?: boolean
    lastUsedAt?: Date | string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type ManualPaymentCreateManyUserInput = {
    id?: string
    referenceId: string
    tokenType: $Enums.ManualPaymentTokenType
    requestedAmount: Decimal | DecimalJsLike | number | string
    tokenAmount: Decimal | DecimalJsLike | number | string
    deliveryChain: $Enums.Chain
    paymentMethod: $Enums.ManualPaymentMethod
    paymentAmount: Decimal | DecimalJsLike | number | string
    cashAppCashtag?: string | null
    cashAppProof?: string | null
    stablecoinType?: $Enums.StablecoinType | null
    senderAddress?: string | null
    txHash?: string | null
    blockchainChain?: $Enums.Chain | null
    status?: $Enums.ManualPaymentStatus
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    rejectionReason?: string | null
    distributionTxHash?: string | null
    distributedAt?: Date | string | null
    userNotes?: string | null
    adminNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type MintReceiptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MintReceiptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MintReceiptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumMintStatusFieldUpdateOperationsInput | $Enums.MintStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentHash?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedeemReceiptUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    chain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    status?: EnumRedeemStatusFieldUpdateOperationsInput | $Enums.RedeemStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentAddress?: StringFieldUpdateOperationsInput | string
    burnTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableIntFieldUpdateOperationsInput | number | null
    gasUsed?: NullableIntFieldUpdateOperationsInput | number | null
    payoutId?: NullableStringFieldUpdateOperationsInput | string | null
    payoutHash?: NullableStringFieldUpdateOperationsInput | string | null
    receipt?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    nonce?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    badge?: BadgeUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    badgeId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminRoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type AdminRoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumAdminRoleTypeFieldUpdateOperationsInput | $Enums.AdminRoleType
    grantedBy?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionHash?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    loginMethod?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualPaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualPaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManualPaymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    tokenType?: EnumManualPaymentTokenTypeFieldUpdateOperationsInput | $Enums.ManualPaymentTokenType
    requestedAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    deliveryChain?: EnumChainFieldUpdateOperationsInput | $Enums.Chain
    paymentMethod?: EnumManualPaymentMethodFieldUpdateOperationsInput | $Enums.ManualPaymentMethod
    paymentAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cashAppCashtag?: NullableStringFieldUpdateOperationsInput | string | null
    cashAppProof?: NullableStringFieldUpdateOperationsInput | string | null
    stablecoinType?: NullableEnumStablecoinTypeFieldUpdateOperationsInput | $Enums.StablecoinType | null
    senderAddress?: NullableStringFieldUpdateOperationsInput | string | null
    txHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockchainChain?: NullableEnumChainFieldUpdateOperationsInput | $Enums.Chain | null
    status?: EnumManualPaymentStatusFieldUpdateOperationsInput | $Enums.ManualPaymentStatus
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    distributionTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    distributedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userNotes?: NullableStringFieldUpdateOperationsInput | string | null
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyBadgeInput = {
    id?: string
    userId: string
    earnedAt?: Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: boolean
  }

  export type UserBadgeUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    isVisible?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}