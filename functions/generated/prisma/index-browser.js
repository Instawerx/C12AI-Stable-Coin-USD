
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  address: 'address',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  displayName: 'displayName',
  avatar: 'avatar',
  bio: 'bio',
  location: 'location',
  website: 'website',
  twitter: 'twitter',
  discord: 'discord',
  googleId: 'googleId',
  facebookId: 'facebookId',
  appleId: 'appleId',
  preferredChain: 'preferredChain',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  darkMode: 'darkMode',
  language: 'language',
  kycStatus: 'kycStatus',
  kycSubmittedAt: 'kycSubmittedAt',
  kycVerifiedAt: 'kycVerifiedAt',
  kycDocuments: 'kycDocuments'
};

exports.Prisma.MintReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  tokenAmount: 'tokenAmount',
  chain: 'chain',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  paymentHash: 'paymentHash',
  txHash: 'txHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  receipt: 'receipt',
  signature: 'signature',
  nonce: 'nonce',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RedeemReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenAmount: 'tokenAmount',
  amount: 'amount',
  chain: 'chain',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentAddress: 'paymentAddress',
  burnTxHash: 'burnTxHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  payoutId: 'payoutId',
  payoutHash: 'payoutHash',
  receipt: 'receipt',
  signature: 'signature',
  nonce: 'nonce',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ReserveSnapshotScalarFieldEnum = {
  id: 'id',
  totalUsdReserve: 'totalUsdReserve',
  totalSupply: 'totalSupply',
  bscSupply: 'bscSupply',
  polygonSupply: 'polygonSupply',
  stripeBalance: 'stripeBalance',
  cashAppBalance: 'cashAppBalance',
  bankBalance: 'bankBalance',
  collateralRatio: 'collateralRatio',
  isHealthy: 'isHealthy',
  blockNumber: 'blockNumber',
  timestamp: 'timestamp'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userAddress: 'userAddress',
  adminAddress: 'adminAddress',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  oldData: 'oldData',
  newData: 'newData',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt'
};

exports.Prisma.DaoMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  membershipTier: 'membershipTier',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt',
  totalStaked: 'totalStaked',
  totalTransactions: 'totalTransactions',
  totalVolume: 'totalVolume',
  referralCount: 'referralCount',
  isActive: 'isActive',
  isPremium: 'isPremium',
  isFounder: 'isFounder'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category',
  rarity: 'rarity',
  requirements: 'requirements',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt',
  progress: 'progress',
  isVisible: 'isVisible'
};

exports.Prisma.AdminRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  permissions: 'permissions'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionHash: 'sessionHash',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  loginMethod: 'loginMethod',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  isRead: 'isRead',
  isSent: 'isSent',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt',
  sentAt: 'sentAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  refereeId: 'refereeId',
  referralCode: 'referralCode',
  isActive: 'isActive',
  isRewardClaimed: 'isRewardClaimed',
  referrerReward: 'referrerReward',
  refereeReward: 'refereeReward',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  claimedAt: 'claimedAt'
};

exports.Prisma.ManualPaymentScalarFieldEnum = {
  id: 'id',
  referenceId: 'referenceId',
  userId: 'userId',
  tokenType: 'tokenType',
  requestedAmount: 'requestedAmount',
  tokenAmount: 'tokenAmount',
  deliveryChain: 'deliveryChain',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  cashAppCashtag: 'cashAppCashtag',
  cashAppProof: 'cashAppProof',
  stablecoinType: 'stablecoinType',
  senderAddress: 'senderAddress',
  txHash: 'txHash',
  blockchainChain: 'blockchainChain',
  status: 'status',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  rejectionReason: 'rejectionReason',
  distributionTxHash: 'distributionTxHash',
  distributedAt: 'distributedAt',
  userNotes: 'userNotes',
  adminNotes: 'adminNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Chain = exports.$Enums.Chain = {
  BSC: 'BSC',
  POLYGON: 'POLYGON'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.MintStatus = exports.$Enums.MintStatus = {
  PENDING: 'PENDING',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  SIGNATURE_PENDING: 'SIGNATURE_PENDING',
  MINTING: 'MINTING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  STRIPE: 'STRIPE',
  CASHAPP: 'CASHAPP',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.RedeemStatus = exports.$Enums.RedeemStatus = {
  PENDING: 'PENDING',
  BURN_PENDING: 'BURN_PENDING',
  BURNED: 'BURNED',
  PAYOUT_PENDING: 'PAYOUT_PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  MINT: 'MINT',
  REDEEM: 'REDEEM',
  RESERVE_UPDATE: 'RESERVE_UPDATE',
  CONFIG_CHANGE: 'CONFIG_CHANGE',
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPGRADE: 'MEMBERSHIP_UPGRADE',
  ADMIN_ACTION: 'ADMIN_ACTION'
};

exports.MembershipTier = exports.$Enums.MembershipTier = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM',
  DIAMOND: 'DIAMOND',
  FOUNDER: 'FOUNDER'
};

exports.BadgeCategory = exports.$Enums.BadgeCategory = {
  TRANSACTION: 'TRANSACTION',
  LOYALTY: 'LOYALTY',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SPECIAL: 'SPECIAL',
  LIMITED_EDITION: 'LIMITED_EDITION',
  FOUNDER: 'FOUNDER'
};

exports.BadgeRarity = exports.$Enums.BadgeRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.AdminRoleType = exports.$Enums.AdminRoleType = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  FINANCE_ADMIN: 'FINANCE_ADMIN',
  DAO_ADMIN: 'DAO_ADMIN',
  SUPPORT_ADMIN: 'SUPPORT_ADMIN',
  MODERATOR: 'MODERATOR',
  AUDITOR: 'AUDITOR'
};

exports.AuthMethod = exports.$Enums.AuthMethod = {
  METAMASK: 'METAMASK',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  APPLE: 'APPLE',
  EMAIL: 'EMAIL',
  PASSKEY: 'PASSKEY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSACTION: 'TRANSACTION',
  SYSTEM: 'SYSTEM',
  PROMOTIONAL: 'PROMOTIONAL',
  SECURITY: 'SECURITY',
  DAO_GOVERNANCE: 'DAO_GOVERNANCE',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPDATE: 'MEMBERSHIP_UPDATE'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ManualPaymentTokenType = exports.$Enums.ManualPaymentTokenType = {
  C12USD: 'C12USD',
  C12DAO: 'C12DAO'
};

exports.ManualPaymentMethod = exports.$Enums.ManualPaymentMethod = {
  CASH_APP: 'CASH_APP',
  STABLECOIN: 'STABLECOIN'
};

exports.StablecoinType = exports.$Enums.StablecoinType = {
  BUSD: 'BUSD',
  USDT: 'USDT',
  USDC: 'USDC'
};

exports.ManualPaymentStatus = exports.$Enums.ManualPaymentStatus = {
  PENDING_SUBMISSION: 'PENDING_SUBMISSION',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  VERIFYING: 'VERIFYING',
  APPROVED: 'APPROVED',
  DISTRIBUTING: 'DISTRIBUTING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  MintReceipt: 'MintReceipt',
  RedeemReceipt: 'RedeemReceipt',
  ReserveSnapshot: 'ReserveSnapshot',
  AuditLog: 'AuditLog',
  SystemConfig: 'SystemConfig',
  DaoMembership: 'DaoMembership',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  AdminRole: 'AdminRole',
  UserSession: 'UserSession',
  Notification: 'Notification',
  Referral: 'Referral',
  ManualPayment: 'ManualPayment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
