
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  address: 'address',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  displayName: 'displayName',
  avatar: 'avatar',
  bio: 'bio',
  location: 'location',
  website: 'website',
  twitter: 'twitter',
  discord: 'discord',
  googleId: 'googleId',
  facebookId: 'facebookId',
  appleId: 'appleId',
  preferredChain: 'preferredChain',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  darkMode: 'darkMode',
  language: 'language',
  kycStatus: 'kycStatus',
  kycSubmittedAt: 'kycSubmittedAt',
  kycVerifiedAt: 'kycVerifiedAt',
  kycDocuments: 'kycDocuments'
};

exports.Prisma.MintReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  tokenAmount: 'tokenAmount',
  chain: 'chain',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  paymentHash: 'paymentHash',
  txHash: 'txHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  receipt: 'receipt',
  signature: 'signature',
  nonce: 'nonce',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RedeemReceiptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenAmount: 'tokenAmount',
  amount: 'amount',
  chain: 'chain',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentAddress: 'paymentAddress',
  burnTxHash: 'burnTxHash',
  blockNumber: 'blockNumber',
  gasUsed: 'gasUsed',
  payoutId: 'payoutId',
  payoutHash: 'payoutHash',
  receipt: 'receipt',
  signature: 'signature',
  nonce: 'nonce',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ReserveSnapshotScalarFieldEnum = {
  id: 'id',
  totalUsdReserve: 'totalUsdReserve',
  totalSupply: 'totalSupply',
  bscSupply: 'bscSupply',
  polygonSupply: 'polygonSupply',
  stripeBalance: 'stripeBalance',
  cashAppBalance: 'cashAppBalance',
  bankBalance: 'bankBalance',
  collateralRatio: 'collateralRatio',
  isHealthy: 'isHealthy',
  blockNumber: 'blockNumber',
  timestamp: 'timestamp'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userAddress: 'userAddress',
  adminAddress: 'adminAddress',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  oldData: 'oldData',
  newData: 'newData',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedBy: 'updatedBy',
  updatedAt: 'updatedAt'
};

exports.Prisma.DaoMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  membershipTier: 'membershipTier',
  joinedAt: 'joinedAt',
  lastActiveAt: 'lastActiveAt',
  totalStaked: 'totalStaked',
  totalTransactions: 'totalTransactions',
  totalVolume: 'totalVolume',
  referralCount: 'referralCount',
  isActive: 'isActive',
  isPremium: 'isPremium',
  isFounder: 'isFounder'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  category: 'category',
  rarity: 'rarity',
  requirements: 'requirements',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt',
  progress: 'progress',
  isVisible: 'isVisible'
};

exports.Prisma.AdminRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  grantedBy: 'grantedBy',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  permissions: 'permissions'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionHash: 'sessionHash',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  loginMethod: 'loginMethod',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  isRead: 'isRead',
  isSent: 'isSent',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt',
  sentAt: 'sentAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  refereeId: 'refereeId',
  referralCode: 'referralCode',
  isActive: 'isActive',
  isRewardClaimed: 'isRewardClaimed',
  referrerReward: 'referrerReward',
  refereeReward: 'refereeReward',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  claimedAt: 'claimedAt'
};

exports.Prisma.ManualPaymentScalarFieldEnum = {
  id: 'id',
  referenceId: 'referenceId',
  userId: 'userId',
  tokenType: 'tokenType',
  requestedAmount: 'requestedAmount',
  tokenAmount: 'tokenAmount',
  deliveryChain: 'deliveryChain',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  cashAppCashtag: 'cashAppCashtag',
  cashAppProof: 'cashAppProof',
  stablecoinType: 'stablecoinType',
  senderAddress: 'senderAddress',
  txHash: 'txHash',
  blockchainChain: 'blockchainChain',
  status: 'status',
  verifiedBy: 'verifiedBy',
  verifiedAt: 'verifiedAt',
  rejectionReason: 'rejectionReason',
  distributionTxHash: 'distributionTxHash',
  distributedAt: 'distributedAt',
  userNotes: 'userNotes',
  adminNotes: 'adminNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Chain = exports.$Enums.Chain = {
  BSC: 'BSC',
  POLYGON: 'POLYGON'
};

exports.MintStatus = exports.$Enums.MintStatus = {
  PENDING: 'PENDING',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  SIGNATURE_PENDING: 'SIGNATURE_PENDING',
  MINTING: 'MINTING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.RedeemStatus = exports.$Enums.RedeemStatus = {
  PENDING: 'PENDING',
  BURN_PENDING: 'BURN_PENDING',
  BURNED: 'BURNED',
  PAYOUT_PENDING: 'PAYOUT_PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  STRIPE: 'STRIPE',
  CASHAPP: 'CASHAPP',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  MINT: 'MINT',
  REDEEM: 'REDEEM',
  RESERVE_UPDATE: 'RESERVE_UPDATE',
  CONFIG_CHANGE: 'CONFIG_CHANGE',
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPGRADE: 'MEMBERSHIP_UPGRADE',
  ADMIN_ACTION: 'ADMIN_ACTION'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.MembershipTier = exports.$Enums.MembershipTier = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM',
  DIAMOND: 'DIAMOND',
  FOUNDER: 'FOUNDER'
};

exports.BadgeCategory = exports.$Enums.BadgeCategory = {
  TRANSACTION: 'TRANSACTION',
  LOYALTY: 'LOYALTY',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SPECIAL: 'SPECIAL',
  LIMITED_EDITION: 'LIMITED_EDITION',
  FOUNDER: 'FOUNDER'
};

exports.BadgeRarity = exports.$Enums.BadgeRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.AdminRoleType = exports.$Enums.AdminRoleType = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  FINANCE_ADMIN: 'FINANCE_ADMIN',
  DAO_ADMIN: 'DAO_ADMIN',
  SUPPORT_ADMIN: 'SUPPORT_ADMIN',
  MODERATOR: 'MODERATOR',
  AUDITOR: 'AUDITOR'
};

exports.AuthMethod = exports.$Enums.AuthMethod = {
  METAMASK: 'METAMASK',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  APPLE: 'APPLE',
  EMAIL: 'EMAIL',
  PASSKEY: 'PASSKEY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSACTION: 'TRANSACTION',
  SYSTEM: 'SYSTEM',
  PROMOTIONAL: 'PROMOTIONAL',
  SECURITY: 'SECURITY',
  DAO_GOVERNANCE: 'DAO_GOVERNANCE',
  BADGE_EARNED: 'BADGE_EARNED',
  MEMBERSHIP_UPDATE: 'MEMBERSHIP_UPDATE'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ManualPaymentTokenType = exports.$Enums.ManualPaymentTokenType = {
  C12USD: 'C12USD',
  C12DAO: 'C12DAO'
};

exports.ManualPaymentMethod = exports.$Enums.ManualPaymentMethod = {
  CASH_APP: 'CASH_APP',
  STABLECOIN: 'STABLECOIN'
};

exports.StablecoinType = exports.$Enums.StablecoinType = {
  BUSD: 'BUSD',
  USDT: 'USDT',
  USDC: 'USDC'
};

exports.ManualPaymentStatus = exports.$Enums.ManualPaymentStatus = {
  PENDING_SUBMISSION: 'PENDING_SUBMISSION',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  VERIFYING: 'VERIFYING',
  APPROVED: 'APPROVED',
  DISTRIBUTING: 'DISTRIBUTING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  MintReceipt: 'MintReceipt',
  RedeemReceipt: 'RedeemReceipt',
  ReserveSnapshot: 'ReserveSnapshot',
  AuditLog: 'AuditLog',
  SystemConfig: 'SystemConfig',
  DaoMembership: 'DaoMembership',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  AdminRole: 'AdminRole',
  UserSession: 'UserSession',
  Notification: 'Notification',
  Referral: 'Referral',
  ManualPayment: 'ManualPayment'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\tabor\\Downloads\\C12USD_project\\C12USD\\functions\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\tabor\\Downloads\\C12USD_project\\C12USD\\functions\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// C12USD Stablecoin Database Schema\n// This schema manages mint/redeem operations, receipts, and audit trails\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User accounts and authentication\nmodel User {\n  id        String   @id @default(cuid())\n  address   String   @unique // Ethereum address\n  email     String?  @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Profile information\n  displayName String?\n  avatar      String? // IPFS hash or URL\n  bio         String?\n  location    String?\n  website     String?\n  twitter     String?\n  discord     String?\n\n  // Authentication providers\n  googleId   String? @unique\n  facebookId String? @unique\n  appleId    String? @unique\n\n  // User preferences\n  preferredChain     Chain?\n  emailNotifications Boolean @default(true)\n  pushNotifications  Boolean @default(true)\n  darkMode           Boolean @default(false)\n  language           String  @default(\"en\")\n\n  // KYC and verification\n  kycStatus      KycStatus @default(PENDING)\n  kycSubmittedAt DateTime?\n  kycVerifiedAt  DateTime?\n  kycDocuments   Json? // Encrypted document references\n\n  // Relationships\n  mintReceipts   MintReceipt[]\n  redeemReceipts RedeemReceipt[]\n  daoMembership  DaoMembership?\n  userBadges     UserBadge[]\n  adminRoles     AdminRole[]\n  sessions       UserSession[]\n  manualPayments ManualPayment[]\n\n  @@map(\"users\")\n}\n\n// Mint operations - when users deposit fiat and receive C12USD\nmodel MintReceipt {\n  id          String     @id @default(cuid())\n  userId      String\n  amount      Decimal    @db.Decimal(18, 6) // USD amount\n  tokenAmount Decimal    @db.Decimal(18, 18) // Token amount with 18 decimals\n  chain       Chain\n  status      MintStatus\n\n  // Payment information\n  paymentMethod PaymentMethod\n  paymentId     String        @unique // Stripe/Cash App transaction ID\n  paymentHash   String? // Payment processor hash\n\n  // Blockchain information\n  txHash      String? // Mint transaction hash\n  blockNumber Int?\n  gasUsed     Int?\n\n  // Signatures and verification\n  receipt   String // Signed receipt from signer service\n  signature String // Signature for the mint operation\n  nonce     String @unique\n\n  // Timestamps\n  createdAt   DateTime  @default(now())\n  completedAt DateTime?\n  expiresAt   DateTime\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id])\n\n  @@map(\"mint_receipts\")\n}\n\n// Redeem operations - when users burn C12USD and receive fiat\nmodel RedeemReceipt {\n  id          String       @id @default(cuid())\n  userId      String\n  tokenAmount Decimal      @db.Decimal(18, 18) // Token amount burned\n  amount      Decimal      @db.Decimal(18, 6) // USD amount to receive\n  chain       Chain\n  status      RedeemStatus\n\n  // Payment information\n  paymentMethod  PaymentMethod\n  paymentAddress String // Bank account, Cash App handle, etc.\n\n  // Blockchain information\n  burnTxHash  String? // Burn transaction hash\n  blockNumber Int?\n  gasUsed     Int?\n\n  // Payout information\n  payoutId   String? @unique // Stripe/Cash App payout ID\n  payoutHash String?\n\n  // Signatures and verification\n  receipt   String // Signed receipt\n  signature String\n  nonce     String @unique\n\n  // Timestamps\n  createdAt   DateTime  @default(now())\n  completedAt DateTime?\n  expiresAt   DateTime\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id])\n\n  @@map(\"redeem_receipts\")\n}\n\n// Reserve tracking for Proof of Reserve\nmodel ReserveSnapshot {\n  id              String  @id @default(cuid())\n  totalUsdReserve Decimal @db.Decimal(18, 6) // Total USD in reserve\n  totalSupply     Decimal @db.Decimal(18, 18) // Total token supply across all chains\n\n  // Per-chain breakdown\n  bscSupply     Decimal @db.Decimal(18, 18)\n  polygonSupply Decimal @db.Decimal(18, 18)\n\n  // Reserve sources\n  stripeBalance  Decimal @db.Decimal(18, 6)\n  cashAppBalance Decimal @db.Decimal(18, 6)\n  bankBalance    Decimal @db.Decimal(18, 6)\n\n  // Compliance metrics\n  collateralRatio Decimal @db.Decimal(5, 4) // Should be >= 1.0000\n  isHealthy       Boolean @default(true)\n\n  // Blockchain data\n  blockNumber Int\n  timestamp   DateTime @default(now())\n\n  @@map(\"reserve_snapshots\")\n}\n\n// Audit trail for all operations\nmodel AuditLog {\n  id         String      @id @default(cuid())\n  action     AuditAction\n  entityType String // \"mint\", \"redeem\", \"reserve\", etc.\n  entityId   String // ID of the related entity\n\n  // Context\n  userAddress  String?\n  adminAddress String?\n  ipAddress    String?\n  userAgent    String?\n\n  // Data\n  oldData  Json?\n  newData  Json?\n  metadata Json?\n\n  timestamp DateTime @default(now())\n\n  // Relationships - Note: These are optional because entityId could reference any entity type\n\n  @@map(\"audit_logs\")\n}\n\n// System configuration and parameters\nmodel SystemConfig {\n  id          String   @id @default(cuid())\n  key         String   @unique\n  value       String\n  description String?\n  updatedBy   String // Admin address\n  updatedAt   DateTime @updatedAt\n\n  @@map(\"system_config\")\n}\n\n// DAO Membership System\nmodel DaoMembership {\n  id             String         @id @default(cuid())\n  userId         String         @unique\n  membershipTier MembershipTier @default(BRONZE)\n  joinedAt       DateTime       @default(now())\n  lastActiveAt   DateTime       @updatedAt\n\n  // Membership metrics\n  totalStaked       Decimal @default(0) @db.Decimal(18, 18)\n  totalTransactions Int     @default(0)\n  totalVolume       Decimal @default(0) @db.Decimal(18, 6)\n  referralCount     Int     @default(0)\n\n  // Status\n  isActive  Boolean @default(true)\n  isPremium Boolean @default(false)\n  isFounder Boolean @default(false)\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"dao_memberships\")\n}\n\n// Badge System\nmodel Badge {\n  id          String        @id @default(cuid())\n  name        String        @unique\n  description String\n  icon        String // IPFS hash or URL for badge icon\n  category    BadgeCategory\n  rarity      BadgeRarity   @default(COMMON)\n\n  // Requirements\n  requirements Json // Flexible requirements object\n  isActive     Boolean @default(true)\n\n  // Metadata\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  createdBy String // Admin address\n\n  // Relationships\n  userBadges UserBadge[]\n\n  @@map(\"badges\")\n}\n\n// User Badge Junction Table\nmodel UserBadge {\n  id       String   @id @default(cuid())\n  userId   String\n  badgeId  String\n  earnedAt DateTime @default(now())\n\n  // Badge progress tracking\n  progress  Json? // Progress towards earning the badge\n  isVisible Boolean @default(true)\n\n  // Relationships\n  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, badgeId])\n  @@map(\"user_badges\")\n}\n\n// Admin Role System\nmodel AdminRole {\n  id        String        @id @default(cuid())\n  userId    String\n  role      AdminRoleType\n  grantedBy String // Admin address who granted the role\n  grantedAt DateTime      @default(now())\n  expiresAt DateTime? // Optional expiration\n  isActive  Boolean       @default(true)\n\n  // Permissions\n  permissions Json // Flexible permissions object\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, role])\n  @@map(\"admin_roles\")\n}\n\n// User Sessions for authentication\nmodel UserSession {\n  id          String  @id @default(cuid())\n  userId      String\n  sessionHash String  @unique // Hashed session token\n  ipAddress   String?\n  userAgent   String?\n\n  // Session metadata\n  loginMethod AuthMethod\n  isActive    Boolean    @default(true)\n  lastUsedAt  DateTime   @updatedAt\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  expiresAt DateTime\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"user_sessions\")\n}\n\n// Notification System\nmodel Notification {\n  id        String           @id @default(cuid())\n  userId    String? // null for global notifications\n  type      NotificationType\n  title     String\n  message   String\n  actionUrl String? // Optional URL for action\n\n  // Status\n  isRead   Boolean              @default(false)\n  isSent   Boolean              @default(false)\n  priority NotificationPriority @default(NORMAL)\n\n  // Metadata\n  metadata  Json? // Additional notification data\n  createdAt DateTime  @default(now())\n  readAt    DateTime?\n  sentAt    DateTime?\n\n  @@map(\"notifications\")\n}\n\n// Referral System\nmodel Referral {\n  id           String @id @default(cuid())\n  referrerId   String // User who made the referral\n  refereeId    String // User who was referred\n  referralCode String @unique\n\n  // Status\n  isActive        Boolean @default(true)\n  isRewardClaimed Boolean @default(false)\n\n  // Rewards\n  referrerReward Decimal @default(0) @db.Decimal(18, 6)\n  refereeReward  Decimal @default(0) @db.Decimal(18, 6)\n\n  // Timestamps\n  createdAt   DateTime  @default(now())\n  completedAt DateTime?\n  claimedAt   DateTime?\n\n  @@map(\"referrals\")\n}\n\n// Manual Payment System - For immediate token purchases\nmodel ManualPayment {\n  id          String @id @default(cuid())\n  referenceId String @unique // Format: C12-XXXXXX\n  userId      String\n\n  // Token details\n  tokenType       ManualPaymentTokenType\n  requestedAmount Decimal                @db.Decimal(18, 6) // USD amount\n  tokenAmount     Decimal                @db.Decimal(18, 18) // Token amount to receive\n  deliveryChain   Chain // BSC or POLYGON\n\n  // Payment details\n  paymentMethod ManualPaymentMethod\n  paymentAmount Decimal             @db.Decimal(18, 6)\n\n  // Cash App specific\n  cashAppCashtag String? // Sender's cashtag\n  cashAppProof   String? // Screenshot URL (Firebase Storage)\n\n  // Stablecoin specific\n  stablecoinType  StablecoinType? // BUSD, USDT, USDC\n  senderAddress   String? // Wallet address\n  txHash          String? // Blockchain TX hash\n  blockchainChain Chain? // Chain where payment was sent\n\n  // Status tracking\n  status ManualPaymentStatus @default(PENDING_SUBMISSION)\n\n  // Verification\n  verifiedBy      String? // Admin user ID\n  verifiedAt      DateTime?\n  rejectionReason String?\n\n  // Distribution\n  distributionTxHash String? // TX hash of token distribution\n  distributedAt      DateTime?\n\n  // Additional\n  userNotes  String? // User-provided notes\n  adminNotes String? // Admin-provided notes\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  expiresAt DateTime // 24 hours from creation\n\n  // Relationships\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([status, createdAt])\n  @@index([userId])\n  @@index([referenceId])\n  @@map(\"manual_payments\")\n}\n\n// Enums\nenum Chain {\n  BSC\n  POLYGON\n}\n\nenum MintStatus {\n  PENDING\n  PAYMENT_RECEIVED\n  SIGNATURE_PENDING\n  MINTING\n  COMPLETED\n  FAILED\n  EXPIRED\n}\n\nenum RedeemStatus {\n  PENDING\n  BURN_PENDING\n  BURNED\n  PAYOUT_PENDING\n  COMPLETED\n  FAILED\n  EXPIRED\n}\n\nenum PaymentMethod {\n  STRIPE\n  CASHAPP\n  BANK_TRANSFER\n}\n\nenum AuditAction {\n  CREATE\n  UPDATE\n  DELETE\n  MINT\n  REDEEM\n  RESERVE_UPDATE\n  CONFIG_CHANGE\n  USER_LOGIN\n  USER_LOGOUT\n  BADGE_EARNED\n  MEMBERSHIP_UPGRADE\n  ADMIN_ACTION\n}\n\n// New Enums for Enhanced Features\nenum KycStatus {\n  PENDING\n  SUBMITTED\n  UNDER_REVIEW\n  APPROVED\n  REJECTED\n  EXPIRED\n}\n\nenum MembershipTier {\n  BRONZE\n  SILVER\n  GOLD\n  PLATINUM\n  DIAMOND\n  FOUNDER\n}\n\nenum BadgeCategory {\n  TRANSACTION\n  LOYALTY\n  ACHIEVEMENT\n  SPECIAL\n  LIMITED_EDITION\n  FOUNDER\n}\n\nenum BadgeRarity {\n  COMMON\n  UNCOMMON\n  RARE\n  EPIC\n  LEGENDARY\n}\n\nenum AdminRoleType {\n  SUPER_ADMIN\n  FINANCE_ADMIN\n  DAO_ADMIN\n  SUPPORT_ADMIN\n  MODERATOR\n  AUDITOR\n}\n\nenum AuthMethod {\n  METAMASK\n  GOOGLE\n  FACEBOOK\n  APPLE\n  EMAIL\n  PASSKEY\n}\n\nenum NotificationType {\n  TRANSACTION\n  SYSTEM\n  PROMOTIONAL\n  SECURITY\n  DAO_GOVERNANCE\n  BADGE_EARNED\n  MEMBERSHIP_UPDATE\n}\n\nenum NotificationPriority {\n  LOW\n  NORMAL\n  HIGH\n  URGENT\n}\n\n// Manual Payment System Enums\nenum ManualPaymentTokenType {\n  C12USD\n  C12DAO\n}\n\nenum ManualPaymentMethod {\n  CASH_APP\n  STABLECOIN\n}\n\nenum StablecoinType {\n  BUSD\n  USDT\n  USDC\n}\n\nenum ManualPaymentStatus {\n  PENDING_SUBMISSION // User hasn't submitted payment proof yet\n  PENDING_VERIFICATION // Submitted, awaiting admin review\n  VERIFYING // Admin is reviewing\n  APPROVED // Approved, awaiting distribution\n  DISTRIBUTING // Tokens being minted/transferred\n  COMPLETED // Tokens delivered\n  REJECTED // Payment rejected\n  EXPIRED // Submission window expired (24h)\n  REFUNDED // Payment refunded\n}\n",
  "inlineSchemaHash": "bf0a1339dad047c55e6c4902a9ab3bec7f0e876bd1c15fd012edbcdb8c7a3eed",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"twitter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discord\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"facebookId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredChain\",\"kind\":\"enum\",\"type\":\"Chain\"},{\"name\":\"emailNotifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"pushNotifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"darkMode\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kycStatus\",\"kind\":\"enum\",\"type\":\"KycStatus\"},{\"name\":\"kycSubmittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"kycVerifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"kycDocuments\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"mintReceipts\",\"kind\":\"object\",\"type\":\"MintReceipt\",\"relationName\":\"MintReceiptToUser\"},{\"name\":\"redeemReceipts\",\"kind\":\"object\",\"type\":\"RedeemReceipt\",\"relationName\":\"RedeemReceiptToUser\"},{\"name\":\"daoMembership\",\"kind\":\"object\",\"type\":\"DaoMembership\",\"relationName\":\"DaoMembershipToUser\"},{\"name\":\"userBadges\",\"kind\":\"object\",\"type\":\"UserBadge\",\"relationName\":\"UserToUserBadge\"},{\"name\":\"adminRoles\",\"kind\":\"object\",\"type\":\"AdminRole\",\"relationName\":\"AdminRoleToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"UserSession\",\"relationName\":\"UserToUserSession\"},{\"name\":\"manualPayments\",\"kind\":\"object\",\"type\":\"ManualPayment\",\"relationName\":\"ManualPaymentToUser\"}],\"dbName\":\"users\"},\"MintReceipt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"tokenAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"chain\",\"kind\":\"enum\",\"type\":\"Chain\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"MintStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gasUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"receipt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nonce\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MintReceiptToUser\"}],\"dbName\":\"mint_receipts\"},\"RedeemReceipt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"chain\",\"kind\":\"enum\",\"type\":\"Chain\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RedeemStatus\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"paymentAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"burnTxHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gasUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"payoutId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payoutHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"receipt\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"signature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nonce\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RedeemReceiptToUser\"}],\"dbName\":\"redeem_receipts\"},\"ReserveSnapshot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalUsdReserve\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"totalSupply\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"bscSupply\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"polygonSupply\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"stripeBalance\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"cashAppBalance\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"bankBalance\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"collateralRatio\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isHealthy\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"reserve_snapshots\"},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"AuditAction\"},{\"name\":\"entityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"oldData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"newData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"audit_logs\"},\"SystemConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"updatedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"system_config\"},\"DaoMembership\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"membershipTier\",\"kind\":\"enum\",\"type\":\"MembershipTier\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastActiveAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalStaked\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"totalTransactions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalVolume\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"referralCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPremium\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFounder\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DaoMembershipToUser\"}],\"dbName\":\"dao_memberships\"},\"Badge\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"BadgeCategory\"},{\"name\":\"rarity\",\"kind\":\"enum\",\"type\":\"BadgeRarity\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userBadges\",\"kind\":\"object\",\"type\":\"UserBadge\",\"relationName\":\"BadgeToUserBadge\"}],\"dbName\":\"badges\"},\"UserBadge\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"badgeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"earnedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"isVisible\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserBadge\"},{\"name\":\"badge\",\"kind\":\"object\",\"type\":\"Badge\",\"relationName\":\"BadgeToUserBadge\"}],\"dbName\":\"user_badges\"},\"AdminRole\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"AdminRoleType\"},{\"name\":\"grantedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grantedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminRoleToUser\"}],\"dbName\":\"admin_roles\"},\"UserSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"loginMethod\",\"kind\":\"enum\",\"type\":\"AuthMethod\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSession\"}],\"dbName\":\"user_sessions\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isSent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"NotificationPriority\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"notifications\"},\"Referral\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referrerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refereeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referralCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isRewardClaimed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"referrerReward\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"refereeReward\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"claimedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"referrals\"},\"ManualPayment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referenceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenType\",\"kind\":\"enum\",\"type\":\"ManualPaymentTokenType\"},{\"name\":\"requestedAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"tokenAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"deliveryChain\",\"kind\":\"enum\",\"type\":\"Chain\"},{\"name\":\"paymentMethod\",\"kind\":\"enum\",\"type\":\"ManualPaymentMethod\"},{\"name\":\"paymentAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"cashAppCashtag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cashAppProof\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stablecoinType\",\"kind\":\"enum\",\"type\":\"StablecoinType\"},{\"name\":\"senderAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"txHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockchainChain\",\"kind\":\"enum\",\"type\":\"Chain\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ManualPaymentStatus\"},{\"name\":\"verifiedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rejectionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"distributionTxHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"distributedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"adminNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ManualPaymentToUser\"}],\"dbName\":\"manual_payments\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

