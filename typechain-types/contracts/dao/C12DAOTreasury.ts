/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface C12DAOTreasuryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FINANCE_ROLE()": FunctionFragment;
    "MULTI_SIG_THRESHOLD()": FunctionFragment;
    "TREASURER_ROLE()": FunctionFragment;
    "budgets(uint256)": FunctionFragment;
    "c12daoToken()": FunctionFragment;
    "c12usdToken()": FunctionFragment;
    "createBudget(string,uint256,uint256)": FunctionFragment;
    "distributeToStakers(uint256)": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBudget(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "nextBudgetId()": FunctionFragment;
    "receiveRevenue(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revenueBySource(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setStakingContract(address)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalDistributed()": FunctionFragment;
    "totalRevenueReceived()": FunctionFragment;
    "withdrawFromBudget(uint256,address,uint256)": FunctionFragment;
    "withdrawalRequests(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "FINANCE_ROLE"
      | "MULTI_SIG_THRESHOLD"
      | "TREASURER_ROLE"
      | "budgets"
      | "c12daoToken"
      | "c12usdToken"
      | "createBudget"
      | "distributeToStakers"
      | "emergencyWithdraw"
      | "getBalance"
      | "getBudget"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "nextBudgetId"
      | "receiveRevenue"
      | "renounceRole"
      | "revenueBySource"
      | "revokeRole"
      | "setStakingContract"
      | "stakingContract"
      | "supportsInterface"
      | "totalDistributed"
      | "totalRevenueReceived"
      | "withdrawFromBudget"
      | "withdrawalRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTI_SIG_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "budgets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "c12daoToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "c12usdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBudget",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeToStakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBudget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextBudgetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRevenue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueBySource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRevenueReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromBudget",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequests",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FINANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTI_SIG_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "budgets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "c12daoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "c12usdToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeToStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBudgetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueBySource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRevenueReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequests",
    data: BytesLike
  ): Result;

  events: {
    "BudgetCreated(uint256,string,uint256,uint256)": EventFragment;
    "BudgetSpent(uint256,address,uint256)": EventFragment;
    "RevenueDistributed(string,uint256)": EventFragment;
    "RevenueReceived(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "WithdrawalApproved(bytes32,address)": EventFragment;
    "WithdrawalExecuted(bytes32,address,uint256)": EventFragment;
    "WithdrawalRequested(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BudgetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BudgetSpent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalRequested"): EventFragment;
}

export interface BudgetCreatedEventObject {
  budgetId: BigNumber;
  category: string;
  allocated: BigNumber;
  duration: BigNumber;
}
export type BudgetCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  BudgetCreatedEventObject
>;

export type BudgetCreatedEventFilter = TypedEventFilter<BudgetCreatedEvent>;

export interface BudgetSpentEventObject {
  budgetId: BigNumber;
  to: string;
  amount: BigNumber;
}
export type BudgetSpentEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BudgetSpentEventObject
>;

export type BudgetSpentEventFilter = TypedEventFilter<BudgetSpentEvent>;

export interface RevenueDistributedEventObject {
  destination: string;
  amount: BigNumber;
}
export type RevenueDistributedEvent = TypedEvent<
  [string, BigNumber],
  RevenueDistributedEventObject
>;

export type RevenueDistributedEventFilter =
  TypedEventFilter<RevenueDistributedEvent>;

export interface RevenueReceivedEventObject {
  source: string;
  amount: BigNumber;
}
export type RevenueReceivedEvent = TypedEvent<
  [string, BigNumber],
  RevenueReceivedEventObject
>;

export type RevenueReceivedEventFilter = TypedEventFilter<RevenueReceivedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface WithdrawalApprovedEventObject {
  requestId: string;
  approver: string;
}
export type WithdrawalApprovedEvent = TypedEvent<
  [string, string],
  WithdrawalApprovedEventObject
>;

export type WithdrawalApprovedEventFilter =
  TypedEventFilter<WithdrawalApprovedEvent>;

export interface WithdrawalExecutedEventObject {
  requestId: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawalExecutedEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalExecutedEventObject
>;

export type WithdrawalExecutedEventFilter =
  TypedEventFilter<WithdrawalExecutedEvent>;

export interface WithdrawalRequestedEventObject {
  requestId: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawalRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalRequestedEventObject
>;

export type WithdrawalRequestedEventFilter =
  TypedEventFilter<WithdrawalRequestedEvent>;

export interface C12DAOTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: C12DAOTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    FINANCE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MULTI_SIG_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TREASURER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    budgets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        category: string;
        allocated: BigNumber;
        spent: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    c12daoToken(overrides?: CallOverrides): Promise<[string]>;

    c12usdToken(overrides?: CallOverrides): Promise<[string]>;

    createBudget(
      category: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeToStakers(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBalance(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBudget(
      budgetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        category: string;
        allocated: BigNumber;
        spent: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextBudgetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveRevenue(
      source: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revenueBySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRevenueReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFromBudget(
      budgetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawalRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        to: string;
        amount: BigNumber;
        approvals: BigNumber;
        executed: boolean;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  FINANCE_ROLE(overrides?: CallOverrides): Promise<string>;

  MULTI_SIG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  TREASURER_ROLE(overrides?: CallOverrides): Promise<string>;

  budgets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      category: string;
      allocated: BigNumber;
      spent: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      active: boolean;
    }
  >;

  c12daoToken(overrides?: CallOverrides): Promise<string>;

  c12usdToken(overrides?: CallOverrides): Promise<string>;

  createBudget(
    category: string,
    amount: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeToStakers(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBudget(
    budgetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      category: string;
      allocated: BigNumber;
      spent: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      active: boolean;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextBudgetId(overrides?: CallOverrides): Promise<BigNumber>;

  receiveRevenue(
    source: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revenueBySource(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStakingContract(
    _stakingContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRevenueReceived(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFromBudget(
    budgetId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawalRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean] & {
      to: string;
      amount: BigNumber;
      approvals: BigNumber;
      executed: boolean;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    FINANCE_ROLE(overrides?: CallOverrides): Promise<string>;

    MULTI_SIG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURER_ROLE(overrides?: CallOverrides): Promise<string>;

    budgets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        category: string;
        allocated: BigNumber;
        spent: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    c12daoToken(overrides?: CallOverrides): Promise<string>;

    c12usdToken(overrides?: CallOverrides): Promise<string>;

    createBudget(
      category: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeToStakers(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBudget(
      budgetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        category: string;
        allocated: BigNumber;
        spent: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextBudgetId(overrides?: CallOverrides): Promise<BigNumber>;

    receiveRevenue(
      source: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revenueBySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContract(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenueReceived(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromBudget(
      budgetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean] & {
        to: string;
        amount: BigNumber;
        approvals: BigNumber;
        executed: boolean;
      }
    >;
  };

  filters: {
    "BudgetCreated(uint256,string,uint256,uint256)"(
      budgetId?: BigNumberish | null,
      category?: null,
      allocated?: null,
      duration?: null
    ): BudgetCreatedEventFilter;
    BudgetCreated(
      budgetId?: BigNumberish | null,
      category?: null,
      allocated?: null,
      duration?: null
    ): BudgetCreatedEventFilter;

    "BudgetSpent(uint256,address,uint256)"(
      budgetId?: BigNumberish | null,
      to?: string | null,
      amount?: null
    ): BudgetSpentEventFilter;
    BudgetSpent(
      budgetId?: BigNumberish | null,
      to?: string | null,
      amount?: null
    ): BudgetSpentEventFilter;

    "RevenueDistributed(string,uint256)"(
      destination?: null,
      amount?: null
    ): RevenueDistributedEventFilter;
    RevenueDistributed(
      destination?: null,
      amount?: null
    ): RevenueDistributedEventFilter;

    "RevenueReceived(address,uint256)"(
      source?: string | null,
      amount?: null
    ): RevenueReceivedEventFilter;
    RevenueReceived(
      source?: string | null,
      amount?: null
    ): RevenueReceivedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "WithdrawalApproved(bytes32,address)"(
      requestId?: BytesLike | null,
      approver?: string | null
    ): WithdrawalApprovedEventFilter;
    WithdrawalApproved(
      requestId?: BytesLike | null,
      approver?: string | null
    ): WithdrawalApprovedEventFilter;

    "WithdrawalExecuted(bytes32,address,uint256)"(
      requestId?: BytesLike | null,
      to?: string | null,
      amount?: null
    ): WithdrawalExecutedEventFilter;
    WithdrawalExecuted(
      requestId?: BytesLike | null,
      to?: string | null,
      amount?: null
    ): WithdrawalExecutedEventFilter;

    "WithdrawalRequested(bytes32,address,uint256)"(
      requestId?: BytesLike | null,
      to?: string | null,
      amount?: null
    ): WithdrawalRequestedEventFilter;
    WithdrawalRequested(
      requestId?: BytesLike | null,
      to?: string | null,
      amount?: null
    ): WithdrawalRequestedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    FINANCE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MULTI_SIG_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TREASURER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    budgets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    c12daoToken(overrides?: CallOverrides): Promise<BigNumber>;

    c12usdToken(overrides?: CallOverrides): Promise<BigNumber>;

    createBudget(
      category: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeToStakers(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBalance(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBudget(
      budgetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextBudgetId(overrides?: CallOverrides): Promise<BigNumber>;

    receiveRevenue(
      source: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revenueBySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRevenueReceived(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromBudget(
      budgetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawalRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FINANCE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTI_SIG_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TREASURER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    budgets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    c12daoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c12usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBudget(
      category: string,
      amount: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeToStakers(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBalance(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBudget(
      budgetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBudgetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveRevenue(
      source: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revenueBySource(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStakingContract(
      _stakingContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRevenueReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFromBudget(
      budgetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawalRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
