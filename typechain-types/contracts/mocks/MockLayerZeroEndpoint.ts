/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MockLayerZeroEndpointInterface extends utils.Interface {
  functions: {
    "delegates(address)": FunctionFragment;
    "getDelegate(address)": FunctionFragment;
    "send(bytes,bytes)": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "delegates" | "getDelegate" | "send" | "setDelegate"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(functionFragment: "getDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setDelegate", values: [string]): string;

  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;

  events: {
    "DelegateSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateSet"): EventFragment;
}

export interface DelegateSetEventObject {
  oapp: string;
  delegate: string;
}
export type DelegateSetEvent = TypedEvent<
  [string, string],
  DelegateSetEventObject
>;

export type DelegateSetEventFilter = TypedEventFilter<DelegateSetEvent>;

export interface MockLayerZeroEndpoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLayerZeroEndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getDelegate(_oapp: string, overrides?: CallOverrides): Promise<[string]>;

    send(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  getDelegate(_oapp: string, overrides?: CallOverrides): Promise<string>;

  send(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDelegate(
    _delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    getDelegate(_oapp: string, overrides?: CallOverrides): Promise<string>;

    send(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegate(_delegate: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DelegateSet(address,address)"(
      oapp?: string | null,
      delegate?: string | null
    ): DelegateSetEventFilter;
    DelegateSet(
      oapp?: string | null,
      delegate?: string | null
    ): DelegateSetEventFilter;
  };

  estimateGas: {
    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDelegate(_oapp: string, overrides?: CallOverrides): Promise<BigNumber>;

    send(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegate(
      _oapp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
