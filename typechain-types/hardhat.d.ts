/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpointV2__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "IMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLib__factory>;
    getContractFactory(
      name: "IMessageLibManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLibManager__factory>;
    getContractFactory(
      name: "IMessagingChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingChannel__factory>;
    getContractFactory(
      name: "IMessagingComposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingComposer__factory>;
    getContractFactory(
      name: "IMessagingContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingContext__factory>;
    getContractFactory(
      name: "ISendLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISendLib__factory>;
    getContractFactory(
      name: "AddressCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressCast__factory>;
    getContractFactory(
      name: "IOAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppCore__factory>;
    getContractFactory(
      name: "IOAppMsgInspector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppMsgInspector__factory>;
    getContractFactory(
      name: "IOAppOptionsType3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppOptionsType3__factory>;
    getContractFactory(
      name: "IOAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppReceiver__factory>;
    getContractFactory(
      name: "OAppOptionsType3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppOptionsType3__factory>;
    getContractFactory(
      name: "OApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OApp__factory>;
    getContractFactory(
      name: "OAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppCore__factory>;
    getContractFactory(
      name: "OAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppReceiver__factory>;
    getContractFactory(
      name: "OAppSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppSender__factory>;
    getContractFactory(
      name: "IOAppPreCrimeSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppPreCrimeSimulator__factory>;
    getContractFactory(
      name: "IPreCrime",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPreCrime__factory>;
    getContractFactory(
      name: "OAppPreCrimeSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppPreCrimeSimulator__factory>;
    getContractFactory(
      name: "IOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOFT__factory>;
    getContractFactory(
      name: "OFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFT__factory>;
    getContractFactory(
      name: "OFTCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCore__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "GovernorCountingSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorCountingSimple__factory>;
    getContractFactory(
      name: "GovernorSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorSettings__factory>;
    getContractFactory(
      name: "GovernorTimelockControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorTimelockControl__factory>;
    getContractFactory(
      name: "GovernorVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotes__factory>;
    getContractFactory(
      name: "GovernorVotesQuorumFraction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorVotesQuorumFraction__factory>;
    getContractFactory(
      name: "IGovernorTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernorTimelock__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "IGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernor__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IERC5805",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5805__factory>;
    getContractFactory(
      name: "IERC6372",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6372__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20FlashMint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FlashMint__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Votes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Votes__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "DoubleEndedQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleEndedQueue__factory>;
    getContractFactory(
      name: "C12USDTokenEnhanced",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12USDTokenEnhanced__factory>;
    getContractFactory(
      name: "C12DAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12DAO__factory>;
    getContractFactory(
      name: "C12DAOGovernor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12DAOGovernor__factory>;
    getContractFactory(
      name: "C12DAOStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12DAOStaking__factory>;
    getContractFactory(
      name: "C12DAOTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12DAOTimelock__factory>;
    getContractFactory(
      name: "C12DAOTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.C12DAOTreasury__factory>;
    getContractFactory(
      name: "MintRedeemGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintRedeemGateway__factory>;
    getContractFactory(
      name: "MockFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashBorrower__factory>;
    getContractFactory(
      name: "MockLayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLayerZeroEndpoint__factory>;

    getContractAt(
      name: "ILayerZeroEndpointV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "IMessageLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLib>;
    getContractAt(
      name: "IMessageLibManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLibManager>;
    getContractAt(
      name: "IMessagingChannel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingChannel>;
    getContractAt(
      name: "IMessagingComposer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingComposer>;
    getContractAt(
      name: "IMessagingContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingContext>;
    getContractAt(
      name: "ISendLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISendLib>;
    getContractAt(
      name: "AddressCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressCast>;
    getContractAt(
      name: "IOAppCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppCore>;
    getContractAt(
      name: "IOAppMsgInspector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppMsgInspector>;
    getContractAt(
      name: "IOAppOptionsType3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppOptionsType3>;
    getContractAt(
      name: "IOAppReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppReceiver>;
    getContractAt(
      name: "OAppOptionsType3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppOptionsType3>;
    getContractAt(
      name: "OApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OApp>;
    getContractAt(
      name: "OAppCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppCore>;
    getContractAt(
      name: "OAppReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppReceiver>;
    getContractAt(
      name: "OAppSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppSender>;
    getContractAt(
      name: "IOAppPreCrimeSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppPreCrimeSimulator>;
    getContractAt(
      name: "IPreCrime",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPreCrime>;
    getContractAt(
      name: "OAppPreCrimeSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppPreCrimeSimulator>;
    getContractAt(
      name: "IOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOFT>;
    getContractAt(
      name: "OFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFT>;
    getContractAt(
      name: "OFTCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCore>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "GovernorCountingSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorCountingSimple>;
    getContractAt(
      name: "GovernorSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorSettings>;
    getContractAt(
      name: "GovernorTimelockControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorTimelockControl>;
    getContractAt(
      name: "GovernorVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotes>;
    getContractAt(
      name: "GovernorVotesQuorumFraction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorVotesQuorumFraction>;
    getContractAt(
      name: "IGovernorTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernorTimelock>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "IGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernor>;
    getContractAt(
      name: "TimelockController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IERC5805",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5805>;
    getContractAt(
      name: "IERC6372",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6372>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20FlashMint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FlashMint>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "ERC20Votes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Votes>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "DoubleEndedQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleEndedQueue>;
    getContractAt(
      name: "C12USDTokenEnhanced",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12USDTokenEnhanced>;
    getContractAt(
      name: "C12DAO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12DAO>;
    getContractAt(
      name: "C12DAOGovernor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12DAOGovernor>;
    getContractAt(
      name: "C12DAOStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12DAOStaking>;
    getContractAt(
      name: "C12DAOTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12DAOTimelock>;
    getContractAt(
      name: "C12DAOTreasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.C12DAOTreasury>;
    getContractAt(
      name: "MintRedeemGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintRedeemGateway>;
    getContractAt(
      name: "MockFlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashBorrower>;
    getContractAt(
      name: "MockLayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLayerZeroEndpoint>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
