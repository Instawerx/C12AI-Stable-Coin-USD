# Multi-stage build for C12USD Backend API - Fixed Version
# Stage 1: Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm and dependencies
RUN npm install -g pnpm@10.17.1
RUN pnpm install --force

# Copy source code
COPY . .

# Generate Prisma client
RUN pnpm db:generate

# Compile TypeScript and Hardhat contracts
RUN pnpm compile

# Skip tests during Docker build for now
# RUN pnpm test

# Stage 2: Production stage
FROM node:20-alpine AS production

# Install security updates and PostgreSQL client for connection testing
RUN apk update && apk upgrade && apk add --no-cache dumb-init postgresql-client

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm and production dependencies only
RUN npm install -g pnpm@10.17.1
RUN pnpm install --force --prod

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/contracts ./contracts
COPY --from=builder --chown=nextjs:nodejs /app/typechain-types ./typechain-types
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/generated ./generated

# Create startup script with database connection retry
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh
echo "🚀 Starting C12USD Backend..."
echo "Environment: $NODE_ENV"
echo "Port: $PORT"

# Test database connection if DATABASE_URL is provided
if [ ! -z "$DATABASE_URL" ]; then
  echo "🔍 Testing database connection..."
  # Extract connection details for pg_isready
  DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
  DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')

  if [ ! -z "$DB_HOST" ] && [ ! -z "$DB_PORT" ]; then
    echo "Testing connection to $DB_HOST:$DB_PORT..."
    for i in $(seq 1 30); do
      if pg_isready -h $DB_HOST -p $DB_PORT; then
        echo "✅ Database connection successful!"
        break
      else
        echo "⏳ Waiting for database... attempt $i/30"
        sleep 2
      fi
    done
  fi
fi

echo "🎯 Starting application server..."
exec node src/server.js
EOF

RUN chmod +x /app/start.sh

# Set proper permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port for Cloud Run
EXPOSE 8080

# Health check with proper port
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "const http = require('http'); const port = process.env.PORT || 8080; const req = http.get(\`http://localhost:\${port}/health\`, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.setTimeout(5000, () => { req.destroy(); process.exit(1); });"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with our custom script
CMD ["/app/start.sh"]