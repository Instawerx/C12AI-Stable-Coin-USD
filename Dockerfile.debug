# Enhanced Debug Dockerfile for C12USD Backend API
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm and dependencies
RUN npm install -g pnpm@10.17.1
RUN pnpm install --force

# Copy source code
COPY . .

# Generate Prisma client
RUN pnpm db:generate

# Compile TypeScript and Hardhat contracts
RUN pnpm compile

# Production stage with enhanced debugging
FROM node:20-alpine AS production

# Install security updates and PostgreSQL client for connection testing
RUN apk update && apk upgrade && apk add --no-cache dumb-init postgresql-client curl

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install pnpm and production dependencies only
RUN npm install -g pnpm@10.17.1
RUN pnpm install --force --prod

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/contracts ./contracts
COPY --from=builder --chown=nextjs:nodejs /app/typechain-types ./typechain-types
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/src ./src
COPY --from=builder --chown=nextjs:nodejs /app/generated ./generated

# Create enhanced startup script with comprehensive debugging
RUN cat > /app/start.sh << 'EOF'
#!/bin/sh
echo "🚀 Starting C12USD Backend..."
echo "=============================="
echo "Environment: $NODE_ENV"
echo "Port: $PORT"
echo "Timestamp: $(date)"

# Environment debugging
echo ""
echo "🔍 Environment Variable Check:"
echo "NODE_ENV: $NODE_ENV"
echo "PORT: $PORT"
echo "DATABASE_URL: ${DATABASE_URL:0:20}..."
echo "BSC_RPC: $BSC_RPC"
echo "POLYGON_RPC: $POLYGON_RPC"
echo "BSC_TOKEN_ADDRESS: $BSC_TOKEN_ADDRESS"
echo "BSC_GATEWAY_ADDRESS: $BSC_GATEWAY_ADDRESS"
echo "POLYGON_TOKEN_ADDRESS: $POLYGON_TOKEN_ADDRESS"
echo "POLYGON_GATEWAY_ADDRESS: $POLYGON_GATEWAY_ADDRESS"
echo "MAX_TRANSACTION_LIMIT: $MAX_TRANSACTION_LIMIT"
echo "POR_UPDATE_INTERVAL_HOURS: $POR_UPDATE_INTERVAL_HOURS"
echo "LOG_LEVEL: $LOG_LEVEL"
echo "OPS_SIGNER_PRIVATE_KEY: ${OPS_SIGNER_PRIVATE_KEY:0:10}..."

# Test database connection if DATABASE_URL is provided
if [ ! -z "$DATABASE_URL" ]; then
  echo ""
  echo "🔍 Testing database connection..."
  # Extract connection details for pg_isready
  DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
  DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')

  if [ ! -z "$DB_HOST" ] && [ ! -z "$DB_PORT" ]; then
    echo "Testing connection to $DB_HOST:$DB_PORT..."
    for i in $(seq 1 10); do
      if pg_isready -h $DB_HOST -p $DB_PORT; then
        echo "✅ Database connection successful!"
        break
      else
        echo "⏳ Waiting for database... attempt $i/10"
        sleep 2
      fi
    done
  fi
fi

# Test HTTP endpoint connectivity
echo ""
echo "🔍 Testing HTTP connectivity..."
echo "Will start server on 0.0.0.0:$PORT"

# Environment validation test
echo ""
echo "🔍 Running environment validation..."
node -e "
try {
  const { validateEnvironment } = require('./src/utils/validation');
  const result = validateEnvironment();
  console.log('Validation result:', result.isValid ? 'PASSED' : 'FAILED');
  if (!result.isValid) {
    console.log('Errors:', result.errors);
  }
  if (result.warnings && result.warnings.length > 0) {
    console.log('Warnings:', result.warnings);
  }
} catch (error) {
  console.error('Environment validation error:', error.message);
}
"

echo ""
echo "🎯 Starting application server..."
exec node src/server.js
EOF

RUN chmod +x /app/start.sh

# Set proper permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port for Cloud Run
EXPOSE 8080

# Health check with proper port
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:${PORT:-8080}/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with our enhanced debug script
CMD ["/app/start.sh"]